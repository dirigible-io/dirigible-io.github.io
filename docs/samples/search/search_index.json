{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Eclipse Dirigible \u2122 Samples This section collects various applications created to demonstrate the main use purposes and strengths of the cloud toolkit. They are built on scenarios with different complexity level, from exemplary samples targeting demonstration of single features to complete end-to-end applications. Simple Samples Decode a String from Base64 - how to decode a string from Base64 encoded input Encode a String to Base64 - how to encode a string with Base64 Console Log Levels - show how to use the built-in console object to print information in the standard output Database Dynamic Datasource - how to use dynamic datasources Database Statement - getting started with the low level Database API Database Query - using the simplified Query Database API Encrypt a Text with SHA512 - how to use SHA512 to encrypt an input byte array Decode a String from Hexadecimal Format - decoding string from HEX Encode a String to Hexadecimal Format - encoding a string to HEX HTTP Request - basic usage of the HTTP Request API Convert a String from JSON to XML - JSON to XML transformation Convert a String from XML to JSON - XML to JSON Mail Client - how to send mails using the Mail Client API Print Environment Variables - prints environment variables Repository Manager - working with the Repository Manager API REST Call with Binary Response - how to retrieve the binary content from the response REST Calls - how to execute REST calls (GET, POST, PUT, DELETE) using the HTTP Client API REST Service - getting started with the REST framework Decoding of a URL - decoding of an encoded URL Encoding of a URL - encoding an URL Generate a Random UUID - generate a random UUID SOAP Client - building a client for calling a SOAP service SOAP Server - building a server side SOAP service FTP Client - getting started with the FTP Client Platform Lifecycle - getting started with the Platform Lifecycle API Complex Samples Scheduled Job - create a Job definition, which triggers a JavaScript handler service Message Listener - create a Listener definition, which listens for events coming from a message queue and execute a JavaScript handler service BPMN Process - create a BPMN Process definition, with a simple Service step, which triggers a JavaScript handler service Bookstore Application - create a full-stack application for Books management - database, persistence, web service and user interface. Embedded Dirigible - embed Dirigible into an arbitrary Java application with specific requirements for the architecture, infrastructure and lifecycle management e.g. SpringBoot, Jakarta EE, etc. RBAC for CMS - how to enable the Role Based Access Management for the Content Management System Master Repository - how to run an application from a Zip file Shell Command - how to execute and arbitrary shell command File Upload - how to upload a file from HTML frontend and process the content at the backend Kafka Producer and Consumer - usage of Kafka client Tutorials Zeus on Kubernetes - installation and configuration of a Kubernetes Minikube cluster and Zeus deployment. Build a Custom Stack - how to combine Dirigible modules with pure Java based ones and how to fine-tune the distribution for production. Generate Application from Model - this tutorial will guide you through the creation of an entity data model and generation of a full-stack Dirigible application, from this model.","title":"Samples"},{"location":"#eclipse-dirigible-samples","text":"This section collects various applications created to demonstrate the main use purposes and strengths of the cloud toolkit. They are built on scenarios with different complexity level, from exemplary samples targeting demonstration of single features to complete end-to-end applications.","title":"Eclipse Dirigible&trade; Samples"},{"location":"#simple-samples","text":"Decode a String from Base64 - how to decode a string from Base64 encoded input Encode a String to Base64 - how to encode a string with Base64 Console Log Levels - show how to use the built-in console object to print information in the standard output Database Dynamic Datasource - how to use dynamic datasources Database Statement - getting started with the low level Database API Database Query - using the simplified Query Database API Encrypt a Text with SHA512 - how to use SHA512 to encrypt an input byte array Decode a String from Hexadecimal Format - decoding string from HEX Encode a String to Hexadecimal Format - encoding a string to HEX HTTP Request - basic usage of the HTTP Request API Convert a String from JSON to XML - JSON to XML transformation Convert a String from XML to JSON - XML to JSON Mail Client - how to send mails using the Mail Client API Print Environment Variables - prints environment variables Repository Manager - working with the Repository Manager API REST Call with Binary Response - how to retrieve the binary content from the response REST Calls - how to execute REST calls (GET, POST, PUT, DELETE) using the HTTP Client API REST Service - getting started with the REST framework Decoding of a URL - decoding of an encoded URL Encoding of a URL - encoding an URL Generate a Random UUID - generate a random UUID SOAP Client - building a client for calling a SOAP service SOAP Server - building a server side SOAP service FTP Client - getting started with the FTP Client Platform Lifecycle - getting started with the Platform Lifecycle API","title":"Simple Samples"},{"location":"#complex-samples","text":"Scheduled Job - create a Job definition, which triggers a JavaScript handler service Message Listener - create a Listener definition, which listens for events coming from a message queue and execute a JavaScript handler service BPMN Process - create a BPMN Process definition, with a simple Service step, which triggers a JavaScript handler service Bookstore Application - create a full-stack application for Books management - database, persistence, web service and user interface. Embedded Dirigible - embed Dirigible into an arbitrary Java application with specific requirements for the architecture, infrastructure and lifecycle management e.g. SpringBoot, Jakarta EE, etc. RBAC for CMS - how to enable the Role Based Access Management for the Content Management System Master Repository - how to run an application from a Zip file Shell Command - how to execute and arbitrary shell command File Upload - how to upload a file from HTML frontend and process the content at the backend Kafka Producer and Consumer - usage of Kafka client","title":"Complex Samples"},{"location":"#tutorials","text":"Zeus on Kubernetes - installation and configuration of a Kubernetes Minikube cluster and Zeus deployment. Build a Custom Stack - how to combine Dirigible modules with pure Java based ones and how to fine-tune the distribution for production. Generate Application from Model - this tutorial will guide you through the creation of an entity data model and generation of a full-stack Dirigible application, from this model.","title":"Tutorials"},{"location":"base64-decode/","text":"Base64 - Decode Steps Create a project utils-project . Create a JavaScript service with the name base64-decode.js Enter the following content: var base64 = require ( \"utils/v4/base64\" ); var response = require ( \"http/v4/response\" ); var input = \"PT4/\" ; var result = base64 . decode ( input ); console . log ( \"decoded: \" + result ); response . println ( JSON . stringify ( \"decoded: \" + result )); response . flush (); response . close (); For more information, see the API documentation.","title":"Base64 - Decode"},{"location":"base64-decode/#base64-decode","text":"","title":"Base64 - Decode"},{"location":"base64-decode/#steps","text":"Create a project utils-project . Create a JavaScript service with the name base64-decode.js Enter the following content: var base64 = require ( \"utils/v4/base64\" ); var response = require ( \"http/v4/response\" ); var input = \"PT4/\" ; var result = base64 . decode ( input ); console . log ( \"decoded: \" + result ); response . println ( JSON . stringify ( \"decoded: \" + result )); response . flush (); response . close (); For more information, see the API documentation.","title":"Steps"},{"location":"base64-encode/","text":"Base64 - Encode Steps Create a project utils-project . Create a JavaScript service with the name base64-encode.js . Enter the following content: var base64 = require ( \"utils/v4/base64\" ); var response = require ( \"http/v4/response\" ); var input = [ 61 , 62 , 63 ]; var result = base64 . encode ( input ); console . log ( \"encoded: \" + result ); response . println ( JSON . stringify ( \"encoded: \" + result )); response . flush (); response . close (); For more information, see the API documentation.","title":"Base64 - Encode"},{"location":"base64-encode/#base64-encode","text":"","title":"Base64 - Encode"},{"location":"base64-encode/#steps","text":"Create a project utils-project . Create a JavaScript service with the name base64-encode.js . Enter the following content: var base64 = require ( \"utils/v4/base64\" ); var response = require ( \"http/v4/response\" ); var input = [ 61 , 62 , 63 ]; var result = base64 . encode ( input ); console . log ( \"encoded: \" + result ); response . println ( JSON . stringify ( \"encoded: \" + result )); response . flush (); response . close (); For more information, see the API documentation.","title":"Steps"},{"location":"console/","text":"Console Steps Create a project console-project . Then create a JavaScript service named console-test.js . Within the service code, enter the following content: console . info ( \"Info message: %s\" , \"Hello World!\" ); console . error ( \"Error message.\" ); console . warn ( \"Warning message.\" ); console . log ( \"Log message.\" ); console . trace ( \"Trace.\" ); For more information, see the API documentation.","title":"Console"},{"location":"console/#console","text":"","title":"Console"},{"location":"console/#steps","text":"Create a project console-project . Then create a JavaScript service named console-test.js . Within the service code, enter the following content: console . info ( \"Info message: %s\" , \"Hello World!\" ); console . error ( \"Error message.\" ); console . warn ( \"Warning message.\" ); console . log ( \"Log message.\" ); console . trace ( \"Trace.\" ); For more information, see the API documentation.","title":"Steps"},{"location":"converting-json-xml/","text":"Converting JSON to XML Steps Create a project utils-xml . Create a JavaScript service with the name json-xml.js . Enter the following content: var xml = require ( \"utils/v4/xml\" ); var response = require ( \"http/v4/response\" ); var input = { a : { b : \"text_b\" , c : \"text_c\" , d : { e : \"text_e\" } } }; var result = xml . fromJson ( input ); console . log ( \"XML: \" + result ); response . println ( JSON . stringify ( \"XML: \" + result )); response . flush (); response . close (); For more information, see the API documentation.","title":"Converting JSON to XML"},{"location":"converting-json-xml/#converting-json-to-xml","text":"","title":"Converting JSON to XML"},{"location":"converting-json-xml/#steps","text":"Create a project utils-xml . Create a JavaScript service with the name json-xml.js . Enter the following content: var xml = require ( \"utils/v4/xml\" ); var response = require ( \"http/v4/response\" ); var input = { a : { b : \"text_b\" , c : \"text_c\" , d : { e : \"text_e\" } } }; var result = xml . fromJson ( input ); console . log ( \"XML: \" + result ); response . println ( JSON . stringify ( \"XML: \" + result )); response . flush (); response . close (); For more information, see the API documentation.","title":"Steps"},{"location":"converting-xml-json/","text":"Converting XML to JSON Steps Create a project utils-xml . Create a JavaScript service with the name xml-json.js . Enter the following content: var xml2json = require ( \"utils/v4/xml\" ); var response = require ( \"http/v4/response\" ); var input = \"<a><b>text_b</b><c>text_c</c><d><e>text_e</e></d></a>\" ; var result = xml2json . toJson ( input ); var json = JSON . parse ( result ); console . log ( \"JSON: \" + JSON . stringify ( json )); response . println ( JSON . stringify ( json )); response . flush (); response . close (); For more information, see the API documentation.","title":"Converting XML to JSON"},{"location":"converting-xml-json/#converting-xml-to-json","text":"","title":"Converting XML to JSON"},{"location":"converting-xml-json/#steps","text":"Create a project utils-xml . Create a JavaScript service with the name xml-json.js . Enter the following content: var xml2json = require ( \"utils/v4/xml\" ); var response = require ( \"http/v4/response\" ); var input = \"<a><b>text_b</b><c>text_c</c><d><e>text_e</e></d></a>\" ; var result = xml2json . toJson ( input ); var json = JSON . parse ( result ); console . log ( \"JSON: \" + JSON . stringify ( json )); response . println ( JSON . stringify ( json )); response . flush (); response . close (); For more information, see the API documentation.","title":"Steps"},{"location":"database-dynamic/","text":"Database - Dynamic Datasource Steps Create a project database-project . Then create a JavaScript service named database-dynamic.js . Within the service code, enter the following content: var response = require ( \"http/v4/response\" ); var database = require ( \"db/v4/database\" ); database . createDataSource ( \"mydynamic\" , \"org.h2.Driver\" , \"jdbc:h2:~/mytest\" , \"sa\" , \"\" , null ); var connection = database . getConnection ( \"dynamic\" , \"mydynamic\" ); try { var statement = connection . prepareStatement ( \"select current_date from dual\" ); var resultSet = statement . executeQuery (); while ( resultSet . next ()) { response . println ( \"[date]: \" + resultSet . getString ( 1 )); } resultSet . close (); statement . close (); } catch ( e ) { console . trace ( e ); response . println ( e . message ); } finally { connection . close (); } response . flush (); response . close (); For more information, see the API documentation.","title":"Database - Dynamic Datasource"},{"location":"database-dynamic/#database-dynamic-datasource","text":"","title":"Database - Dynamic Datasource"},{"location":"database-dynamic/#steps","text":"Create a project database-project . Then create a JavaScript service named database-dynamic.js . Within the service code, enter the following content: var response = require ( \"http/v4/response\" ); var database = require ( \"db/v4/database\" ); database . createDataSource ( \"mydynamic\" , \"org.h2.Driver\" , \"jdbc:h2:~/mytest\" , \"sa\" , \"\" , null ); var connection = database . getConnection ( \"dynamic\" , \"mydynamic\" ); try { var statement = connection . prepareStatement ( \"select current_date from dual\" ); var resultSet = statement . executeQuery (); while ( resultSet . next ()) { response . println ( \"[date]: \" + resultSet . getString ( 1 )); } resultSet . close (); statement . close (); } catch ( e ) { console . trace ( e ); response . println ( e . message ); } finally { connection . close (); } response . flush (); response . close (); For more information, see the API documentation.","title":"Steps"},{"location":"database-query/","text":"Database - Query Steps Create a project database-project . Then create a JavaScript service named database-query.js . Within the service code, enter the following content: var query = require ( \"db/v4/query\" ); var response = require ( \"http/v4/response\" ); var sql = \"SELECT * FROM DIRIGIBLE_EXTENSIONS WHERE EXTENSION_EXTENSIONPOINT_NAME = ?\" ; var resultset = query . execute ( sql , [ \"ide-view\" ]); response . println ( \"<pre>\" + JSON . stringify ( resultset , null , 2 ) + \"</pre>\" ); response . flush (); response . close (); For more information, see the API documentation.","title":"Database - Query"},{"location":"database-query/#database-query","text":"","title":"Database - Query"},{"location":"database-query/#steps","text":"Create a project database-project . Then create a JavaScript service named database-query.js . Within the service code, enter the following content: var query = require ( \"db/v4/query\" ); var response = require ( \"http/v4/response\" ); var sql = \"SELECT * FROM DIRIGIBLE_EXTENSIONS WHERE EXTENSION_EXTENSIONPOINT_NAME = ?\" ; var resultset = query . execute ( sql , [ \"ide-view\" ]); response . println ( \"<pre>\" + JSON . stringify ( resultset , null , 2 ) + \"</pre>\" ); response . flush (); response . close (); For more information, see the API documentation.","title":"Steps"},{"location":"database-statement/","text":"Database - Statement Steps Create a project database-project . Then create a JavaScript service named database-basic.js . Within the service code, enter the following content: var database = require ( \"db/v4/database\" ); var response = require ( \"http/v4/response\" ); var connection = database . getConnection (); try { var statement = connection . prepareStatement ( \"select * from DIRIGIBLE_EXTENSIONS where EXTENSION_EXTENSIONPOINT_NAME = ?\" ); var i = 0 ; statement . setString ( ++ i , \"ide-view\" ); var resultSet = statement . executeQuery (); while ( resultSet . next ()) { response . println ( \"[location]: \" + resultSet . getString ( \"EXTENSION_LOCATION\" )); } resultSet . close (); statement . close (); } catch ( e ) { console . trace ( e ); response . println ( e . message ); } finally { connection . close (); } response . flush (); response . close (); For more information, see the API documentation.","title":"Database - Statement"},{"location":"database-statement/#database-statement","text":"","title":"Database - Statement"},{"location":"database-statement/#steps","text":"Create a project database-project . Then create a JavaScript service named database-basic.js . Within the service code, enter the following content: var database = require ( \"db/v4/database\" ); var response = require ( \"http/v4/response\" ); var connection = database . getConnection (); try { var statement = connection . prepareStatement ( \"select * from DIRIGIBLE_EXTENSIONS where EXTENSION_EXTENSIONPOINT_NAME = ?\" ); var i = 0 ; statement . setString ( ++ i , \"ide-view\" ); var resultSet = statement . executeQuery (); while ( resultSet . next ()) { response . println ( \"[location]: \" + resultSet . getString ( \"EXTENSION_LOCATION\" )); } resultSet . close (); statement . close (); } catch ( e ) { console . trace ( e ); response . println ( e . message ); } finally { connection . close (); } response . flush (); response . close (); For more information, see the API documentation.","title":"Steps"},{"location":"digest/","text":"Encrypy - SHA-512 Steps Create a project digest-project . Create a JavaScript service with the name digest-sha512.js . Enter the following content: var digest = require ( \"utils/v4/digest\" ); var response = require ( \"http/v4/response\" ); var input = [ 61 , 62 , 63 ]; var result = digest . sha512 ( input ); console . log ( result ); response . println ( JSON . stringify ( result )); response . flush (); response . close (); For more information, see the API documentation.","title":"Encrypt - SHA-512"},{"location":"digest/#encrypy-sha-512","text":"","title":"Encrypy - SHA-512"},{"location":"digest/#steps","text":"Create a project digest-project . Create a JavaScript service with the name digest-sha512.js . Enter the following content: var digest = require ( \"utils/v4/digest\" ); var response = require ( \"http/v4/response\" ); var input = [ 61 , 62 , 63 ]; var result = digest . sha512 ( input ); console . log ( result ); response . println ( JSON . stringify ( result )); response . flush (); response . close (); For more information, see the API documentation.","title":"Steps"},{"location":"ftp-client/","text":"FTP Client Steps Create a project ftp-client-test . Then create a JavaScript service named ftp-client.js . Within the service code, enter the following content: var response = require ( \"http/v4/response\" ); var ftp = require ( \"io/v4/ftp\" ); var host = \"test.rebex.net\" ; var port = 21 ; var userName = \"demo\" ; var password = \"password\" ; var ftpClient = ftp . getClient ( host , port , userName , password ); var file = ftpClient . getFileText ( \"/\" , \"readme.txt\" ); response . println ( file ); For more information, see the API documentation.","title":"FTP Client"},{"location":"ftp-client/#ftp-client","text":"","title":"FTP Client"},{"location":"ftp-client/#steps","text":"Create a project ftp-client-test . Then create a JavaScript service named ftp-client.js . Within the service code, enter the following content: var response = require ( \"http/v4/response\" ); var ftp = require ( \"io/v4/ftp\" ); var host = \"test.rebex.net\" ; var port = 21 ; var userName = \"demo\" ; var password = \"password\" ; var ftpClient = ftp . getClient ( host , port , userName , password ); var file = ftpClient . getFileText ( \"/\" , \"readme.txt\" ); response . println ( file ); For more information, see the API documentation.","title":"Steps"},{"location":"hex-decode/","text":"Hex - Decode Steps Create a project utils-hex . Create a JavaScript service with the name hex-decode.js . Enter the following content: var hex = require ( \"utils/v4/hex\" ); var response = require ( \"http/v4/response\" ); var input = \"414243\" ; var result = hex . decode ( input ); console . log ( \"decoded: \" + result ); response . println ( JSON . stringify ( result )); response . flush (); response . close (); For more information, see the API documentation.","title":"Hex - Decode"},{"location":"hex-decode/#hex-decode","text":"","title":"Hex - Decode"},{"location":"hex-decode/#steps","text":"Create a project utils-hex . Create a JavaScript service with the name hex-decode.js . Enter the following content: var hex = require ( \"utils/v4/hex\" ); var response = require ( \"http/v4/response\" ); var input = \"414243\" ; var result = hex . decode ( input ); console . log ( \"decoded: \" + result ); response . println ( JSON . stringify ( result )); response . flush (); response . close (); For more information, see the API documentation.","title":"Steps"},{"location":"hex-encode/","text":"Hex - Encode Steps Create a project utils-hex . Create a JavaScript service with the name hex-encode.js . Enter the following content: var hex = require ( \"utils/v4/hex\" ); var response = require ( \"http/v4/response\" ); var input = [ 65 , 66 , 67 ]; var result = hex . encode ( input ); console . log ( \"encoded: \" + result ); response . println ( JSON . stringify ( result )); response . flush (); response . close (); For more information, see the API documentation.","title":"Hex - Encode"},{"location":"hex-encode/#hex-encode","text":"","title":"Hex - Encode"},{"location":"hex-encode/#steps","text":"Create a project utils-hex . Create a JavaScript service with the name hex-encode.js . Enter the following content: var hex = require ( \"utils/v4/hex\" ); var response = require ( \"http/v4/response\" ); var input = [ 65 , 66 , 67 ]; var result = hex . encode ( input ); console . log ( \"encoded: \" + result ); response . println ( JSON . stringify ( result )); response . flush (); response . close (); For more information, see the API documentation.","title":"Steps"},{"location":"http-client-binary/","text":"HTTP Client - Binary Response Steps Create a project rest-call-binary-project . Then create a JavaScript service named get-call-binary.js . Within the service code, enter the following content: var client = require ( \"http/v4/client\" ); var response = require ( \"http/v4/response\" ); var httpResponse = client . get ( \"https://raw.githubusercontent.com/eclipse/dirigible/master/NOTICE.txt\" , { binary : true }); response . println ( httpResponse . statusMessage ); response . println ( JSON . stringify ( httpResponse . data )); response . flush (); response . close (); For more information, see the API documentation.","title":"HTTP Client - Binary Response"},{"location":"http-client-binary/#http-client-binary-response","text":"","title":"HTTP Client - Binary Response"},{"location":"http-client-binary/#steps","text":"Create a project rest-call-binary-project . Then create a JavaScript service named get-call-binary.js . Within the service code, enter the following content: var client = require ( \"http/v4/client\" ); var response = require ( \"http/v4/response\" ); var httpResponse = client . get ( \"https://raw.githubusercontent.com/eclipse/dirigible/master/NOTICE.txt\" , { binary : true }); response . println ( httpResponse . statusMessage ); response . println ( JSON . stringify ( httpResponse . data )); response . flush (); response . close (); For more information, see the API documentation.","title":"Steps"},{"location":"http-client-calls/","text":"HTTP Client - Calls Steps Create a project rest-calls . Then create a JavaScript service named get-call.js . Within the service code, enter the following content: GET Call var httpClient = require ( \"http/v4/client\" ); var response = require ( \"http/v4/response\" ); var httpResponse = httpClient . get ( \"https://services.odata.org/V4/Northwind/Northwind.svc/\" ); response . println ( httpResponse . statusMessage ); response . println ( httpResponse . text ); response . flush (); response . close (); Then create a JavaScript service named post-call.js . Within the service code, enter the following content: POST Call var httpClient = require ( \"http/v4/client\" ); var response = require ( \"http/v4/response\" ); var bodyContent = JSON . stringify ({ firstName : \"John\" , lastName : \"Doe\" , age : 24 }); var httpResponse = httpClient . post ( \"http://httpbin.org/post\" , { text : bodyContent }); response . println ( httpResponse . statusMessage ); response . println ( httpResponse . text ); response . flush (); response . close (); Then create a JavaScript service named put-call.js . Within the service code, enter the following content: PUT Call var httpClient = require ( \"http/v4/client\" ); var response = require ( \"http/v4/response\" ); var bodyContent = JSON . stringify ({ firstName : \"John\" , lastName : \"Doe\" , age : 24 }); var httpResponse = httpClient . put ( \"http://httpbin.org/put\" , { text : bodyContent }); response . println ( httpResponse . statusMessage ); response . println ( httpResponse . text ); response . flush (); response . close (); 2. Then create a JavaScript service named delete-call.js . 3. Within the service code, enter the following content: DELETE Call var httpClient = require ( \"http/v4/client\" ); var response = require ( \"http/v4/response\" ); var httpResponse = httpClient . delete ( \"http://httpbin.org/delete\" ); response . println ( httpResponse . statusMessage ); response . println ( httpResponse . text ); response . flush (); response . close (); For more information, see the API documentation.","title":"HTTP Client - Calls"},{"location":"http-client-calls/#http-client-calls","text":"","title":"HTTP Client - Calls"},{"location":"http-client-calls/#steps","text":"Create a project rest-calls . Then create a JavaScript service named get-call.js . Within the service code, enter the following content:","title":"Steps"},{"location":"http-client-calls/#get-call","text":"var httpClient = require ( \"http/v4/client\" ); var response = require ( \"http/v4/response\" ); var httpResponse = httpClient . get ( \"https://services.odata.org/V4/Northwind/Northwind.svc/\" ); response . println ( httpResponse . statusMessage ); response . println ( httpResponse . text ); response . flush (); response . close (); Then create a JavaScript service named post-call.js . Within the service code, enter the following content:","title":"GET Call"},{"location":"http-client-calls/#post-call","text":"var httpClient = require ( \"http/v4/client\" ); var response = require ( \"http/v4/response\" ); var bodyContent = JSON . stringify ({ firstName : \"John\" , lastName : \"Doe\" , age : 24 }); var httpResponse = httpClient . post ( \"http://httpbin.org/post\" , { text : bodyContent }); response . println ( httpResponse . statusMessage ); response . println ( httpResponse . text ); response . flush (); response . close (); Then create a JavaScript service named put-call.js . Within the service code, enter the following content:","title":"POST Call"},{"location":"http-client-calls/#put-call","text":"var httpClient = require ( \"http/v4/client\" ); var response = require ( \"http/v4/response\" ); var bodyContent = JSON . stringify ({ firstName : \"John\" , lastName : \"Doe\" , age : 24 }); var httpResponse = httpClient . put ( \"http://httpbin.org/put\" , { text : bodyContent }); response . println ( httpResponse . statusMessage ); response . println ( httpResponse . text ); response . flush (); response . close (); 2. Then create a JavaScript service named delete-call.js . 3. Within the service code, enter the following content:","title":"PUT Call"},{"location":"http-client-calls/#delete-call","text":"var httpClient = require ( \"http/v4/client\" ); var response = require ( \"http/v4/response\" ); var httpResponse = httpClient . delete ( \"http://httpbin.org/delete\" ); response . println ( httpResponse . statusMessage ); response . println ( httpResponse . text ); response . flush (); response . close (); For more information, see the API documentation.","title":"DELETE Call"},{"location":"http-request/","text":"HTTP - Request Steps Create a project http-service-project . Then create a JavaScript service named http-service.js . Within the service code, enter the following content: Simple HTTP Service var request = require ( \"http/v4/request\" ); var response = require ( \"http/v4/response\" ); var method = request . getMethod (); response . println ( \"[Method]: \" + method ); response . flush (); response . close (); For more information, see the API documentation.","title":"HTTP - Request"},{"location":"http-request/#http-request","text":"","title":"HTTP - Request"},{"location":"http-request/#steps","text":"Create a project http-service-project . Then create a JavaScript service named http-service.js . Within the service code, enter the following content:","title":"Steps"},{"location":"http-request/#simple-http-service","text":"var request = require ( \"http/v4/request\" ); var response = require ( \"http/v4/response\" ); var method = request . getMethod (); response . println ( \"[Method]: \" + method ); response . flush (); response . close (); For more information, see the API documentation.","title":"Simple HTTP Service"},{"location":"mail-client/","text":"Send Email Steps Create a project mail-project . Create a JavaScript service with the name mail-service.js . Enter the following content: var response = require ( \"http/v4/response\" ); var mail = require ( \"mail/v4/client\" ); var from = \"from@email.address\" ; var to = \"to@email.address\" ; var subject = \"Subject\" ; var content = \"<h1>Content<h1>\" ; var subType = \"html\" ; mail . send ( from , to , subject , content , subType ); response . println ( \"Mail sent\" ); Note: This sample leverages the default mail configuration provided through the environment variables Create a project mail-custom-project . Create a JavaScript service with the name mail-custom-service.js . Enter the following content: var response = require ( \"http/v4/response\" ); var mail = require ( \"mail/v4/client\" ); var mailConfig = { \"mail.user\" : \"<your-mailbox-user>\" , \"mail.password\" : \"<your-mailbox-password>\" , \"mail.transport.protocol\" : \"smtps\" , \"mail.smtps.host\" : \"smtp.gmail.com\" , \"mail.smtps.port\" : \"465\" , \"mail.smtps.auth\" : \"true\" }; var mailClient = mail . getClient ( mailConfig ); var from = \"<your-mailbox-user>@gmail.com\" ; var recipients = { to : \"<your-mailbox-user>@gmail.com\" , cc : [ \"<your-mailbox-user>@gmail.com\" , \"<your-mailbox-user-2>@sap.com\" ], bcc : \"<your-mailbox-user>@sap.com\" }; var subject = \"Subject\" ; var content = \"<h1>Content</h1>\" ; var subType = \"html\" ; mailClient . send ( from , recipients , subject , content , subType ); response . println ( \"Mail sent\" ); Note: This sample leverages Gmail SMTPS, to make this sample work, access from third party applications ( Less secure apps ) should be enabled, also Troubleshoot Problems could help For more information, see the API documentation.","title":"Send Email"},{"location":"mail-client/#send-email","text":"","title":"Send Email"},{"location":"mail-client/#steps","text":"Create a project mail-project . Create a JavaScript service with the name mail-service.js . Enter the following content: var response = require ( \"http/v4/response\" ); var mail = require ( \"mail/v4/client\" ); var from = \"from@email.address\" ; var to = \"to@email.address\" ; var subject = \"Subject\" ; var content = \"<h1>Content<h1>\" ; var subType = \"html\" ; mail . send ( from , to , subject , content , subType ); response . println ( \"Mail sent\" ); Note: This sample leverages the default mail configuration provided through the environment variables Create a project mail-custom-project . Create a JavaScript service with the name mail-custom-service.js . Enter the following content: var response = require ( \"http/v4/response\" ); var mail = require ( \"mail/v4/client\" ); var mailConfig = { \"mail.user\" : \"<your-mailbox-user>\" , \"mail.password\" : \"<your-mailbox-password>\" , \"mail.transport.protocol\" : \"smtps\" , \"mail.smtps.host\" : \"smtp.gmail.com\" , \"mail.smtps.port\" : \"465\" , \"mail.smtps.auth\" : \"true\" }; var mailClient = mail . getClient ( mailConfig ); var from = \"<your-mailbox-user>@gmail.com\" ; var recipients = { to : \"<your-mailbox-user>@gmail.com\" , cc : [ \"<your-mailbox-user>@gmail.com\" , \"<your-mailbox-user-2>@sap.com\" ], bcc : \"<your-mailbox-user>@sap.com\" }; var subject = \"Subject\" ; var content = \"<h1>Content</h1>\" ; var subType = \"html\" ; mailClient . send ( from , recipients , subject , content , subType ); response . println ( \"Mail sent\" ); Note: This sample leverages Gmail SMTPS, to make this sample work, access from third party applications ( Less secure apps ) should be enabled, also Troubleshoot Problems could help For more information, see the API documentation.","title":"Steps"},{"location":"platform-lifecycle/","text":"Platform Lifecycle Steps Create a project platform-lifecycle-test . Then create a JavaScript service named platform-lifecycle.js . Within the service code, enter the following content: var response = require ( \"http/v4/response\" ); var user = require ( \"security/v4/user\" ); var workspace = require ( \"workspace/v4/manager\" ); var lifecycle = require ( \"platform/v4/lifecycle\" ); var bytes = require ( \"io/v4/bytes\" ); var user = user . getName (); var workspaceName = \"workspace\" ; var projectName = \"project\" ; var myWorkspace = workspace . createWorkspace ( workspaceName ); var myProject = myWorkspace . createProject ( projectName ); var myFile = myProject . createFile ( \"file.js\" ); myFile . setContent ( bytes . textToByteArray ( \"console.log('Hello World!');\" )); var publishResult = lifecycle . publish ( user , workspaceName , projectName ); response . println ( \"publishResult: \" + publishResult ) For more information, see the API documentation.","title":"Platform Lifecycle"},{"location":"platform-lifecycle/#platform-lifecycle","text":"","title":"Platform Lifecycle"},{"location":"platform-lifecycle/#steps","text":"Create a project platform-lifecycle-test . Then create a JavaScript service named platform-lifecycle.js . Within the service code, enter the following content: var response = require ( \"http/v4/response\" ); var user = require ( \"security/v4/user\" ); var workspace = require ( \"workspace/v4/manager\" ); var lifecycle = require ( \"platform/v4/lifecycle\" ); var bytes = require ( \"io/v4/bytes\" ); var user = user . getName (); var workspaceName = \"workspace\" ; var projectName = \"project\" ; var myWorkspace = workspace . createWorkspace ( workspaceName ); var myProject = myWorkspace . createProject ( projectName ); var myFile = myProject . createFile ( \"file.js\" ); myFile . setContent ( bytes . textToByteArray ( \"console.log('Hello World!');\" )); var publishResult = lifecycle . publish ( user , workspaceName , projectName ); response . println ( \"publishResult: \" + publishResult ) For more information, see the API documentation.","title":"Steps"},{"location":"print-env/","text":"Print Environment Variables Steps Create a new project and name it env-vars-project . Select the project folder and open the pop-up menu. Choose New -> JavaScript Service . Give it a meaningful name (e.g print-env-vars.js ). Replace the generated code in print-env-vars.js with the following: var env = require ( \"core/v4/env\" ); var response = require ( \"http/v4/response\" ); var envVarsList = JSON . parse ( env . list ()); var envVarValue ; for ( var envVarName in envVarsList ) { envVarValue = envVarsList [ envVarName ] response . println ( envVarName + \"=\" + envVarValue ); } response . flush (); response . close (); For more information, see the API documentation.","title":"Print Environment Variables"},{"location":"print-env/#print-environment-variables","text":"","title":"Print Environment Variables"},{"location":"print-env/#steps","text":"Create a new project and name it env-vars-project . Select the project folder and open the pop-up menu. Choose New -> JavaScript Service . Give it a meaningful name (e.g print-env-vars.js ). Replace the generated code in print-env-vars.js with the following: var env = require ( \"core/v4/env\" ); var response = require ( \"http/v4/response\" ); var envVarsList = JSON . parse ( env . list ()); var envVarValue ; for ( var envVarName in envVarsList ) { envVarValue = envVarsList [ envVarName ] response . println ( envVarName + \"=\" + envVarValue ); } response . flush (); response . close (); For more information, see the API documentation.","title":"Steps"},{"location":"repository-manager/","text":"Repository Manager Steps Create a project repository-manager-test . Then create a JavaScript service named repository-test.js . Within the service code, enter the following content: var response = require ( \"http/v4/response\" ); var repositoryManager = require ( \"repository/v4/manager\" ); repositoryManager . createResource ( \"/registry/public/test/file.js\" , \"console.log('Hello World');\" , \"application/json\" ); var resource = repositoryManager . getResource ( \"/registry/public/test/file.js\" ); var content = resource . getText (); response . println ( content ); response . flush (); response . close (); For more information, see the API documentation.","title":"Repository Manager"},{"location":"repository-manager/#repository-manager","text":"","title":"Repository Manager"},{"location":"repository-manager/#steps","text":"Create a project repository-manager-test . Then create a JavaScript service named repository-test.js . Within the service code, enter the following content: var response = require ( \"http/v4/response\" ); var repositoryManager = require ( \"repository/v4/manager\" ); repositoryManager . createResource ( \"/registry/public/test/file.js\" , \"console.log('Hello World');\" , \"application/json\" ); var resource = repositoryManager . getResource ( \"/registry/public/test/file.js\" ); var content = resource . getText (); response . println ( content ); response . flush (); response . close (); For more information, see the API documentation.","title":"Steps"},{"location":"rest-service/","text":"REST Service Steps Create a project rest-service-project . Then create a JavaScript service named rs-service.js . Within the service code, enter the following content: var rs = require ( \"http/v4/rs\" ); // serve GET HTTP requests sent to resource path \"\" rs . service () . resource ( \"\" ) . get ( function ( ctx , request , response ){ response . println ( \"Hello World!\" ); }) . execute (); For more information, see the API documentation and the guide here .","title":"REST Service"},{"location":"rest-service/#rest-service","text":"","title":"REST Service"},{"location":"rest-service/#steps","text":"Create a project rest-service-project . Then create a JavaScript service named rs-service.js . Within the service code, enter the following content: var rs = require ( \"http/v4/rs\" ); // serve GET HTTP requests sent to resource path \"\" rs . service () . resource ( \"\" ) . get ( function ( ctx , request , response ){ response . println ( \"Hello World!\" ); }) . execute (); For more information, see the API documentation and the guide here .","title":"Steps"},{"location":"soap-client/","text":"SOAP - Client Steps Create a project soap_project . Create a JavaScript service with the name soap-client.js . Enter the following content: var soap = require ( \"net/v4/soap\" ); var response = require ( 'http/v4/response' ); response . setContentType ( \"text/plain; charset=UTF-8\" ); var requestMessage = soap . createMessage (); var part = requestMessage . getPart (); var envelope = part . getEnvelope (); envelope . addNamespaceDeclaration ( \"ws\" , \"http://ws.cdyne.com/\" ); var body = envelope . getBody (); var resolveIPElement = body . addChildElement ( \"ResolveIP\" , \"ws\" ); var ipAddressElement = resolveIPElement . addChildElement ( \"ipAddress\" , \"ws\" ); ipAddressElement . addTextNode ( \"213.239.203.158\" ); var licenseKeyElement = resolveIPElement . addChildElement ( \"licenseKey\" , \"ws\" ); licenseKeyElement . addTextNode ( \"\" ); var mimeHeaders = requestMessage . getMimeHeaders (); mimeHeaders . addHeader ( \"SOAPAction\" , \"http://ws.cdyne.com/ResolveIP\" ); requestMessage . save (); response . println ( \"Request: \" + requestMessage . getText ()); var responseMessage = soap . call ( requestMessage , \"http://ws.cdyne.com/ip2geo/ip2geo.asmx\" ); response . println ( \"Response: \" + responseMessage . getText ()); var responsePart = responseMessage . getPart (); var responseEnvelope = responsePart . getEnvelope (); var responseBody = responseEnvelope . getBody (); var childElements = responseBody . getChildElements (); printElements ( childElements ); response . flush (); response . close (); function printElements ( childElements ) { childElements . forEach ( function ( element ) { if ( element . isSOAPElement ()) { var name = element . getElementName (); response . print ( name . getLocalName ()); response . print ( \": \" ); response . println ( JSON . stringify ( element . getValue ())); printElements ( element . getChildElements ()); } }); } For more information, see the API documentation.","title":"SOAP - Client"},{"location":"soap-client/#soap-client","text":"","title":"SOAP - Client"},{"location":"soap-client/#steps","text":"Create a project soap_project . Create a JavaScript service with the name soap-client.js . Enter the following content: var soap = require ( \"net/v4/soap\" ); var response = require ( 'http/v4/response' ); response . setContentType ( \"text/plain; charset=UTF-8\" ); var requestMessage = soap . createMessage (); var part = requestMessage . getPart (); var envelope = part . getEnvelope (); envelope . addNamespaceDeclaration ( \"ws\" , \"http://ws.cdyne.com/\" ); var body = envelope . getBody (); var resolveIPElement = body . addChildElement ( \"ResolveIP\" , \"ws\" ); var ipAddressElement = resolveIPElement . addChildElement ( \"ipAddress\" , \"ws\" ); ipAddressElement . addTextNode ( \"213.239.203.158\" ); var licenseKeyElement = resolveIPElement . addChildElement ( \"licenseKey\" , \"ws\" ); licenseKeyElement . addTextNode ( \"\" ); var mimeHeaders = requestMessage . getMimeHeaders (); mimeHeaders . addHeader ( \"SOAPAction\" , \"http://ws.cdyne.com/ResolveIP\" ); requestMessage . save (); response . println ( \"Request: \" + requestMessage . getText ()); var responseMessage = soap . call ( requestMessage , \"http://ws.cdyne.com/ip2geo/ip2geo.asmx\" ); response . println ( \"Response: \" + responseMessage . getText ()); var responsePart = responseMessage . getPart (); var responseEnvelope = responsePart . getEnvelope (); var responseBody = responseEnvelope . getBody (); var childElements = responseBody . getChildElements (); printElements ( childElements ); response . flush (); response . close (); function printElements ( childElements ) { childElements . forEach ( function ( element ) { if ( element . isSOAPElement ()) { var name = element . getElementName (); response . print ( name . getLocalName ()); response . print ( \": \" ); response . println ( JSON . stringify ( element . getValue ())); printElements ( element . getChildElements ()); } }); } For more information, see the API documentation.","title":"Steps"},{"location":"soap-server/","text":"SOAP - Server Steps Create a project soap-project . Create a JavaScript service with the name soap-server.js . Enter the following content: var soap = require ( \"net/v4/soap\" ); var request = require ( 'http/v4/request' ); var response = require ( 'http/v4/response' ); var xml = require ( \"utils/v4/xml\" ); // Parse SOAP request var message = soap . parseRequest (); var requestPart = message . getPart (); var requestEnvelope = requestPart . getEnvelope (); var requestBody = requestEnvelope . getBody (); var childElements = requestBody . getChildElements (); printElements ( childElements ); response . setContentType ( \"text/xml; charset=utf-8\" ); var json = { \"soap:Envelope\" : { \"-xmlns:soap\" : \"http://schemas.xmlsoap.org/soap/envelope/\" , \"-xmlns:xsd\" : \"http://www.w3.org/2001/XMLSchema\" , \"-xmlns:xsi\" : \"http://www.w3.org/2001/XMLSchema-instance\" , \"soap:Body\" : { \"ResolveIPResponse\" : { \"-xmlns\" : \"http://ws.cdyne.com/\" , \"ResolveIPResult\" : { \"Country\" : \"Germany\" , \"Organization\" : { }, \"Latitude\" : \"51.2993\" , \"Longitude\" : \"9.490997\" , \"AreaCode\" : \"0\" , \"TimeZone\" : { }, \"HasDaylightSavings\" : \"false\" , \"Certainty\" : \"90\" , \"RegionName\" : { }, \"CountryCode\" : \"DE\" } } } } }; var payload = xml . fromJson ( JSON . stringify ( json )) response . println ( payload ); response . flush (); response . close (); function printElements ( childElements ) { childElements . forEach ( function ( element ) { if ( element . isSOAPElement ()) { var name = element . getElementName (); console . log ( name . getLocalName () + \": \" + element . getValue ()); printElements ( element . getChildElements ()); } }); } For more information, see the API documentation.","title":"SOAP - Server"},{"location":"soap-server/#soap-server","text":"","title":"SOAP - Server"},{"location":"soap-server/#steps","text":"Create a project soap-project . Create a JavaScript service with the name soap-server.js . Enter the following content: var soap = require ( \"net/v4/soap\" ); var request = require ( 'http/v4/request' ); var response = require ( 'http/v4/response' ); var xml = require ( \"utils/v4/xml\" ); // Parse SOAP request var message = soap . parseRequest (); var requestPart = message . getPart (); var requestEnvelope = requestPart . getEnvelope (); var requestBody = requestEnvelope . getBody (); var childElements = requestBody . getChildElements (); printElements ( childElements ); response . setContentType ( \"text/xml; charset=utf-8\" ); var json = { \"soap:Envelope\" : { \"-xmlns:soap\" : \"http://schemas.xmlsoap.org/soap/envelope/\" , \"-xmlns:xsd\" : \"http://www.w3.org/2001/XMLSchema\" , \"-xmlns:xsi\" : \"http://www.w3.org/2001/XMLSchema-instance\" , \"soap:Body\" : { \"ResolveIPResponse\" : { \"-xmlns\" : \"http://ws.cdyne.com/\" , \"ResolveIPResult\" : { \"Country\" : \"Germany\" , \"Organization\" : { }, \"Latitude\" : \"51.2993\" , \"Longitude\" : \"9.490997\" , \"AreaCode\" : \"0\" , \"TimeZone\" : { }, \"HasDaylightSavings\" : \"false\" , \"Certainty\" : \"90\" , \"RegionName\" : { }, \"CountryCode\" : \"DE\" } } } } }; var payload = xml . fromJson ( JSON . stringify ( json )) response . println ( payload ); response . flush (); response . close (); function printElements ( childElements ) { childElements . forEach ( function ( element ) { if ( element . isSOAPElement ()) { var name = element . getElementName (); console . log ( name . getLocalName () + \": \" + element . getValue ()); printElements ( element . getChildElements ()); } }); } For more information, see the API documentation.","title":"Steps"},{"location":"url-decode/","text":"URL - UTF-8 Decoding Steps Create a project utils-url . Create a JavaScript service with the name url-decode.js . Enter the following content: var url = require ( \"utils/v4/url\" ); var response = require ( \"http/v4/response\" ); var input = \"http%3A%2F%2Fwww.dirigible.io%2F\" ; var result = url . decode ( input , \"UTF-8\" ); console . log ( \"Decoded URL: \" + result ); response . println ( JSON . stringify ( result )); response . flush (); response . close (); For more information, see the API documentation.","title":"URL - UTF-8 Decoding"},{"location":"url-decode/#url-utf-8-decoding","text":"","title":"URL - UTF-8 Decoding"},{"location":"url-decode/#steps","text":"Create a project utils-url . Create a JavaScript service with the name url-decode.js . Enter the following content: var url = require ( \"utils/v4/url\" ); var response = require ( \"http/v4/response\" ); var input = \"http%3A%2F%2Fwww.dirigible.io%2F\" ; var result = url . decode ( input , \"UTF-8\" ); console . log ( \"Decoded URL: \" + result ); response . println ( JSON . stringify ( result )); response . flush (); response . close (); For more information, see the API documentation.","title":"Steps"},{"location":"url-encode/","text":"URL - UTF-8 Encoding Steps Create a project utils-url . Create a JavaScript service with the name url_encode.js . Enter the following content: var url = require ( \"utils/v4/url\" ); var response = require ( \"http/v4/response\" ); var input = \"http://www.dirigible.io/\" ; var result = url . encode ( input , \"UTF-8\" ); console . log ( \"Encoded URL: \" + result ); response . println ( JSON . stringify ( result )); response . flush (); response . close (); For more information, see the API documentation.","title":"URL - UTF-8 Encoding"},{"location":"url-encode/#url-utf-8-encoding","text":"","title":"URL - UTF-8 Encoding"},{"location":"url-encode/#steps","text":"Create a project utils-url . Create a JavaScript service with the name url_encode.js . Enter the following content: var url = require ( \"utils/v4/url\" ); var response = require ( \"http/v4/response\" ); var input = \"http://www.dirigible.io/\" ; var result = url . encode ( input , \"UTF-8\" ); console . log ( \"Encoded URL: \" + result ); response . println ( JSON . stringify ( result )); response . flush (); response . close (); For more information, see the API documentation.","title":"Steps"},{"location":"uuid-random-generation/","text":"UUID - Random Generation Steps Create a project utils-uuid . Create a JavaScript service with the name uuid-random-generator.js . Enter the following content: var uuid = require ( \"utils/v4/uuid\" ); var response = require ( \"http/v4/response\" ); var generated = uuid . random (); console . log ( generated ); uuid . validate ( generated ); console . log ( \"Randomly Generated UUID: \" + generated ); response . println ( JSON . stringify ( \"Randomly Generated UUID: \" + generated )); response . flush (); response . close (); For more information, see the API documentation.","title":"UUID - Random Generation"},{"location":"uuid-random-generation/#uuid-random-generation","text":"","title":"UUID - Random Generation"},{"location":"uuid-random-generation/#steps","text":"Create a project utils-uuid . Create a JavaScript service with the name uuid-random-generator.js . Enter the following content: var uuid = require ( \"utils/v4/uuid\" ); var response = require ( \"http/v4/response\" ); var generated = uuid . random (); console . log ( generated ); uuid . validate ( generated ); console . log ( \"Randomly Generated UUID: \" + generated ); response . println ( JSON . stringify ( \"Randomly Generated UUID: \" + generated )); response . flush (); response . close (); For more information, see the API documentation.","title":"Steps"},{"location":"complex/bookstore/","text":"Bookstore Application This sample shows how to create a simple web application for managing a single entity called Books . It contains a database table definition, a RESTful service and a web page for managing the instances via user interface. Steps Project Create a project babylon_project Database Descriptor Then create a database table description named BABYLON_BOOKS.table under the folder data Replace the service code with the following content: { \"name\" : \"BABYLON_BOOKS\" , \"type\" : \"TABLE\" , \"columns\" : [ { \"name\" : \"BOOK_ID\" , \"type\" : \"INTEGER\" , \"length\" : \"0\" , \"primaryKey\" : \"true\" , \"identity\" : \"true\" , \"precision\" : \"\" , \"scale\" : \"\" }, { \"name\" : \"BOOK_ISBN\" , \"type\" : \"CHAR\" , \"length\" : \"13\" , \"primaryKey\" : \"false\" , \"identity\" : \"false\" , \"precision\" : \"\" , \"scale\" : \"\" }, { \"name\" : \"BOOK_TITLE\" , \"type\" : \"VARCHAR\" , \"length\" : \"120\" , \"primaryKey\" : \"false\" , \"identity\" : \"false\" , \"precision\" : \"\" , \"scale\" : \"\" }, { \"name\" : \"BOOK_PUBLISHER\" , \"type\" : \"VARCHAR\" , \"length\" : \"120\" , \"primaryKey\" : \"false\" , \"identity\" : \"false\" , \"precision\" : \"\" , \"scale\" : \"\" }, { \"name\" : \"BOOK_DATE\" , \"type\" : \"DATE\" , \"length\" : \"20\" , \"primaryKey\" : \"false\" , \"identity\" : \"false\" , \"precision\" : \"\" , \"scale\" : \"\" }, { \"name\" : \"BOOK_PRICE\" , \"type\" : \"DOUBLE\" , \"length\" : \"20\" , \"primaryKey\" : \"false\" , \"identity\" : \"false\" , \"precision\" : \"\" , \"scale\" : \"\" } ], \"dependencies\" : [] } Data Access Object Create a JavaScript service named Books.js under the folder dao . Replace the service code with the following content: var daoApi = require ( 'db/v4/dao' ); var dao = daoApi . create ({ 'table' : 'BABYLON_BOOKS' , 'properties' : [ { 'name' : 'id' , 'column' : 'BOOK_ID' , 'type' : 'INTEGER' , 'id' : true , 'required' : true }, { 'name' : 'isbn' , 'column' : 'BOOK_ISBN' , 'type' : 'CHAR' , 'id' : false , 'required' : false }, { 'name' : 'title' , 'column' : 'BOOK_TITLE' , 'type' : 'VARCHAR' , 'id' : false , 'required' : false }, { 'name' : 'publisher' , 'column' : 'BOOK_PUBLISHER' , 'type' : 'VARCHAR' , 'id' : false , 'required' : false }, { 'name' : 'date' , 'column' : 'BOOK_DATE' , 'type' : 'DATE' , 'id' : false , 'required' : true }, { 'name' : 'price' , 'column' : 'BOOK_PRICE' , 'type' : 'DOUBLE' , 'id' : false , 'required' : true }] }); exports . list = function ( settings ) { return dao . list ( settings ); }; exports . get = function ( id ) { return dao . find ( id ); }; exports . create = function ( entity ) { return dao . insert ( entity ); }; exports . update = function ( entity ) { return dao . update ( entity ); }; exports . delete = function ( id ) { dao . remove ( id ); }; RESTful Service Then create a Books.js service file under the folder service Replace the content with the following code: var rs = require ( 'http/v4/rs' ); var dao = require ( 'babylon_project/dao/Books' ); var response = require ( 'http/v4/response' ); // HTTP 200 var sendResponseOk = function ( entity ) { sendResponse ( 200 , entity ); }; // HTTP 201 var sendResponseCreated = function ( entity ) { sendResponse ( 201 , entity ); }; // HTTP 200 var sendResponseNoContent = function () { sendResponse ( 204 ); }; // HTTP 400 var sendResponseBadRequest = function ( message ) { sendResponse ( 404 , { 'code' : 400 , 'message' : message }); }; // HTTP 404 var sendResponseNotFound = function ( message ) { sendResponse ( 404 , { 'code' : 404 , 'message' : message }); }; // Generic var sendResponse = function ( status , body ) { response . setContentType ( 'application/json' ); response . setStatus ( status ); if ( body ) { response . println ( JSON . stringify ( body )); } }; rs . service () . resource ( '' ) . get ( function () { var entities = dao . list (); sendResponseOk ( entities ); }) . resource ( '{id}' ) . get ( function ( ctx ) { var id = ctx . pathParameters . id ; var entity = dao . get ( id ); if ( entity ) { sendResponseOk ( entity ); } else { sendResponseNotFound ( 'Books not found' ); } }) . resource ( '' ) . post ( function ( ctx , request , response ) { var entity = request . getJSON (); entity . id = dao . create ( entity ); response . setHeader ( 'Content-Location' , '/services/v4/js/babylon_project/service/Books.js/' + entity . id ); sendResponseCreated ( entity ); }) . resource ( '{id}' ) . put ( function ( ctx , request ) { var entity = request . getJSON (); entity . id = ctx . pathParameters . id ; dao . update ( entity ); sendResponseOk ( entity ); }) . resource ( '{id}' ) . delete ( function ( ctx ) { var id = ctx . pathParameters . id ; var entity = dao . get ( id ); if ( entity ) { dao . delete ( id ); sendResponseNoContent (); } else { sendResponseNotFound ( 'Books not found' ); } }) . execute (); User Interface Then create a index.html web page under the folder view Replace the content with the following code: <!DOCTYPE html> < html lang = \"en\" ng-app = \"page\" > < head > < meta charset = \"utf-8\" > < meta http-equiv = \"X-UA-Compatible\" content = \"IE=edge\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < meta name = \"description\" content = \"\" > < meta name = \"author\" content = \"\" > < link type = \"text/css\" rel = \"stylesheet\" href = \"/services/v4/core/theme/bootstrap.min.css\" > < link type = \"text/css\" rel = \"stylesheet\" href = \"/services/v4/web/resources/font-awesome-4.7.0/css/font-awesome.min.css\" > < link type = \"image/png\" rel = \"shortcut icon\" href = \"/services/v4/web/resources/images/favicon.png\" /> </ head > < body ng-controller = \"PageController\" > < div class = \"page-header\" > < h1 > Manage Books </ h1 > </ div > < div class = \"container\" > < button type = \"button\" ng-click = \"openNewDialog()\" class = \"btn btn-lg btn-primary pull-right\" > New </ button > < table class = \"table product-table\" > < thead > < tr > < th > # </ th > < th class = \"text-capitalize\" > id </ th > < th class = \"text-capitalize\" > isbn </ th > < th class = \"text-capitalize\" > title </ th > < th class = \"text-capitalize\" > publisher </ th > < th class = \"text-capitalize\" > date </ th > < th class = \"text-capitalize\" > price </ th > < th ></ th > </ tr > </ thead > < tbody > < tr ng-repeat = \"next in data\" > < td > {{$index + 1}} </ td > < td > {{next.id}} </ td > < td > {{next.isbn}} </ td > < td > {{next.title}} </ td > < td > {{next.publisher}} </ td > < td > {{next.date}} </ td > < td > {{next.price}} </ td > < td > < i class = \"close fa fa-2x fa-remove\" ng-click = \"openDeleteDialog(next)\" ></ i > < i class = \"close fa fa-2x fa-pencil\" ng-click = \"openEditDialog(next)\" style = \"margin-right: 0.5em\" ></ i > </ td > </ tr > </ tbody > </ table > </ div > < div class = \"modal fade\" id = \"entityModal\" tabindex = \"-1\" role = \"dialog\" aria-hidden = \"true\" > < div class = \"modal-dialog\" role = \"document\" > < div class = \"modal-content\" > < div class = \"modal-header\" > < h3 ng-show = \"actionType === 'new'\" class = \"modal-title\" id = \"exampleModalLabel\" > Create entity </ h3 > < h3 ng-show = \"actionType === 'update'\" class = \"modal-title\" id = \"exampleModalLabel\" > Update entity </ h3 > < h3 ng-show = \"actionType === 'delete'\" class = \"modal-title\" id = \"exampleModalLabel\" > Delete entity </ h3 > < button type = \"button\" class = \"close\" data-dismiss = \"modal\" aria-label = \"Close\" > < span aria-hidden = \"true\" > &times; </ span > </ button > </ div > < div class = \"modal-body\" > < form ng-hide = \"actionType === 'delete'\" > < div class = \"form-group\" > < label > ISBN </ label > < input type = \"text\" class = \"form-control\" placeholder = \"Enter isbn\" ng-model = \"entity.isbn\" > </ div > < div class = \"form-group\" > < label > Title </ label > < input type = \"text\" class = \"form-control\" placeholder = \"Enter title\" ng-model = \"entity.title\" > </ div > < div class = \"form-group\" > < label > Publisher </ label > < input type = \"text\" class = \"form-control\" placeholder = \"Enter publisher\" ng-model = \"entity.publisher\" > </ div > < div class = \"form-group\" > < label > Date </ label > < input type = \"date\" class = \"form-control\" placeholder = \"Enter date\" ng-model = \"entity.date\" > </ div > < div class = \"form-group\" > < label > price </ label > < input type = \"number\" class = \"form-control\" placeholder = \"Enter price\" ng-model = \"entity.price\" > </ div > </ form > < div ng-show = \"actionType === 'delete'\" > You are going to delete < b > Books </ b > with < b > id = {{entity.id}} </ b > . </ div > </ div > < div class = \"modal-footer\" > < button type = \"button\" class = \"btn btn-primary\" ng-show = \"actionType === 'new'\" ng-click = \"create()\" > Save </ button > < button type = \"button\" class = \"btn btn-primary\" ng-show = \"actionType === 'update'\" ng-click = \"update()\" > Update </ button > < button type = \"button\" class = \"btn btn-primary\" ng-show = \"actionType === 'delete'\" ng-click = \"delete()\" > Delete </ button > < button type = \"button\" class = \"btn btn-danger\" data-dismiss = \"modal\" > Close </ button > </ div > </ div > </ div > </ div > < script type = \"text/javascript\" src = \"/services/v4/web/resources/jquery/2.0.3/jquery.min.js\" ></ script > < script type = \"text/javascript\" src = \"/services/v4/web/resources/bootstrap/3.3.7/bootstrap.min.js\" async ></ script > < script type = \"text/javascript\" src = \"/services/v4/web/resources/angular/1.4.7/angular.min.js\" ></ script > < script type = \"text/javascript\" src = \"/services/v4/web/resources/angular/1.4.7/angular-resource.min.js\" ></ script > < script type = \"text/javascript\" src = \"controller.js\" ></ script > </ body > </ html > Create the controller file as controller.js under the same view folder next to the index.html Replace the content with the following code: angular . module ( 'page' , []); angular . module ( 'page' ). controller ( 'PageController' , function ( $scope , $http ) { var api = '/services/v4/js/babylon_project/service/Books.js' ; function load () { $http . get ( api ) . success ( function ( data ) { $scope . data = data ; }); } load (); $scope . openNewDialog = function () { $scope . actionType = 'new' ; $scope . entity = {}; toggleEntityModal (); }; $scope . openEditDialog = function ( entity ) { $scope . actionType = 'update' ; $scope . entity = entity ; toggleEntityModal (); }; $scope . openDeleteDialog = function ( entity ) { $scope . actionType = 'delete' ; $scope . entity = entity ; toggleEntityModal (); }; $scope . close = function () { load (); toggleEntityModal (); }; $scope . create = function () { $http . post ( api , JSON . stringify ( $scope . entity )) . success ( function ( data ) { load (); toggleEntityModal (); }). error ( function ( data ) { alert ( JSON . stringify ( data )); }); }; $scope . update = function () { $http . put ( api + '/' + $scope . entity . id , JSON . stringify ( $scope . entity )) . success ( function ( data ) { load (); toggleEntityModal (); }). error ( function ( data ) { alert ( JSON . stringify ( data )); }) }; $scope . delete = function () { $http . delete ( api + '/' + $scope . entity . id ) . success ( function ( data ) { load (); toggleEntityModal (); }). error ( function ( data ) { alert ( JSON . stringify ( data )); }); }; function toggleEntityModal () { $ ( '#entityModal' ). modal ( 'toggle' ); } }); Publish and Preview Publish the project Select the index.html in the Workspace view In the Preview window you should see the web page for books management. Try to enter a few book descriptions to test how it works. For more information, see the API documentation.","title":"Bookstore Application"},{"location":"complex/bookstore/#bookstore-application","text":"This sample shows how to create a simple web application for managing a single entity called Books . It contains a database table definition, a RESTful service and a web page for managing the instances via user interface.","title":"Bookstore Application"},{"location":"complex/bookstore/#steps","text":"","title":"Steps"},{"location":"complex/bookstore/#project","text":"Create a project babylon_project","title":"Project"},{"location":"complex/bookstore/#database-descriptor","text":"Then create a database table description named BABYLON_BOOKS.table under the folder data Replace the service code with the following content: { \"name\" : \"BABYLON_BOOKS\" , \"type\" : \"TABLE\" , \"columns\" : [ { \"name\" : \"BOOK_ID\" , \"type\" : \"INTEGER\" , \"length\" : \"0\" , \"primaryKey\" : \"true\" , \"identity\" : \"true\" , \"precision\" : \"\" , \"scale\" : \"\" }, { \"name\" : \"BOOK_ISBN\" , \"type\" : \"CHAR\" , \"length\" : \"13\" , \"primaryKey\" : \"false\" , \"identity\" : \"false\" , \"precision\" : \"\" , \"scale\" : \"\" }, { \"name\" : \"BOOK_TITLE\" , \"type\" : \"VARCHAR\" , \"length\" : \"120\" , \"primaryKey\" : \"false\" , \"identity\" : \"false\" , \"precision\" : \"\" , \"scale\" : \"\" }, { \"name\" : \"BOOK_PUBLISHER\" , \"type\" : \"VARCHAR\" , \"length\" : \"120\" , \"primaryKey\" : \"false\" , \"identity\" : \"false\" , \"precision\" : \"\" , \"scale\" : \"\" }, { \"name\" : \"BOOK_DATE\" , \"type\" : \"DATE\" , \"length\" : \"20\" , \"primaryKey\" : \"false\" , \"identity\" : \"false\" , \"precision\" : \"\" , \"scale\" : \"\" }, { \"name\" : \"BOOK_PRICE\" , \"type\" : \"DOUBLE\" , \"length\" : \"20\" , \"primaryKey\" : \"false\" , \"identity\" : \"false\" , \"precision\" : \"\" , \"scale\" : \"\" } ], \"dependencies\" : [] }","title":"Database Descriptor"},{"location":"complex/bookstore/#data-access-object","text":"Create a JavaScript service named Books.js under the folder dao . Replace the service code with the following content: var daoApi = require ( 'db/v4/dao' ); var dao = daoApi . create ({ 'table' : 'BABYLON_BOOKS' , 'properties' : [ { 'name' : 'id' , 'column' : 'BOOK_ID' , 'type' : 'INTEGER' , 'id' : true , 'required' : true }, { 'name' : 'isbn' , 'column' : 'BOOK_ISBN' , 'type' : 'CHAR' , 'id' : false , 'required' : false }, { 'name' : 'title' , 'column' : 'BOOK_TITLE' , 'type' : 'VARCHAR' , 'id' : false , 'required' : false }, { 'name' : 'publisher' , 'column' : 'BOOK_PUBLISHER' , 'type' : 'VARCHAR' , 'id' : false , 'required' : false }, { 'name' : 'date' , 'column' : 'BOOK_DATE' , 'type' : 'DATE' , 'id' : false , 'required' : true }, { 'name' : 'price' , 'column' : 'BOOK_PRICE' , 'type' : 'DOUBLE' , 'id' : false , 'required' : true }] }); exports . list = function ( settings ) { return dao . list ( settings ); }; exports . get = function ( id ) { return dao . find ( id ); }; exports . create = function ( entity ) { return dao . insert ( entity ); }; exports . update = function ( entity ) { return dao . update ( entity ); }; exports . delete = function ( id ) { dao . remove ( id ); };","title":"Data Access Object"},{"location":"complex/bookstore/#restful-service","text":"Then create a Books.js service file under the folder service Replace the content with the following code: var rs = require ( 'http/v4/rs' ); var dao = require ( 'babylon_project/dao/Books' ); var response = require ( 'http/v4/response' ); // HTTP 200 var sendResponseOk = function ( entity ) { sendResponse ( 200 , entity ); }; // HTTP 201 var sendResponseCreated = function ( entity ) { sendResponse ( 201 , entity ); }; // HTTP 200 var sendResponseNoContent = function () { sendResponse ( 204 ); }; // HTTP 400 var sendResponseBadRequest = function ( message ) { sendResponse ( 404 , { 'code' : 400 , 'message' : message }); }; // HTTP 404 var sendResponseNotFound = function ( message ) { sendResponse ( 404 , { 'code' : 404 , 'message' : message }); }; // Generic var sendResponse = function ( status , body ) { response . setContentType ( 'application/json' ); response . setStatus ( status ); if ( body ) { response . println ( JSON . stringify ( body )); } }; rs . service () . resource ( '' ) . get ( function () { var entities = dao . list (); sendResponseOk ( entities ); }) . resource ( '{id}' ) . get ( function ( ctx ) { var id = ctx . pathParameters . id ; var entity = dao . get ( id ); if ( entity ) { sendResponseOk ( entity ); } else { sendResponseNotFound ( 'Books not found' ); } }) . resource ( '' ) . post ( function ( ctx , request , response ) { var entity = request . getJSON (); entity . id = dao . create ( entity ); response . setHeader ( 'Content-Location' , '/services/v4/js/babylon_project/service/Books.js/' + entity . id ); sendResponseCreated ( entity ); }) . resource ( '{id}' ) . put ( function ( ctx , request ) { var entity = request . getJSON (); entity . id = ctx . pathParameters . id ; dao . update ( entity ); sendResponseOk ( entity ); }) . resource ( '{id}' ) . delete ( function ( ctx ) { var id = ctx . pathParameters . id ; var entity = dao . get ( id ); if ( entity ) { dao . delete ( id ); sendResponseNoContent (); } else { sendResponseNotFound ( 'Books not found' ); } }) . execute ();","title":"RESTful Service"},{"location":"complex/bookstore/#user-interface","text":"Then create a index.html web page under the folder view Replace the content with the following code: <!DOCTYPE html> < html lang = \"en\" ng-app = \"page\" > < head > < meta charset = \"utf-8\" > < meta http-equiv = \"X-UA-Compatible\" content = \"IE=edge\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < meta name = \"description\" content = \"\" > < meta name = \"author\" content = \"\" > < link type = \"text/css\" rel = \"stylesheet\" href = \"/services/v4/core/theme/bootstrap.min.css\" > < link type = \"text/css\" rel = \"stylesheet\" href = \"/services/v4/web/resources/font-awesome-4.7.0/css/font-awesome.min.css\" > < link type = \"image/png\" rel = \"shortcut icon\" href = \"/services/v4/web/resources/images/favicon.png\" /> </ head > < body ng-controller = \"PageController\" > < div class = \"page-header\" > < h1 > Manage Books </ h1 > </ div > < div class = \"container\" > < button type = \"button\" ng-click = \"openNewDialog()\" class = \"btn btn-lg btn-primary pull-right\" > New </ button > < table class = \"table product-table\" > < thead > < tr > < th > # </ th > < th class = \"text-capitalize\" > id </ th > < th class = \"text-capitalize\" > isbn </ th > < th class = \"text-capitalize\" > title </ th > < th class = \"text-capitalize\" > publisher </ th > < th class = \"text-capitalize\" > date </ th > < th class = \"text-capitalize\" > price </ th > < th ></ th > </ tr > </ thead > < tbody > < tr ng-repeat = \"next in data\" > < td > {{$index + 1}} </ td > < td > {{next.id}} </ td > < td > {{next.isbn}} </ td > < td > {{next.title}} </ td > < td > {{next.publisher}} </ td > < td > {{next.date}} </ td > < td > {{next.price}} </ td > < td > < i class = \"close fa fa-2x fa-remove\" ng-click = \"openDeleteDialog(next)\" ></ i > < i class = \"close fa fa-2x fa-pencil\" ng-click = \"openEditDialog(next)\" style = \"margin-right: 0.5em\" ></ i > </ td > </ tr > </ tbody > </ table > </ div > < div class = \"modal fade\" id = \"entityModal\" tabindex = \"-1\" role = \"dialog\" aria-hidden = \"true\" > < div class = \"modal-dialog\" role = \"document\" > < div class = \"modal-content\" > < div class = \"modal-header\" > < h3 ng-show = \"actionType === 'new'\" class = \"modal-title\" id = \"exampleModalLabel\" > Create entity </ h3 > < h3 ng-show = \"actionType === 'update'\" class = \"modal-title\" id = \"exampleModalLabel\" > Update entity </ h3 > < h3 ng-show = \"actionType === 'delete'\" class = \"modal-title\" id = \"exampleModalLabel\" > Delete entity </ h3 > < button type = \"button\" class = \"close\" data-dismiss = \"modal\" aria-label = \"Close\" > < span aria-hidden = \"true\" > &times; </ span > </ button > </ div > < div class = \"modal-body\" > < form ng-hide = \"actionType === 'delete'\" > < div class = \"form-group\" > < label > ISBN </ label > < input type = \"text\" class = \"form-control\" placeholder = \"Enter isbn\" ng-model = \"entity.isbn\" > </ div > < div class = \"form-group\" > < label > Title </ label > < input type = \"text\" class = \"form-control\" placeholder = \"Enter title\" ng-model = \"entity.title\" > </ div > < div class = \"form-group\" > < label > Publisher </ label > < input type = \"text\" class = \"form-control\" placeholder = \"Enter publisher\" ng-model = \"entity.publisher\" > </ div > < div class = \"form-group\" > < label > Date </ label > < input type = \"date\" class = \"form-control\" placeholder = \"Enter date\" ng-model = \"entity.date\" > </ div > < div class = \"form-group\" > < label > price </ label > < input type = \"number\" class = \"form-control\" placeholder = \"Enter price\" ng-model = \"entity.price\" > </ div > </ form > < div ng-show = \"actionType === 'delete'\" > You are going to delete < b > Books </ b > with < b > id = {{entity.id}} </ b > . </ div > </ div > < div class = \"modal-footer\" > < button type = \"button\" class = \"btn btn-primary\" ng-show = \"actionType === 'new'\" ng-click = \"create()\" > Save </ button > < button type = \"button\" class = \"btn btn-primary\" ng-show = \"actionType === 'update'\" ng-click = \"update()\" > Update </ button > < button type = \"button\" class = \"btn btn-primary\" ng-show = \"actionType === 'delete'\" ng-click = \"delete()\" > Delete </ button > < button type = \"button\" class = \"btn btn-danger\" data-dismiss = \"modal\" > Close </ button > </ div > </ div > </ div > </ div > < script type = \"text/javascript\" src = \"/services/v4/web/resources/jquery/2.0.3/jquery.min.js\" ></ script > < script type = \"text/javascript\" src = \"/services/v4/web/resources/bootstrap/3.3.7/bootstrap.min.js\" async ></ script > < script type = \"text/javascript\" src = \"/services/v4/web/resources/angular/1.4.7/angular.min.js\" ></ script > < script type = \"text/javascript\" src = \"/services/v4/web/resources/angular/1.4.7/angular-resource.min.js\" ></ script > < script type = \"text/javascript\" src = \"controller.js\" ></ script > </ body > </ html > Create the controller file as controller.js under the same view folder next to the index.html Replace the content with the following code: angular . module ( 'page' , []); angular . module ( 'page' ). controller ( 'PageController' , function ( $scope , $http ) { var api = '/services/v4/js/babylon_project/service/Books.js' ; function load () { $http . get ( api ) . success ( function ( data ) { $scope . data = data ; }); } load (); $scope . openNewDialog = function () { $scope . actionType = 'new' ; $scope . entity = {}; toggleEntityModal (); }; $scope . openEditDialog = function ( entity ) { $scope . actionType = 'update' ; $scope . entity = entity ; toggleEntityModal (); }; $scope . openDeleteDialog = function ( entity ) { $scope . actionType = 'delete' ; $scope . entity = entity ; toggleEntityModal (); }; $scope . close = function () { load (); toggleEntityModal (); }; $scope . create = function () { $http . post ( api , JSON . stringify ( $scope . entity )) . success ( function ( data ) { load (); toggleEntityModal (); }). error ( function ( data ) { alert ( JSON . stringify ( data )); }); }; $scope . update = function () { $http . put ( api + '/' + $scope . entity . id , JSON . stringify ( $scope . entity )) . success ( function ( data ) { load (); toggleEntityModal (); }). error ( function ( data ) { alert ( JSON . stringify ( data )); }) }; $scope . delete = function () { $http . delete ( api + '/' + $scope . entity . id ) . success ( function ( data ) { load (); toggleEntityModal (); }). error ( function ( data ) { alert ( JSON . stringify ( data )); }); }; function toggleEntityModal () { $ ( '#entityModal' ). modal ( 'toggle' ); } });","title":"User Interface"},{"location":"complex/bookstore/#publish-and-preview","text":"Publish the project Select the index.html in the Workspace view In the Preview window you should see the web page for books management. Try to enter a few book descriptions to test how it works. For more information, see the API documentation.","title":"Publish and Preview"},{"location":"complex/embedded/","text":"Embedded Dirigible Sample class showing how to embed Dirigible into an arbitrary Java application. Steps Create a Java project Create a folder \"content\" Create sub-folder \"project1\" under the \"content\" folder Create a file named \"hello1.js\" under the \"project1\" folder with the following content console . log ( 'Hello World!' ); Create a Java class named \"MyApp\" with the following content: import java.io.IOException ; import org.eclipse.dirigible.commons.api.context.ContextException ; import org.eclipse.dirigible.commons.api.scripting.ScriptingException ; import org.eclipse.dirigible.runtime.core.embed.EmbeddedDirigible ; public class MyApp { public static void main ( String [] args ) { // create a Dirigible instance EmbeddedDirigible dirigible = new EmbeddedDirigible (); try { // initialize the Dirigible instance dirigible . initialize (); // import the content under the specified folder to the Dirigible's registry dirigible . load ( \"./content\" ); // execute a given service module dirigible . executeJavaScript ( \"project1/hello1.js\" ); // or more generic dirigible.execute(dirigible.ENGINE_TYPE_JAVASCRIPT, \"project1/hello1.js\"); // or richer dirigible.execute(dirigible.ENGINE_TYPE_JAVASCRIPT, \"project1/hello1.js\", context, request, response); } catch ( IOException | ScriptingException | ContextException e ) { e . printStackTrace (); } finally { // destroy the Dirigible instance dirigible . destroy (); System . exit ( 0 ); } } } Run it as a Java application You have to be able to find the following log record in the system output [main] INFO org.eclipse.dirigible.api.v3.core.Console - Hello World!","title":"Embedded Dirigible"},{"location":"complex/embedded/#embedded-dirigible","text":"Sample class showing how to embed Dirigible into an arbitrary Java application.","title":"Embedded Dirigible"},{"location":"complex/embedded/#steps","text":"Create a Java project Create a folder \"content\" Create sub-folder \"project1\" under the \"content\" folder Create a file named \"hello1.js\" under the \"project1\" folder with the following content console . log ( 'Hello World!' ); Create a Java class named \"MyApp\" with the following content: import java.io.IOException ; import org.eclipse.dirigible.commons.api.context.ContextException ; import org.eclipse.dirigible.commons.api.scripting.ScriptingException ; import org.eclipse.dirigible.runtime.core.embed.EmbeddedDirigible ; public class MyApp { public static void main ( String [] args ) { // create a Dirigible instance EmbeddedDirigible dirigible = new EmbeddedDirigible (); try { // initialize the Dirigible instance dirigible . initialize (); // import the content under the specified folder to the Dirigible's registry dirigible . load ( \"./content\" ); // execute a given service module dirigible . executeJavaScript ( \"project1/hello1.js\" ); // or more generic dirigible.execute(dirigible.ENGINE_TYPE_JAVASCRIPT, \"project1/hello1.js\"); // or richer dirigible.execute(dirigible.ENGINE_TYPE_JAVASCRIPT, \"project1/hello1.js\", context, request, response); } catch ( IOException | ScriptingException | ContextException e ) { e . printStackTrace (); } finally { // destroy the Dirigible instance dirigible . destroy (); System . exit ( 0 ); } } } Run it as a Java application You have to be able to find the following log record in the system output [main] INFO org.eclipse.dirigible.api.v3.core.Console - Hello World!","title":"Steps"},{"location":"complex/file-upload/","text":"File Upload Steps Create a project file_upload_project Then create a JavaScript service named my_file_upload.js Replace the service code with the following content: File Upload Handler var upload = require ( 'http/v4/upload' ); var request = require ( 'http/v4/request' ); var response = require ( 'http/v4/response' ); if ( request . getMethod () === \"POST\" ) { if ( upload . isMultipartContent ()) { var fileItems = upload . parseRequest (); for ( i = 0 ; i < fileItems . size (); i ++ ) { var fileItem = fileItems . get ( i ); if ( ! fileItem . isFormField ()) { response . println ( \"File Name: \" + fileItem . getName ()); response . println ( \"File Bytes (as text): \" + String . fromCharCode . apply ( null , fileItem . getBytes ())); } else { response . println ( \"Field Name: \" + fileItem . getFieldName ()); response . println ( \"Field Text: \" + fileItem . getText ()); } } } else { response . println ( \"The request's content must be 'multipart'\" ); } } else if ( request . getMethod () === \"GET\" ) { response . println ( \"Use POST request.\" ); } response . flush (); response . close (); Then create a HTML5 page named my_upload.html Replace the content with the following HTML code: File Upload Frontend < html > < body > < form action = \"/services/v4/js/file_upload_project/my_file_upload.js\" method = \"post\" enctype = \"multipart/form-data\" > < label for = \"file\" > Filename: </ label > < input type = \"file\" name = \"file\" id = \"file\" multiple > < br > < input type = \"submit\" name = \"submit\" value = \"Submit\" > </ form > </ body > </ html > Publish the project Select the my_upload.html file in the Workspace view and try to test by uploading a file in the Preview For more information, see the API documentation.","title":"File Upload"},{"location":"complex/file-upload/#file-upload","text":"","title":"File Upload"},{"location":"complex/file-upload/#steps","text":"Create a project file_upload_project Then create a JavaScript service named my_file_upload.js Replace the service code with the following content:","title":"Steps"},{"location":"complex/file-upload/#file-upload-handler","text":"var upload = require ( 'http/v4/upload' ); var request = require ( 'http/v4/request' ); var response = require ( 'http/v4/response' ); if ( request . getMethod () === \"POST\" ) { if ( upload . isMultipartContent ()) { var fileItems = upload . parseRequest (); for ( i = 0 ; i < fileItems . size (); i ++ ) { var fileItem = fileItems . get ( i ); if ( ! fileItem . isFormField ()) { response . println ( \"File Name: \" + fileItem . getName ()); response . println ( \"File Bytes (as text): \" + String . fromCharCode . apply ( null , fileItem . getBytes ())); } else { response . println ( \"Field Name: \" + fileItem . getFieldName ()); response . println ( \"Field Text: \" + fileItem . getText ()); } } } else { response . println ( \"The request's content must be 'multipart'\" ); } } else if ( request . getMethod () === \"GET\" ) { response . println ( \"Use POST request.\" ); } response . flush (); response . close (); Then create a HTML5 page named my_upload.html Replace the content with the following HTML code:","title":"File Upload Handler"},{"location":"complex/file-upload/#file-upload-frontend","text":"< html > < body > < form action = \"/services/v4/js/file_upload_project/my_file_upload.js\" method = \"post\" enctype = \"multipart/form-data\" > < label for = \"file\" > Filename: </ label > < input type = \"file\" name = \"file\" id = \"file\" multiple > < br > < input type = \"submit\" name = \"submit\" value = \"Submit\" > </ form > </ body > </ html > Publish the project Select the my_upload.html file in the Workspace view and try to test by uploading a file in the Preview For more information, see the API documentation.","title":"File Upload Frontend"},{"location":"complex/job-console/","text":"Scheduled Job Steps Create a project job_console_project Then create a JavaScript service named my_job_handler.js Replace the service code with the following content: console . log ( \"Hello from My Job!\" ); Then create a Scheduled Job named my_job.job Replace the content with the following JSON code: { \"expression\" : \"0/10 * * * * ?\" , \"handler\" : \"job_console_project/my_job_handler.js\" , \"description\" : \"My Job\" } Publish the project After 10s in the Console view you should see the following lines: [2018-05-14T12:05:00.061Z] [INFO] Hello from My Job! Note: the log messages in the Console view are in a reverse order - the newest are on top For more information, see the API documentation.","title":"Scheduled Job"},{"location":"complex/job-console/#scheduled-job","text":"","title":"Scheduled Job"},{"location":"complex/job-console/#steps","text":"Create a project job_console_project Then create a JavaScript service named my_job_handler.js Replace the service code with the following content: console . log ( \"Hello from My Job!\" ); Then create a Scheduled Job named my_job.job Replace the content with the following JSON code: { \"expression\" : \"0/10 * * * * ?\" , \"handler\" : \"job_console_project/my_job_handler.js\" , \"description\" : \"My Job\" } Publish the project After 10s in the Console view you should see the following lines: [2018-05-14T12:05:00.061Z] [INFO] Hello from My Job! Note: the log messages in the Console view are in a reverse order - the newest are on top For more information, see the API documentation.","title":"Steps"},{"location":"complex/kafka/","text":"Kafka Producer and Counsmer Prerequisites Run a local Kafka server following the steps (1 and 2) from here: https://kafka.apache.org/quickstart Steps Create a project kafka_project Then create a JavaScript service named my_kafka_handler.js Replace the service code with the following content: Handler exports . onMessage = function ( message ) { console . log ( \"Hello from My Kafka Listener! Message: \" + message ); }; exports . onError = function ( error ) { console . error ( \"Error from My Kafka Listener! Error: \" + error ); }; Then create a Kafka Consumer named my_kafka_consumer.js Replace the file content with the following code: var consumer = require ( \"kafka/consumer\" ); consumer . topic ( \"topic1\" , \"{}\" ). startListening ( \"kafka_project/my_kafka_handler\" , 1000 ); Then create another back-end service which will play the role of a trigger my_kafka_producer.js Replace the trigger content with the following code: var producer = require ( \"kafka/producer\" ); producer . topic ( \"topic1\" , \"{}\" ). send ( \"key1\" , \"value1\" ); Publish the project Select the my_kafka_producer.js file in the Workspace view to be able to trigger the invocation of this service via the Preview view In the Console view you should see the following lines: 2020-11-01 23:33:54.272 [INFO ] [Thread-275] o.e.dirigible.api.v3.core.Console - Hello from My Kafka Listener! Message: {\"topic\":\"topic1\",\"partition\":0,\"offset\":29,\"timestamp\":1604266434251,\"timestampType\":\"CREATE_TIME\",\"serializedKeySize\":4,\"serializedValueSize\":6,\"headers\":{\"headers\":[],\"isReadOnly\":false},\"key\":\"key1\",\"value\":\"value1\",\"leaderEpoch\":{\"value\":0}} Note: the log messages in the Console view are in a reverse order - the newest are on top For more information, see the API documentation.","title":"Kafka Producer and Consumer"},{"location":"complex/kafka/#kafka-producer-and-counsmer","text":"","title":"Kafka Producer and Counsmer"},{"location":"complex/kafka/#prerequisites","text":"Run a local Kafka server following the steps (1 and 2) from here: https://kafka.apache.org/quickstart","title":"Prerequisites"},{"location":"complex/kafka/#steps","text":"Create a project kafka_project Then create a JavaScript service named my_kafka_handler.js Replace the service code with the following content:","title":"Steps"},{"location":"complex/kafka/#handler","text":"exports . onMessage = function ( message ) { console . log ( \"Hello from My Kafka Listener! Message: \" + message ); }; exports . onError = function ( error ) { console . error ( \"Error from My Kafka Listener! Error: \" + error ); }; Then create a Kafka Consumer named my_kafka_consumer.js Replace the file content with the following code: var consumer = require ( \"kafka/consumer\" ); consumer . topic ( \"topic1\" , \"{}\" ). startListening ( \"kafka_project/my_kafka_handler\" , 1000 ); Then create another back-end service which will play the role of a trigger my_kafka_producer.js Replace the trigger content with the following code: var producer = require ( \"kafka/producer\" ); producer . topic ( \"topic1\" , \"{}\" ). send ( \"key1\" , \"value1\" ); Publish the project Select the my_kafka_producer.js file in the Workspace view to be able to trigger the invocation of this service via the Preview view In the Console view you should see the following lines: 2020-11-01 23:33:54.272 [INFO ] [Thread-275] o.e.dirigible.api.v3.core.Console - Hello from My Kafka Listener! Message: {\"topic\":\"topic1\",\"partition\":0,\"offset\":29,\"timestamp\":1604266434251,\"timestampType\":\"CREATE_TIME\",\"serializedKeySize\":4,\"serializedValueSize\":6,\"headers\":{\"headers\":[],\"isReadOnly\":false},\"key\":\"key1\",\"value\":\"value1\",\"leaderEpoch\":{\"value\":0}} Note: the log messages in the Console view are in a reverse order - the newest are on top For more information, see the API documentation.","title":"Handler"},{"location":"complex/listener-queue/","text":"Listener of a Queue Steps Create a project message_queue_listener_project Then create a JavaScript service named my_listener_handler.js Replace the service code with the following content: Handler exports . onMessage = function ( message ) { console . log ( \"Hello from My Listener! Message: \" + message ); }; exports . onError = function ( error ) { console . error ( \"Error from My Listener! Error: \" + error ); }; Then create a Message Listener named my_listener.listener Replace the file content with the following JSON code: { \"name\" : \"message_queue_listener_project/my_queue\" , \"type\" : \"Q\" , \"handler\" : \"message_queue_listener_project/my_listener_handler.js\" , \"description\" : \"My Listener\" } Then create another back-end service which will play the role of a trigger my_trigger.js Replace the trigger content with the following code: var producer = require ( 'messaging/v3/producer' ); var message = \"*** I am a message created at: \" + new Date () + \" ***\" ; producer . queue ( \"message_queue_listener_project/my_queue\" ). send ( message ); console . log ( \"Hello from My Trigger! Message: \" + message ); Publish the project Select the my_trigger.js file in the Workspace view to be able to trigger the invocation of this service via the Preview view In the Console view you should see the following lines: [2018-05-14T11:57:13.197Z] [INFO] Hello from My Listener! Message: I am a message created at: Mon May 14 2018 14:57:13 GMT+0300 (EEST) [2018-05-14T11:57:13.174Z] [INFO] Hello from My Trigger! Message: I am a message created at: Mon May 14 2018 14:57:13 GMT+0300 (EEST) Note: the log messages in the Console view are in a reverse order - the newest are on top For more information, see the API documentation.","title":"Listener of a Queue"},{"location":"complex/listener-queue/#listener-of-a-queue","text":"","title":"Listener of a Queue"},{"location":"complex/listener-queue/#steps","text":"Create a project message_queue_listener_project Then create a JavaScript service named my_listener_handler.js Replace the service code with the following content:","title":"Steps"},{"location":"complex/listener-queue/#handler","text":"exports . onMessage = function ( message ) { console . log ( \"Hello from My Listener! Message: \" + message ); }; exports . onError = function ( error ) { console . error ( \"Error from My Listener! Error: \" + error ); }; Then create a Message Listener named my_listener.listener Replace the file content with the following JSON code: { \"name\" : \"message_queue_listener_project/my_queue\" , \"type\" : \"Q\" , \"handler\" : \"message_queue_listener_project/my_listener_handler.js\" , \"description\" : \"My Listener\" } Then create another back-end service which will play the role of a trigger my_trigger.js Replace the trigger content with the following code: var producer = require ( 'messaging/v3/producer' ); var message = \"*** I am a message created at: \" + new Date () + \" ***\" ; producer . queue ( \"message_queue_listener_project/my_queue\" ). send ( message ); console . log ( \"Hello from My Trigger! Message: \" + message ); Publish the project Select the my_trigger.js file in the Workspace view to be able to trigger the invocation of this service via the Preview view In the Console view you should see the following lines: [2018-05-14T11:57:13.197Z] [INFO] Hello from My Listener! Message: I am a message created at: Mon May 14 2018 14:57:13 GMT+0300 (EEST) [2018-05-14T11:57:13.174Z] [INFO] Hello from My Trigger! Message: I am a message created at: Mon May 14 2018 14:57:13 GMT+0300 (EEST) Note: the log messages in the Console view are in a reverse order - the newest are on top For more information, see the API documentation.","title":"Handler"},{"location":"complex/master-repository/","text":"Master Repository This sample will guide you how to run an Eclipse Dirigible instance with a pre-defined content. This content is bundled in a Zip file with a specific Repository structure. You can easily get one by exporting the Repository from an existing instance via the Snapshot view (in the Repository perspective). A sample content file with a single project with a single service you can find at: repository-snapshot-20180820034353.zip . Steps Copy the above zip file in a directory e.g. /home/dirigible/master_sample Download (or build and copy) to the same directory the standalone executable dirigible-desktop-all-XXX.jar Set the environment variables: export DIRIGIBLE_MASTER_REPOSITORY_PROVIDER=zip export DIRIGIBLE_MASTER_REPOSITORY_ZIP_LOCATION=/home/dirigible/master_sample/repository-snapshot-20180820034353.zip Run with: java -jar dirigible-desktop-all-XXX.jar Enter with the nickname: dirigible You should have already available project \"my_project\" in your workspace, with a service \"hello.js\" The service is even published already, so you can directly execute it by accessing the location: http://localhost:8080/services/v3/js/my_project/hello.js Note: This is the simplest way (from the life-cycle management PoV) to run an Eclipse Dirigible application. For the master repository you can use a Zip file (as it is shown above), File System based Repository located by a Path to its root folder or a Jar file built into or accessible by the default class loader.","title":"Master Repository"},{"location":"complex/master-repository/#master-repository","text":"This sample will guide you how to run an Eclipse Dirigible instance with a pre-defined content. This content is bundled in a Zip file with a specific Repository structure. You can easily get one by exporting the Repository from an existing instance via the Snapshot view (in the Repository perspective). A sample content file with a single project with a single service you can find at: repository-snapshot-20180820034353.zip .","title":"Master Repository"},{"location":"complex/master-repository/#steps","text":"Copy the above zip file in a directory e.g. /home/dirigible/master_sample Download (or build and copy) to the same directory the standalone executable dirigible-desktop-all-XXX.jar Set the environment variables: export DIRIGIBLE_MASTER_REPOSITORY_PROVIDER=zip export DIRIGIBLE_MASTER_REPOSITORY_ZIP_LOCATION=/home/dirigible/master_sample/repository-snapshot-20180820034353.zip Run with: java -jar dirigible-desktop-all-XXX.jar Enter with the nickname: dirigible You should have already available project \"my_project\" in your workspace, with a service \"hello.js\" The service is even published already, so you can directly execute it by accessing the location: http://localhost:8080/services/v3/js/my_project/hello.js Note: This is the simplest way (from the life-cycle management PoV) to run an Eclipse Dirigible application. For the master repository you can use a Zip file (as it is shown above), File System based Repository located by a Path to its root folder or a Jar file built into or accessible by the default class loader.","title":"Steps"},{"location":"complex/process-console/","text":"BPMN Process Steps Create a project bpmn_process_project Then create a JavaScript service named my_delegate.js with the following content: console . info ( \"Hello from the JavaScript Delegate!\" ); var process = require ( 'bpm/v3/process' ); var execution = process . getExecutionContext (); process . setVariable ( execution . getId (), 'variable2' , 'value2' ); try { console . info ( \"variable1: \" + process . getVariable ( execution . getId (), 'variable1' )); console . info ( \"variable2: \" + process . getVariable ( execution . getId (), 'variable2' )); } catch ( e ) { console . error ( e . message ); } Then create a Business Process Model (via the New popup menu) named my_process.bpmn Double-click on this file to open the corresponding BPMN editor. There should be shown on the diagram a Start Event , connected to a MyServiceTask , connected to an End Event . Select the MyServiceTask. In the Properties section below the diagram, find the Class fields property and click on it. In the Class fields dialog find and click on the field handler . Change its value from myproject/mydelegate.js to bpmn_process_project/my_delegate.js and click save. Click on the Save button on the top-left corner of the editor with Name - MyProcess and Key - myprocess Publish the project Then create a JavaScript service named my_trigger.js which will be used to start the just defined process Enter the following code in it: var process = require ( 'bpm/v3/process' ); process . start ( 'myprocess' , { \"variable1\" : \"value1\" }); Select the my_trigger.js file in the Workspace view to be able to trigger the invocation of this service via the Preview view In the Console view you should see the following lines: [2018-05-14T14:25:16.791Z] [DEBUG] Done starting a BPMN process by key: myprocess [2018-05-14T14:25:16.773Z] [INFO] variable2: value2 [2018-05-14T14:25:16.772Z] [INFO] variable1: value1 [2018-05-14T14:25:16.751Z] [INFO] Hello from the JavaScript Delegate! [2018-05-14T14:25:16.585Z] [DEBUG] Starting a BPMN process by key: myprocess Note: the log messages in the Console view are in a reverse order - the newest are on top For more information, see the API documentation.","title":"BPMN Process"},{"location":"complex/process-console/#bpmn-process","text":"","title":"BPMN Process"},{"location":"complex/process-console/#steps","text":"Create a project bpmn_process_project Then create a JavaScript service named my_delegate.js with the following content: console . info ( \"Hello from the JavaScript Delegate!\" ); var process = require ( 'bpm/v3/process' ); var execution = process . getExecutionContext (); process . setVariable ( execution . getId (), 'variable2' , 'value2' ); try { console . info ( \"variable1: \" + process . getVariable ( execution . getId (), 'variable1' )); console . info ( \"variable2: \" + process . getVariable ( execution . getId (), 'variable2' )); } catch ( e ) { console . error ( e . message ); } Then create a Business Process Model (via the New popup menu) named my_process.bpmn Double-click on this file to open the corresponding BPMN editor. There should be shown on the diagram a Start Event , connected to a MyServiceTask , connected to an End Event . Select the MyServiceTask. In the Properties section below the diagram, find the Class fields property and click on it. In the Class fields dialog find and click on the field handler . Change its value from myproject/mydelegate.js to bpmn_process_project/my_delegate.js and click save. Click on the Save button on the top-left corner of the editor with Name - MyProcess and Key - myprocess Publish the project Then create a JavaScript service named my_trigger.js which will be used to start the just defined process Enter the following code in it: var process = require ( 'bpm/v3/process' ); process . start ( 'myprocess' , { \"variable1\" : \"value1\" }); Select the my_trigger.js file in the Workspace view to be able to trigger the invocation of this service via the Preview view In the Console view you should see the following lines: [2018-05-14T14:25:16.791Z] [DEBUG] Done starting a BPMN process by key: myprocess [2018-05-14T14:25:16.773Z] [INFO] variable2: value2 [2018-05-14T14:25:16.772Z] [INFO] variable1: value1 [2018-05-14T14:25:16.751Z] [INFO] Hello from the JavaScript Delegate! [2018-05-14T14:25:16.585Z] [DEBUG] Starting a BPMN process by key: myprocess Note: the log messages in the Console view are in a reverse order - the newest are on top For more information, see the API documentation.","title":"Steps"},{"location":"complex/rbac-for-cms/","text":"RBAC for CMS This sample shows how to enable the Role Based Access Management for the Content Management System in Eclipse Dirigible. Steps Set the environment variable: export DIRIGIBLE_CMS_ROLES_ENABLED=true before staring the Dirigible instance Note: for SAP Cloud Platform Neo use the deploy parameter: -DDIRIGIBLE_CMS_ROLES_ENABLED=true Open Dirigible WebIDE and go to Documents perspective Create sub-folder \"private\" under the \"root\" folder Create sub-folder \"shared\" under the \"root\" folder Upload a text file named \"secret.txt\" under the \"private\" folder with the following content This is a top secret information accessible only by users with the role Operator! Upload a text file named \"billboard.txt\" under the \"shared\" folder with the following content This is a public notice accessible by Everyone. Click on Preview icon next to the files. You should be able to see the content of both of them. Open the Workspace perspective in the WebIDE Create a project named \"cms_permissions\" Create an *.access file via the popup menu New->Access Constraints Open the file with editor Delete the sample record Click New button Fill the form as follows: Path: /private Method: READ Scope: CMIS Roles: Operator Click Save button The content of the file should look like: { \"constraints\": [ { \"path\": \"/private\", \"method\": \"READ\", \"scope\": \"CMIS\", \"roles\": [ \"Operator\" ] } ] } Note: You can inspect that be closing the editor and then use Open With from the popup menu on the same file, but choosing Orion editor option Publish the project manually via the popup menu on the project level (in case the Auto-Publish is disabled) After a while open the Operations perspective and select the Access view You should be able to identify a line similar like this: /cms_permissions/private.access CMIS /private READ Operator Aug 17, 2018 3:33:00 PM guest Open the Preview of the file secret: http://localhost:8080/services/v3/js/ide-documents/api/read/document/preview?path=/private/secret.txt Only the users who has the role Operator should be able to see the content of the file","title":"RBAC for CMS"},{"location":"complex/rbac-for-cms/#rbac-for-cms","text":"This sample shows how to enable the Role Based Access Management for the Content Management System in Eclipse Dirigible.","title":"RBAC for CMS"},{"location":"complex/rbac-for-cms/#steps","text":"Set the environment variable: export DIRIGIBLE_CMS_ROLES_ENABLED=true before staring the Dirigible instance Note: for SAP Cloud Platform Neo use the deploy parameter: -DDIRIGIBLE_CMS_ROLES_ENABLED=true Open Dirigible WebIDE and go to Documents perspective Create sub-folder \"private\" under the \"root\" folder Create sub-folder \"shared\" under the \"root\" folder Upload a text file named \"secret.txt\" under the \"private\" folder with the following content This is a top secret information accessible only by users with the role Operator! Upload a text file named \"billboard.txt\" under the \"shared\" folder with the following content This is a public notice accessible by Everyone. Click on Preview icon next to the files. You should be able to see the content of both of them. Open the Workspace perspective in the WebIDE Create a project named \"cms_permissions\" Create an *.access file via the popup menu New->Access Constraints Open the file with editor Delete the sample record Click New button Fill the form as follows: Path: /private Method: READ Scope: CMIS Roles: Operator Click Save button The content of the file should look like: { \"constraints\": [ { \"path\": \"/private\", \"method\": \"READ\", \"scope\": \"CMIS\", \"roles\": [ \"Operator\" ] } ] } Note: You can inspect that be closing the editor and then use Open With from the popup menu on the same file, but choosing Orion editor option Publish the project manually via the popup menu on the project level (in case the Auto-Publish is disabled) After a while open the Operations perspective and select the Access view You should be able to identify a line similar like this: /cms_permissions/private.access CMIS /private READ Operator Aug 17, 2018 3:33:00 PM guest Open the Preview of the file secret: http://localhost:8080/services/v3/js/ide-documents/api/read/document/preview?path=/private/secret.txt Only the users who has the role Operator should be able to see the content of the file","title":"Steps"},{"location":"complex/shell-command/","text":"Shell Command Steps Create a project shell_command_project Then create a file named my_command.sh Replace the code with the following content: uname -an echo variable1=$variable1 Then create a Command named my_command.command Replace the content with the following JSON code: { \"description\" : \"command description\" , \"contentType\" : \"text/plain\" , \"commands\" :[ { \"os\" : \"mac\" , \"command\" : \"sh shell_command_project/my_command.sh\" }, { \"os\" : \"linux\" , \"command\" : \"sh shell_command_project/my_command.sh\" } ], \"set\" :{ \"variable1\" : \"value1\" }, \"unset\" :[ \"variable2\" ] } Publish the project Select the *.command file in the Workspace explorer and inspect the result in the Preview: Darwin XXXXXXXXXXXXX 17.7.0 Darwin Kernel Version 17.7.0: Thu Jun 21 22:53:14 PDT 2018; root:xnu-4570.71.2~1/RELEASE_X86_64 x86_64 variable1=value1 Note: The working folder is set to the registry/public space under the file-based Repository. You can execute an arbitrary command e.g. even Node, Python, Julia, etc., by using the dirigible projects' content published and available under the registry space. For this case the given framework has to be setup in advance and the entry point executable to be added to the PATH environment variable. The standard output is redirected to the service response. For more information, see the API documentation.","title":"Shell Command"},{"location":"complex/shell-command/#shell-command","text":"","title":"Shell Command"},{"location":"complex/shell-command/#steps","text":"Create a project shell_command_project Then create a file named my_command.sh Replace the code with the following content: uname -an echo variable1=$variable1 Then create a Command named my_command.command Replace the content with the following JSON code: { \"description\" : \"command description\" , \"contentType\" : \"text/plain\" , \"commands\" :[ { \"os\" : \"mac\" , \"command\" : \"sh shell_command_project/my_command.sh\" }, { \"os\" : \"linux\" , \"command\" : \"sh shell_command_project/my_command.sh\" } ], \"set\" :{ \"variable1\" : \"value1\" }, \"unset\" :[ \"variable2\" ] } Publish the project Select the *.command file in the Workspace explorer and inspect the result in the Preview: Darwin XXXXXXXXXXXXX 17.7.0 Darwin Kernel Version 17.7.0: Thu Jun 21 22:53:14 PDT 2018; root:xnu-4570.71.2~1/RELEASE_X86_64 x86_64 variable1=value1 Note: The working folder is set to the registry/public space under the file-based Repository. You can execute an arbitrary command e.g. even Node, Python, Julia, etc., by using the dirigible projects' content published and available under the registry space. For this case the given framework has to be setup in advance and the entry point executable to be added to the PATH environment variable. The standard output is redirected to the service response. For more information, see the API documentation.","title":"Steps"},{"location":"tutorial/generate-application-from-model/","text":"Generate Application from Model This tutorial will guide you through the creation of an entity data model and generation of a full-stack Dirigible application, from this model. Prerequisites Access to the latest version of Eclipse Dirigible (3.2.2+) Overview In this tutorial we will create an entity model of a car service bookings and generate full-stack Dirigible application from it. The complete sample can be found here . Car Service Bookings Setup Create new project car-service-bookings Right click -> New -> Entity Data Model Rename file.edm to car-service-bookings.edm Open car-service-bookings.edm Brands Drag and drop new entity {: .img-responsive } Name it Brands Rename entityId to Id Drag and drop new property {: .img-responsive } Rename property2 to Name Open the properties of the Brands entity Open the General tab Set the Type to Primary Entity Switch to the User Interface tab Set the Layout Type to Manage Master Entites Models Drag and drop new entity Name it Models Rename entityId to Id Drag and drop new property Rename property2 to Name Add new relation between Models and Brands {: .img-responsive } Rename the relation property in the Models entity to BrandId Open the relation properties Set Name to Brand Set Relationship Type to Composition Set Relationship Cardinality to one-to-many Open the properties of the BrandId property Switch to the User Interface tab Set Is Major to Show in form only Open the properties of the Models entity Open the General tab Set the Type to Dependent Entity Swith to the User Interface tab Set the Layout Tab to Manage Details Entities Cars Drag and drop new entity Name it Cars Rename entityId to Id Drag and drop new property Rename property2 to PlateNumber Add new relation between Cars and Models Rename the relation property in the Cars entity to ModelId Open the properties of the ModelId property Open the Data tab Set the Data Type to INTEGER Switch to the User Interface Set Widget Type to Dropdown Set Label to Model Set Dropdown Key to Id Set Dropdown Value to Name > Note : the dropdown key and value refers respectively to the Models:Id and Models:Name values Generation Save the model {: .img-responsive } Right click on car-service-bookings.model and select Generate Set Template to Full-stack Application (AngularJS) Set Extension to car-service Check Embedded mode Set Title to Car Service Set Brand to Car Service Click Generate Publish the project Extensibility Sample view based extension can be found here Wrap up The whole application can be found here Resources Sample Car Service Bookings: sample-v3-car-service-bookings Sample Data: sample-v3-car-service-bookings-data Sample Extension: sample-v3-car-service-bookings-extension","title":"Generate Application from Model"},{"location":"tutorial/generate-application-from-model/#generate-application-from-model","text":"This tutorial will guide you through the creation of an entity data model and generation of a full-stack Dirigible application, from this model.","title":"Generate Application from Model"},{"location":"tutorial/generate-application-from-model/#prerequisites","text":"Access to the latest version of Eclipse Dirigible (3.2.2+)","title":"Prerequisites"},{"location":"tutorial/generate-application-from-model/#overview","text":"In this tutorial we will create an entity model of a car service bookings and generate full-stack Dirigible application from it. The complete sample can be found here .","title":"Overview"},{"location":"tutorial/generate-application-from-model/#car-service-bookings","text":"","title":"Car Service Bookings"},{"location":"tutorial/generate-application-from-model/#setup","text":"Create new project car-service-bookings Right click -> New -> Entity Data Model Rename file.edm to car-service-bookings.edm Open car-service-bookings.edm","title":"Setup"},{"location":"tutorial/generate-application-from-model/#brands","text":"Drag and drop new entity {: .img-responsive } Name it Brands Rename entityId to Id Drag and drop new property {: .img-responsive } Rename property2 to Name Open the properties of the Brands entity Open the General tab Set the Type to Primary Entity Switch to the User Interface tab Set the Layout Type to Manage Master Entites","title":"Brands"},{"location":"tutorial/generate-application-from-model/#models","text":"Drag and drop new entity Name it Models Rename entityId to Id Drag and drop new property Rename property2 to Name Add new relation between Models and Brands {: .img-responsive } Rename the relation property in the Models entity to BrandId Open the relation properties Set Name to Brand Set Relationship Type to Composition Set Relationship Cardinality to one-to-many Open the properties of the BrandId property Switch to the User Interface tab Set Is Major to Show in form only Open the properties of the Models entity Open the General tab Set the Type to Dependent Entity Swith to the User Interface tab Set the Layout Tab to Manage Details Entities","title":"Models"},{"location":"tutorial/generate-application-from-model/#cars","text":"Drag and drop new entity Name it Cars Rename entityId to Id Drag and drop new property Rename property2 to PlateNumber Add new relation between Cars and Models Rename the relation property in the Cars entity to ModelId Open the properties of the ModelId property Open the Data tab Set the Data Type to INTEGER Switch to the User Interface Set Widget Type to Dropdown Set Label to Model Set Dropdown Key to Id Set Dropdown Value to Name > Note : the dropdown key and value refers respectively to the Models:Id and Models:Name values","title":"Cars"},{"location":"tutorial/generate-application-from-model/#generation","text":"Save the model {: .img-responsive } Right click on car-service-bookings.model and select Generate Set Template to Full-stack Application (AngularJS) Set Extension to car-service Check Embedded mode Set Title to Car Service Set Brand to Car Service Click Generate Publish the project","title":"Generation"},{"location":"tutorial/generate-application-from-model/#extensibility","text":"Sample view based extension can be found here","title":"Extensibility"},{"location":"tutorial/generate-application-from-model/#wrap-up","text":"The whole application can be found here","title":"Wrap up"},{"location":"tutorial/generate-application-from-model/#resources","text":"Sample Car Service Bookings: sample-v3-car-service-bookings Sample Data: sample-v3-car-service-bookings-data Sample Extension: sample-v3-car-service-bookings-extension","title":"Resources"},{"location":"tutorial/helium-custom-stack/","text":"Helium Custom Stack This tutorial will guide you through the creation of a custom Dirigible stack for production. It also explains how to create a facade of a functionality written in Java and to expose it via API bridge to the application layer - JavaScript. Such a custom stack contains only the core components of Dirigible plus the custom services, user interfaces and descriptor files of your Dirigible application. Prerequisites A Dirigible project containing the data artifacts pushed to a repository e.g. https://github.com/dirigiblelabs/sample-v3-helium-data A Dirigible project with the backend services e.g. https://github.com/dirigiblelabs/sample-v3-helium-javascript A Dirigible project for the user interfaces e.g. https://github.com/dirigiblelabs/sample-v3-helium-html Project Structure Create a packaging project - a standard Maven-based project with a parent dependency modules e.g. https://github.com/dirigiblelabs/sample-v3-helium-custom-stack Create three sub-folders under the root: modules - for the parts which are developed with Dirigible itself core - for the plain Java components and API bridges application - for the packaging project The project structure should look like the example below. Components Dirigible's Module Structure The project representing a Dirigible's project in the Maven-based parent project structure usually contains only a single file - the pom.xml itself. The main goal is to pull the latest sources from the SCM repository (e.g. GitHub) and to put them under the standard resources folder - src/main/resources A sample pom.xml should look like this: <?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns= \"http://maven.apache.org/POM/4.0.0\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation= \"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" > <modelVersion> 4.0.0 </modelVersion> <parent> <groupId> io.dirigible.helium </groupId> <artifactId> helium-modules </artifactId> <version> 0.0.1-SNAPSHOT </version> <relativePath> ../pom.xml </relativePath> </parent> <name> Helium - Data </name> <artifactId> helium-data </artifactId> <version> 0.0.1-SNAPSHOT </version> <packaging> jar </packaging> <scm> <url> ${content.scm.url} </url> <connection> ${content.scm.connection} </connection> <developerConnection> ${content.scm.developerConnection} </developerConnection> </scm> <properties> <maven.clean.plugin.version> 3.0.0 </maven.clean.plugin.version> <content.repository.name> sample-v3-helium-data </content.repository.name> <content.project.name> helium-data </content.project.name> <content.scm.url> https://github.com/dirigiblelabs/${content.repository.name} </content.scm.url> <content.scm.connection> scm:git:git://github.com/dirigiblelabs/${content.repository.name}.git </content.scm.connection> <content.scm.developerConnection> scm:git:https://github.com/dirigiblelabs/${content.repository.name} </content.scm.developerConnection> </properties> </project> https://github.com/dirigiblelabs/sample-v3-helium-custom-stack/blob/master/helium/modules/data/pom.xml The parent project of all the modules defines the profile content with the maven-scm-plugin Maven plugin. <?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns= \"http://maven.apache.org/POM/4.0.0\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation= \"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" > <modelVersion> 4.0.0 </modelVersion> <parent> <groupId> io.dirigible.helium </groupId> <artifactId> helium-parent </artifactId> <version> 0.0.1-SNAPSHOT </version> <relativePath> ../pom.xml </relativePath> </parent> <name> Helium - Modules </name> <artifactId> helium-modules </artifactId> <version> 0.0.1-SNAPSHOT </version> <packaging> pom </packaging> <scm> <url> ${content.scm.url} </url> <connection> ${content.scm.connection} </connection> <developerConnection> ${content.scm.developerConnection} </developerConnection> </scm> <modules> <module> data </module> <module> javascript </module> <module> html </module> </modules> <properties> <maven.clean.plugin.version> 3.0.0 </maven.clean.plugin.version> <content.repository.name> dirigiblelabs </content.repository.name> <content.project.name> dirigiblelabs </content.project.name> <content.scm.url> https://github.com/dirigiblelabs/${content.repository.name} </content.scm.url> <content.scm.connection> scm:git:git://github.com/dirigiblelabs/${content.repository.name}.git </content.scm.connection> <content.scm.developerConnection> scm:git:https://github.com/dirigiblelabs/${content.repository.name} </content.scm.developerConnection> <content.scm.server> github </content.scm.server> <content.scm.checkoutDirectory> target </content.scm.checkoutDirectory> <content.source.directory> target/${content.project.name} </content.source.directory> <content.output.directory> ${basedir}/src/main/resources/${content.project.name} </content.output.directory> </properties> <profiles> <profile> <id> content </id> <activation> <activeByDefault> false </activeByDefault> </activation> <build> <finalName> ${project.artifactId} </finalName> <plugins> <plugin> <groupId> org.apache.maven.plugins </groupId> <artifactId> maven-clean-plugin </artifactId> <version> ${maven.clean.plugin.version} </version> <configuration> <filesets> <fileset> <directory> src/main/resources </directory> </fileset> </filesets> </configuration> </plugin> <plugin> <groupId> org.apache.maven.plugins </groupId> <artifactId> maven-scm-plugin </artifactId> <version> ${maven.scm.plugin.version} </version> <configuration> <goals> checkout </goals> <checkoutDirectory> ${content.scm.checkoutDirectory} </checkoutDirectory> <server> ${content.scm.server} </server> </configuration> <executions> <execution> <id> generated-sources </id> <phase> generate-sources </phase> <goals> <goal> checkout </goal> </goals> </execution> </executions> </plugin> <plugin> <artifactId> maven-resources-plugin </artifactId> <version> ${maven.resource.plugin.version} </version> <executions> <execution> <id> copy-content-resources </id> <phase> compile </phase> <goals> <goal> copy-resources </goal> </goals> <configuration> <outputDirectory> ${content.output.directory} </outputDirectory> <resources> <resource> <directory> ${content.source.directory} </directory> <filtering> true </filtering> </resource> </resources> </configuration> </execution> </executions> </plugin> </plugins> </build> </profile> </profiles> </project> It can be triggered by choosing the content profile as: mvn clean install -Pcontent After synchronizing all the content, you should run the regular build for actual packaging: mvn clean install The other modules in these project next to the data module, contain the backend services in JavaScript and the user interface web content. Java Standard Module with API Bridge The Java code can be integrated nicely into the custom stack not only as a side-car 3-thd party component, but also as a custom functionality exposed to the Dirigible's layer via an API bridge. You can have a look at the sub-project here https://github.com/dirigiblelabs/sample-v3-helium-custom-stack/tree/master/helium/core/java The Java side is a facade class which exposes a given functionality to the above layer: package io.dirigible.helium ; public class HeliumFacade { public static final boolean isInert () { return true ; } } In our case it is over-simplified to just return a boolean flag and no input parameters present. In general, you can use more complex functions described here: https://github.com/eclipse/dirigible/wiki/api-v3-guidelines At the JavaScript side you have an API module, which performs the actual call via the Java bridge: var java = require ( 'core/v3/java' ); exports . isInert = function () { var output = java . call ( 'io.dirigible.helium.HeliumFacade' , 'isInert' , []); return output ; }; In this way you can use de-facto arbitrary Java class and method from your favorite framework as JavaScript function in Dirigible's layer. The sample module shows how to use the API bridge afterwards: var helium = require ( \"sample/helium\" ); var isInert = helium . isInert (); console . info ( isInert ); var response = require ( \"http/v3/response\" ); response . println ( \"Is Helium an inert gas? - \" + isInert ); response . flush (); response . close (); Build and Package Once we have all the artifacts in place, we can run the standard build and package command: mvn clean install Then under the application/target folder we can find the ROOT.war file containing all the modules packaged properly in a standard Java Web Application archive. Deploy Now we can use one of the deploy options to setup our application here . Test Open a browser and go to: http://localhost:8080 or at the host you are using, if not the local one. You should be able to see a table with some of the Helium properties as well as the link to the test service for the API bridge.","title":"Helium Custom Stack"},{"location":"tutorial/helium-custom-stack/#helium-custom-stack","text":"This tutorial will guide you through the creation of a custom Dirigible stack for production. It also explains how to create a facade of a functionality written in Java and to expose it via API bridge to the application layer - JavaScript. Such a custom stack contains only the core components of Dirigible plus the custom services, user interfaces and descriptor files of your Dirigible application.","title":"Helium Custom Stack"},{"location":"tutorial/helium-custom-stack/#prerequisites","text":"A Dirigible project containing the data artifacts pushed to a repository e.g. https://github.com/dirigiblelabs/sample-v3-helium-data A Dirigible project with the backend services e.g. https://github.com/dirigiblelabs/sample-v3-helium-javascript A Dirigible project for the user interfaces e.g. https://github.com/dirigiblelabs/sample-v3-helium-html","title":"Prerequisites"},{"location":"tutorial/helium-custom-stack/#project-structure","text":"Create a packaging project - a standard Maven-based project with a parent dependency modules e.g. https://github.com/dirigiblelabs/sample-v3-helium-custom-stack Create three sub-folders under the root: modules - for the parts which are developed with Dirigible itself core - for the plain Java components and API bridges application - for the packaging project The project structure should look like the example below.","title":"Project Structure"},{"location":"tutorial/helium-custom-stack/#components","text":"","title":"Components"},{"location":"tutorial/helium-custom-stack/#dirigibles-module-structure","text":"The project representing a Dirigible's project in the Maven-based parent project structure usually contains only a single file - the pom.xml itself. The main goal is to pull the latest sources from the SCM repository (e.g. GitHub) and to put them under the standard resources folder - src/main/resources A sample pom.xml should look like this: <?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns= \"http://maven.apache.org/POM/4.0.0\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation= \"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" > <modelVersion> 4.0.0 </modelVersion> <parent> <groupId> io.dirigible.helium </groupId> <artifactId> helium-modules </artifactId> <version> 0.0.1-SNAPSHOT </version> <relativePath> ../pom.xml </relativePath> </parent> <name> Helium - Data </name> <artifactId> helium-data </artifactId> <version> 0.0.1-SNAPSHOT </version> <packaging> jar </packaging> <scm> <url> ${content.scm.url} </url> <connection> ${content.scm.connection} </connection> <developerConnection> ${content.scm.developerConnection} </developerConnection> </scm> <properties> <maven.clean.plugin.version> 3.0.0 </maven.clean.plugin.version> <content.repository.name> sample-v3-helium-data </content.repository.name> <content.project.name> helium-data </content.project.name> <content.scm.url> https://github.com/dirigiblelabs/${content.repository.name} </content.scm.url> <content.scm.connection> scm:git:git://github.com/dirigiblelabs/${content.repository.name}.git </content.scm.connection> <content.scm.developerConnection> scm:git:https://github.com/dirigiblelabs/${content.repository.name} </content.scm.developerConnection> </properties> </project> https://github.com/dirigiblelabs/sample-v3-helium-custom-stack/blob/master/helium/modules/data/pom.xml The parent project of all the modules defines the profile content with the maven-scm-plugin Maven plugin. <?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns= \"http://maven.apache.org/POM/4.0.0\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation= \"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" > <modelVersion> 4.0.0 </modelVersion> <parent> <groupId> io.dirigible.helium </groupId> <artifactId> helium-parent </artifactId> <version> 0.0.1-SNAPSHOT </version> <relativePath> ../pom.xml </relativePath> </parent> <name> Helium - Modules </name> <artifactId> helium-modules </artifactId> <version> 0.0.1-SNAPSHOT </version> <packaging> pom </packaging> <scm> <url> ${content.scm.url} </url> <connection> ${content.scm.connection} </connection> <developerConnection> ${content.scm.developerConnection} </developerConnection> </scm> <modules> <module> data </module> <module> javascript </module> <module> html </module> </modules> <properties> <maven.clean.plugin.version> 3.0.0 </maven.clean.plugin.version> <content.repository.name> dirigiblelabs </content.repository.name> <content.project.name> dirigiblelabs </content.project.name> <content.scm.url> https://github.com/dirigiblelabs/${content.repository.name} </content.scm.url> <content.scm.connection> scm:git:git://github.com/dirigiblelabs/${content.repository.name}.git </content.scm.connection> <content.scm.developerConnection> scm:git:https://github.com/dirigiblelabs/${content.repository.name} </content.scm.developerConnection> <content.scm.server> github </content.scm.server> <content.scm.checkoutDirectory> target </content.scm.checkoutDirectory> <content.source.directory> target/${content.project.name} </content.source.directory> <content.output.directory> ${basedir}/src/main/resources/${content.project.name} </content.output.directory> </properties> <profiles> <profile> <id> content </id> <activation> <activeByDefault> false </activeByDefault> </activation> <build> <finalName> ${project.artifactId} </finalName> <plugins> <plugin> <groupId> org.apache.maven.plugins </groupId> <artifactId> maven-clean-plugin </artifactId> <version> ${maven.clean.plugin.version} </version> <configuration> <filesets> <fileset> <directory> src/main/resources </directory> </fileset> </filesets> </configuration> </plugin> <plugin> <groupId> org.apache.maven.plugins </groupId> <artifactId> maven-scm-plugin </artifactId> <version> ${maven.scm.plugin.version} </version> <configuration> <goals> checkout </goals> <checkoutDirectory> ${content.scm.checkoutDirectory} </checkoutDirectory> <server> ${content.scm.server} </server> </configuration> <executions> <execution> <id> generated-sources </id> <phase> generate-sources </phase> <goals> <goal> checkout </goal> </goals> </execution> </executions> </plugin> <plugin> <artifactId> maven-resources-plugin </artifactId> <version> ${maven.resource.plugin.version} </version> <executions> <execution> <id> copy-content-resources </id> <phase> compile </phase> <goals> <goal> copy-resources </goal> </goals> <configuration> <outputDirectory> ${content.output.directory} </outputDirectory> <resources> <resource> <directory> ${content.source.directory} </directory> <filtering> true </filtering> </resource> </resources> </configuration> </execution> </executions> </plugin> </plugins> </build> </profile> </profiles> </project> It can be triggered by choosing the content profile as: mvn clean install -Pcontent After synchronizing all the content, you should run the regular build for actual packaging: mvn clean install The other modules in these project next to the data module, contain the backend services in JavaScript and the user interface web content.","title":"Dirigible's Module Structure"},{"location":"tutorial/helium-custom-stack/#java-standard-module-with-api-bridge","text":"The Java code can be integrated nicely into the custom stack not only as a side-car 3-thd party component, but also as a custom functionality exposed to the Dirigible's layer via an API bridge. You can have a look at the sub-project here https://github.com/dirigiblelabs/sample-v3-helium-custom-stack/tree/master/helium/core/java The Java side is a facade class which exposes a given functionality to the above layer: package io.dirigible.helium ; public class HeliumFacade { public static final boolean isInert () { return true ; } } In our case it is over-simplified to just return a boolean flag and no input parameters present. In general, you can use more complex functions described here: https://github.com/eclipse/dirigible/wiki/api-v3-guidelines At the JavaScript side you have an API module, which performs the actual call via the Java bridge: var java = require ( 'core/v3/java' ); exports . isInert = function () { var output = java . call ( 'io.dirigible.helium.HeliumFacade' , 'isInert' , []); return output ; }; In this way you can use de-facto arbitrary Java class and method from your favorite framework as JavaScript function in Dirigible's layer. The sample module shows how to use the API bridge afterwards: var helium = require ( \"sample/helium\" ); var isInert = helium . isInert (); console . info ( isInert ); var response = require ( \"http/v3/response\" ); response . println ( \"Is Helium an inert gas? - \" + isInert ); response . flush (); response . close ();","title":"Java Standard Module with API Bridge"},{"location":"tutorial/helium-custom-stack/#build-and-package","text":"Once we have all the artifacts in place, we can run the standard build and package command: mvn clean install Then under the application/target folder we can find the ROOT.war file containing all the modules packaged properly in a standard Java Web Application archive.","title":"Build and Package"},{"location":"tutorial/helium-custom-stack/#deploy","text":"Now we can use one of the deploy options to setup our application here .","title":"Deploy"},{"location":"tutorial/helium-custom-stack/#test","text":"Open a browser and go to: http://localhost:8080 or at the host you are using, if not the local one. You should be able to see a table with some of the Helium properties as well as the link to the test service for the API bridge.","title":"Test"},{"location":"tutorial/zeus-on-kubernetes-minikube/","text":"Zeus on Kubernetes These tutorials will guide you through the processes of installation of Kubernetes Minikube, deployment of Zeus and building an image with Docker: Setup on Windows on MacOS Start Minikube To run the local Kubernetes cluster execute the following command: minikube start Deploy and Run the Guestbook sample Follow the steps described in this tutorial - https://kubernetes.io/docs/tutorials/stateless-application/guestbook/ Deploy Zeus Deploy Zeus version 3 on Minikube using kubectl by executing: kubectl create -f https://raw.githubusercontent.com/dirigiblelabs/zeus-v3-package/master/zeus/zeus.yml Get the necessary information for access Get IP: minikube ip or directly: minikube dashboard Get port Execute: kubectl get services -n zeus -o go-template='{{range .items}}{{range.spec.ports}}{{if .nodePort}}{{.nodePort}}{{\"\\n\"}}{{end}}{{end}}{{end}}' or run minikube dashboard Open Zeus Cockpit From the Kubernetes Dashboard: Change the Namespace to zeus (from the sidebar menu) Select Discovery and Load Balancing (from the sidebar menu) Find the Services section and take the port of the Zeus instance. Copy the second port from the Internal endpoints column (e.g. 31111) Construct URL: {IP}:{Port} and open it in Web browser. Create Account Go to Accounts settings (via the sidebar - last icon) Select Partners view and add a new partner details Select the Accounts view and add a new account details Configure the local Cluster Go to Accounts settings (via the sidebar - last icon) Select Clusters view and add a new cluster details as follows Name: e.g. local URL: https://{IP}:8443 Token: from Minikube Dashboard, go to Config and Storage -> Secrets -> Token Account: select from the drop down Register a Container Go to Templates perspective Select the Containers view Enter the following parameters: Name: Dirigible Image: dirigiblelabs/dirigible-tomcat:latest Protocol: TCP Port: 8080 Create a Template Go to Templates perspective Select the Templates section Create a new Template named Dirigible Select the row representing the just created Template Select the Containers section below Create a new reference to the Container created in the previous step Select the Services section Create a new Service with the following details: Name: http Type: NodePort Port: 8080 Deploy the Application Go to Applications perspective Select the Deploy view Click on New button and enter the following details: Cluster: select from the drop down Template: select from the drop down Name: dirigible Undeploying Zeus If you want to undeploy Zeus, execute the following command: kubectl delete -f https://raw.githubusercontent.com/dirigiblelabs/zeus-v3-package/master/zeus/zeus.yml Stop Minikube To stop Minikube run: minikube stop","title":"Zeus on Kubernetes"},{"location":"tutorial/zeus-on-kubernetes-minikube/#zeus-on-kubernetes","text":"These tutorials will guide you through the processes of installation of Kubernetes Minikube, deployment of Zeus and building an image with Docker:","title":"Zeus on Kubernetes"},{"location":"tutorial/zeus-on-kubernetes-minikube/#setup","text":"on Windows on MacOS","title":"Setup"},{"location":"tutorial/zeus-on-kubernetes-minikube/#start-minikube","text":"To run the local Kubernetes cluster execute the following command: minikube start","title":"Start Minikube"},{"location":"tutorial/zeus-on-kubernetes-minikube/#deploy-and-run-the-guestbook-sample","text":"Follow the steps described in this tutorial - https://kubernetes.io/docs/tutorials/stateless-application/guestbook/","title":"Deploy and Run the Guestbook sample"},{"location":"tutorial/zeus-on-kubernetes-minikube/#deploy-zeus","text":"Deploy Zeus version 3 on Minikube using kubectl by executing: kubectl create -f https://raw.githubusercontent.com/dirigiblelabs/zeus-v3-package/master/zeus/zeus.yml Get the necessary information for access Get IP: minikube ip or directly: minikube dashboard Get port Execute: kubectl get services -n zeus -o go-template='{{range .items}}{{range.spec.ports}}{{if .nodePort}}{{.nodePort}}{{\"\\n\"}}{{end}}{{end}}{{end}}' or run minikube dashboard","title":"Deploy Zeus"},{"location":"tutorial/zeus-on-kubernetes-minikube/#open-zeus-cockpit","text":"From the Kubernetes Dashboard: Change the Namespace to zeus (from the sidebar menu) Select Discovery and Load Balancing (from the sidebar menu) Find the Services section and take the port of the Zeus instance. Copy the second port from the Internal endpoints column (e.g. 31111) Construct URL: {IP}:{Port} and open it in Web browser.","title":"Open Zeus Cockpit"},{"location":"tutorial/zeus-on-kubernetes-minikube/#create-account","text":"Go to Accounts settings (via the sidebar - last icon) Select Partners view and add a new partner details Select the Accounts view and add a new account details","title":"Create Account"},{"location":"tutorial/zeus-on-kubernetes-minikube/#configure-the-local-cluster","text":"Go to Accounts settings (via the sidebar - last icon) Select Clusters view and add a new cluster details as follows Name: e.g. local URL: https://{IP}:8443 Token: from Minikube Dashboard, go to Config and Storage -> Secrets -> Token Account: select from the drop down","title":"Configure the local Cluster"},{"location":"tutorial/zeus-on-kubernetes-minikube/#register-a-container","text":"Go to Templates perspective Select the Containers view Enter the following parameters: Name: Dirigible Image: dirigiblelabs/dirigible-tomcat:latest Protocol: TCP Port: 8080","title":"Register a Container"},{"location":"tutorial/zeus-on-kubernetes-minikube/#create-a-template","text":"Go to Templates perspective Select the Templates section Create a new Template named Dirigible Select the row representing the just created Template Select the Containers section below Create a new reference to the Container created in the previous step Select the Services section Create a new Service with the following details: Name: http Type: NodePort Port: 8080","title":"Create a Template"},{"location":"tutorial/zeus-on-kubernetes-minikube/#deploy-the-application","text":"Go to Applications perspective Select the Deploy view Click on New button and enter the following details: Cluster: select from the drop down Template: select from the drop down Name: dirigible","title":"Deploy the Application"},{"location":"tutorial/zeus-on-kubernetes-minikube/#undeploying-zeus","text":"If you want to undeploy Zeus, execute the following command: kubectl delete -f https://raw.githubusercontent.com/dirigiblelabs/zeus-v3-package/master/zeus/zeus.yml","title":"Undeploying Zeus"},{"location":"tutorial/zeus-on-kubernetes-minikube/#stop-minikube","text":"To stop Minikube run: minikube stop","title":"Stop Minikube"},{"location":"tutorial/zeus-on-macos/","text":"Zeus on Kubernetes with MacOS Prerequisites Have a Homebrew installed - https://docs.brew.sh/Installation Install Kubernetes command-line tool Run the following command: brew install kubectl To verify that the version you\u2019ve installed is up-to-date, run: kubectl version Install Minikube Install Minikube v0.27.0 curl -Lo minikube https://storage.googleapis.com/minikube/releases/v0.27.0/minikube-darwin-amd64 && chmod +x minikube && sudo mv minikube /usr/local/bin/ Additional Steps with Docker Install Docker Install it using Hombrew: brew cask install docker Open Docker.app and continue the installation of the network (Ctrl+Space) Build the image Build an image without uploading it: Set the environment variables with eval $(minikube docker-env) Clone the Zeus packaging project: git clone https://github.com/dirigiblelabs/zeus-v3-package.git Build the image with the Docker daemon of Minikube: cd zeus-v3-package/zeus mvn clean install docker build -t zeus . Set the image in the pod spec like the build tag: zeus Set the imagePullPolicy to Never , otherwise Kubernetes will try to download the image Important note: You have to run eval $(minikube docker-env) on each terminal you want to use, since it only sets the environment variables for the current shell session.","title":"Zeus on Kubernetes with MacOS"},{"location":"tutorial/zeus-on-macos/#zeus-on-kubernetes-with-macos","text":"","title":"Zeus on Kubernetes with MacOS"},{"location":"tutorial/zeus-on-macos/#prerequisites","text":"Have a Homebrew installed - https://docs.brew.sh/Installation","title":"Prerequisites"},{"location":"tutorial/zeus-on-macos/#install-kubernetes-command-line-tool","text":"Run the following command: brew install kubectl To verify that the version you\u2019ve installed is up-to-date, run: kubectl version","title":"Install Kubernetes command-line tool"},{"location":"tutorial/zeus-on-macos/#install-minikube","text":"Install Minikube v0.27.0 curl -Lo minikube https://storage.googleapis.com/minikube/releases/v0.27.0/minikube-darwin-amd64 && chmod +x minikube && sudo mv minikube /usr/local/bin/","title":"Install Minikube"},{"location":"tutorial/zeus-on-macos/#additional-steps-with-docker","text":"","title":"Additional Steps with Docker"},{"location":"tutorial/zeus-on-macos/#install-docker","text":"Install it using Hombrew: brew cask install docker Open Docker.app and continue the installation of the network (Ctrl+Space)","title":"Install Docker"},{"location":"tutorial/zeus-on-macos/#build-the-image","text":"Build an image without uploading it: Set the environment variables with eval $(minikube docker-env) Clone the Zeus packaging project: git clone https://github.com/dirigiblelabs/zeus-v3-package.git Build the image with the Docker daemon of Minikube: cd zeus-v3-package/zeus mvn clean install docker build -t zeus . Set the image in the pod spec like the build tag: zeus Set the imagePullPolicy to Never , otherwise Kubernetes will try to download the image Important note: You have to run eval $(minikube docker-env) on each terminal you want to use, since it only sets the environment variables for the current shell session.","title":"Build the image"},{"location":"tutorial/zeus-on-windows/","text":"Zeus on Kubernetes with Windows OS This tutorial was performed on a PC running Windows 10 Enterprise OS. Prerequisites Have VirtualBox 5.2.12 platform packages installed .NET Framework 4+ (the installation will attempt to install .NET 4.0 if you do not have it installed) Enabled VT-x or AMD-v virtualization (use the Performance tab for the CPU in the Task Manager to verify it) Install Kubernetes command-line tool Install Chocolatey 1.1. Run the following command: @\"%SystemRoot%\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\" -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command \"iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))\" && SET \"PATH=%PATH%;%ALLUSERSPROFILE%\\chocolatey\\bin\" If you don't see any errors, you are ready to use Chocolatey! 1.2. To ensure that Chocolatey is successfully installed, type choco or choco -? . For more information see https://chocolatey.org/install. Install the Kubernetes command-line tool kubectl with Chocolatey 2.1. Execute the command: choco install kubernetes-cli 2.2. To verify that the version you\u2019ve installed is up-to-date, run kubectl version 2.3. Configure kubectl to use a remote Kubernetes cluster: cd C:\\users\\yourusername (Or wherever your %HOME% directory is) mkdir .kube cd .kube New-Item config -type file Edit the config file with a text editor of your choice. 2.4. Check that kubectl is properly configured by getting the cluster state: kubectl cluster-info Install Minikube Install Minikube v0.26.1 Download the minikube-installer.exe file, and execute the installer. This will automatically add minikube.exe to your path. Additional Steps Install Docker Run CMD as Administrator Navigate to Chocolatey root folder Execute: choco install docker Confirm with y Build the image Build an image without uploading it: Set the environment variables with @FOR /f \"tokens=*\" %i IN ('minikube docker-env') DO @%i Clone the Zeus packaging project using Git Bash by executing: git clone https://github.com/dirigiblelabs/zeus-v3-package.git Build the image with the Docker daemon of Minikube: cd zeus-v3-package/zeus mvn clean install docker build -t zeus . Set the image in the pod spec like the build tag: zeus Set the imagePullPolicy to Never , otherwise Kubernetes will try to download the image Important note: You have to run eval $(minikube docker-env) on each terminal you want to use, since it only sets the environment variables for the current shell session.","title":"Zeus on Kubernetes with Windows OS"},{"location":"tutorial/zeus-on-windows/#zeus-on-kubernetes-with-windows-os","text":"This tutorial was performed on a PC running Windows 10 Enterprise OS.","title":"Zeus on Kubernetes with Windows OS"},{"location":"tutorial/zeus-on-windows/#prerequisites","text":"Have VirtualBox 5.2.12 platform packages installed .NET Framework 4+ (the installation will attempt to install .NET 4.0 if you do not have it installed) Enabled VT-x or AMD-v virtualization (use the Performance tab for the CPU in the Task Manager to verify it)","title":"Prerequisites"},{"location":"tutorial/zeus-on-windows/#install-kubernetes-command-line-tool","text":"Install Chocolatey 1.1. Run the following command: @\"%SystemRoot%\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\" -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command \"iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))\" && SET \"PATH=%PATH%;%ALLUSERSPROFILE%\\chocolatey\\bin\" If you don't see any errors, you are ready to use Chocolatey! 1.2. To ensure that Chocolatey is successfully installed, type choco or choco -? . For more information see https://chocolatey.org/install. Install the Kubernetes command-line tool kubectl with Chocolatey 2.1. Execute the command: choco install kubernetes-cli 2.2. To verify that the version you\u2019ve installed is up-to-date, run kubectl version 2.3. Configure kubectl to use a remote Kubernetes cluster: cd C:\\users\\yourusername (Or wherever your %HOME% directory is) mkdir .kube cd .kube New-Item config -type file Edit the config file with a text editor of your choice. 2.4. Check that kubectl is properly configured by getting the cluster state: kubectl cluster-info","title":"Install Kubernetes command-line tool"},{"location":"tutorial/zeus-on-windows/#install-minikube","text":"Install Minikube v0.26.1 Download the minikube-installer.exe file, and execute the installer. This will automatically add minikube.exe to your path.","title":"Install Minikube"},{"location":"tutorial/zeus-on-windows/#additional-steps","text":"","title":"Additional Steps"},{"location":"tutorial/zeus-on-windows/#install-docker","text":"Run CMD as Administrator Navigate to Chocolatey root folder Execute: choco install docker Confirm with y","title":"Install Docker"},{"location":"tutorial/zeus-on-windows/#build-the-image","text":"Build an image without uploading it: Set the environment variables with @FOR /f \"tokens=*\" %i IN ('minikube docker-env') DO @%i Clone the Zeus packaging project using Git Bash by executing: git clone https://github.com/dirigiblelabs/zeus-v3-package.git Build the image with the Docker daemon of Minikube: cd zeus-v3-package/zeus mvn clean install docker build -t zeus . Set the image in the pod spec like the build tag: zeus Set the imagePullPolicy to Never , otherwise Kubernetes will try to download the image Important note: You have to run eval $(minikube docker-env) on each terminal you want to use, since it only sets the environment variables for the current shell session.","title":"Build the image"}]}