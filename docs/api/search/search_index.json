{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Eclipse Dirigible \u2122 API Eclipse Dirigible \u2122 API Portal provides the most recent information about the Enterprise JavaScript API availability, versions and status. Hello World Create new project: hello-world Create new file: hello-world.mjs Copy and paste the sample code. Save the changes. See the result in the Preview tab. import { response } from \"sdk/http\" ; response . println ( \"Hello World!\" ); Next Steps Explore some of the following core APIs: Console HTTP Client HTTP Request HTTP REST Services Database Query Base64 Files","title":"Home"},{"location":"#eclipse-dirigible-api","text":"Eclipse Dirigible \u2122 API Portal provides the most recent information about the Enterprise JavaScript API availability, versions and status.","title":"Eclipse Dirigible&trade; API"},{"location":"#hello-world","text":"Create new project: hello-world Create new file: hello-world.mjs Copy and paste the sample code. Save the changes. See the result in the Preview tab. import { response } from \"sdk/http\" ; response . println ( \"Hello World!\" );","title":"Hello World"},{"location":"#next-steps","text":"Explore some of the following core APIs: Console HTTP Client HTTP Request HTTP REST Services Database Query Base64 Files","title":"Next Steps"},{"location":"bpm/process/","text":"Business Process Business Process object is used to access and manage the business processes from the underlying engine. Overview Module: bpm/process Definition: https://github.com/eclipse/dirigible/issues/227 Source: /bpm/process.ts Status: stable Group: bpm Basic Usage The service which starts the process: ECMA6 CommonJS import { process } from \"sdk/bpm\" process . start ( \"hello\" , { variable1 : \"value1\" }); const process = require ( \"bpm/process\" ); process . start ( \"hello\" , { variable1 : \"value1\" }); Create a new Business Process Model file, open it with Code Editor and paste the process definiton: <?xml version='1.0' encoding='UTF-8'?> <definitions xmlns= \"http://www.omg.org/spec/BPMN/20100524/MODEL\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd= \"http://www.w3.org/2001/XMLSchema\" xmlns:flowable= \"http://flowable.org/bpmn\" xmlns:bpmndi= \"http://www.omg.org/spec/BPMN/20100524/DI\" xmlns:omgdc= \"http://www.omg.org/spec/DD/20100524/DC\" xmlns:omgdi= \"http://www.omg.org/spec/DD/20100524/DI\" typeLanguage= \"http://www.w3.org/2001/XMLSchema\" expressionLanguage= \"http://www.w3.org/1999/XPath\" targetNamespace= \"http://www.flowable.org/processdef\" > <process id= \"hello\" name= \"hello\" isExecutable= \"true\" > <startEvent id= \"sid-3334E861-7999-4B89-B8B0-11724BA17A3E\" /> <serviceTask id= \"sayHello\" name= \"SayHello\" flowable:class= \"org.eclipse.dirigible.components.engine.bpm.flowable.delegate.DirigibleCallDelegate\" > <extensionElements> <flowable:field name= \"handler\" > <flowable:string> <![CDATA[bpmFlows/hello.js]]> </flowable:string> </flowable:field> </extensionElements> </serviceTask> <sequenceFlow id= \"sid-797626AE-B2F6-4C00-ABEE-FB30ADC177E4\" sourceRef= \"sid-3334E861-7999-4B89-B8B0-11724BA17A3E\" targetRef= \"sayHello\" /> <endEvent id= \"sid-70B488C1-384A-4E19-8091-1B12D1AEC7FD\" /> <sequenceFlow id= \"sid-645847E8-C959-48BD-816B-2E9CC4A2F08A\" sourceRef= \"sayHello\" targetRef= \"sid-70B488C1-384A-4E19-8091-1B12D1AEC7FD\" /> </process> <bpmndi:BPMNDiagram id= \"BPMNDiagram_hello\" > <bpmndi:BPMNPlane bpmnElement= \"hello\" id= \"BPMNPlane_hello\" > <bpmndi:BPMNShape bpmnElement= \"sid-3334E861-7999-4B89-B8B0-11724BA17A3E\" id= \"BPMNShape_sid-3334E861-7999-4B89-B8B0-11724BA17A3E\" > <omgdc:Bounds height= \"30.0\" width= \"30.0\" x= \"103.0\" y= \"78.0\" /> </bpmndi:BPMNShape> <bpmndi:BPMNShape bpmnElement= \"sayHello\" id= \"BPMNShape_sayHello\" > <omgdc:Bounds height= \"80.0\" width= \"100.0\" x= \"300.0\" y= \"105.0\" /> </bpmndi:BPMNShape> <bpmndi:BPMNShape bpmnElement= \"sid-70B488C1-384A-4E19-8091-1B12D1AEC7FD\" id= \"BPMNShape_sid-70B488C1-384A-4E19-8091-1B12D1AEC7FD\" > <omgdc:Bounds height= \"28.0\" width= \"28.0\" x= \"562.0\" y= \"78.0\" /> </bpmndi:BPMNShape> <bpmndi:BPMNEdge bpmnElement= \"sid-797626AE-B2F6-4C00-ABEE-FB30ADC177E4\" id= \"BPMNEdge_sid-797626AE-B2F6-4C00-ABEE-FB30ADC177E4\" > <omgdi:waypoint x= \"133.0\" y= \"93.0\" /> <omgdi:waypoint x= \"201.0\" y= \"93.0\" /> <omgdi:waypoint x= \"201.0\" y= \"145.0\" /> <omgdi:waypoint x= \"300.0\" y= \"145.0\" /> </bpmndi:BPMNEdge> <bpmndi:BPMNEdge bpmnElement= \"sid-645847E8-C959-48BD-816B-2E9CC4A2F08A\" id= \"BPMNEdge_sid-645847E8-C959-48BD-816B-2E9CC4A2F08A\" > <omgdi:waypoint x= \"400.0\" y= \"145.0\" /> <omgdi:waypoint x= \"466.0\" y= \"145.0\" /> <omgdi:waypoint x= \"466.0\" y= \"92.0\" /> <omgdi:waypoint x= \"562.0\" y= \"92.0\" /> </bpmndi:BPMNEdge> </bpmndi:BPMNPlane> </bpmndi:BPMNDiagram> </definitions> In a new project called bpmFlows add the following delegate hello.mjs or hello.js respectively ECMA6 // manipulating process variables throughout the execution context import { process } from \"sdk/bpm\" ; // Hello from the Enterprise Javascript delegate console . info ( \"Hello from the Javascript Engine!\" ); let execution = process . getExecutionContext (); process . setVariable ( execution . getId (), \"variable2\" , \"value2\" ); try { console . info ( \"variable1: \" + process . getVariable ( execution . getId (), \"variable1\" )); console . info ( \"variable2: \" + process . getVariable ( execution . getId (), \"variable2\" )); } catch ( e ) { if ( e instanceof Error ) { console . error ( e . message ); } else { console . error ( \"Something went wrong\" , e ) } } Delegate parameters: Type: ServiceType Class: org.eclipse.dirigible.bpm.flowable.DirigibleCallDelegate Field for Service Callback: handler (e.g. 'bpmFlows/hello.js') Field for Service Engine Type: type (e.g. 'javascript') Functions Function Description Returns start(key, parameters) Starts a process by its key and initial parameters and returns the process instance id string getExecutionContext() Returns the execution context object ExecutionContext Objects ExecutionContext Function Description Returns getId() Returns the id from the execution context string isActive() Returns the isActive flag from the execution context string isScope() Returns the isScope flag from the execution context string isConcurrent() Returns the isConcurrent flag from the execution context string isEnded() Returns the isEnded flag from the execution context string isEventScope() Returns the isEventScope flag from the execution context string isMultiInstanceRoot() Returns the isMultiInstanceRoot flag from the execution context string isCountEnabled() Returns the isCountEnabled flag from the execution context string suspensionState() Returns the suspensionState flag from the execution context string startTime() Returns the start time from the execution context string eventSubscriptionCount() Returns the event subscription count from the execution context string taskCount() Returns the task count from the execution context string jobCount() Returns the job count from the execution context string timerJobCount() Returns the timer job count from the execution context string suspendedJobCount() Returns the suspended job count from the execution context string deadLetterJobCount() Returns the dead letter job count from the execution context string variableCount() Returns the variable count from the execution context string identityLinkCount() Returns the identity link count from the execution context string processDefinitionId() Returns the process definition id from the execution context string processDefinitionKey() Returns the process definition key from the execution context string activityId() Returns the activity id from the execution context string processInstanceId() Returns the process instance id from the execution context string parentId() Returns the parent process id from the execution context string rootProcessInstanceId() Returns the root process instance id from the execution context string forcedUpdate() Returns the forcedUpdate flag from the execution context string revision() Returns the revision from the execution context string tenantId() Returns the tenant id from the execution context string","title":"Business Process"},{"location":"bpm/process/#business-process","text":"Business Process object is used to access and manage the business processes from the underlying engine. Overview Module: bpm/process Definition: https://github.com/eclipse/dirigible/issues/227 Source: /bpm/process.ts Status: stable Group: bpm","title":"Business Process"},{"location":"bpm/process/#basic-usage","text":"The service which starts the process: ECMA6 CommonJS import { process } from \"sdk/bpm\" process . start ( \"hello\" , { variable1 : \"value1\" }); const process = require ( \"bpm/process\" ); process . start ( \"hello\" , { variable1 : \"value1\" }); Create a new Business Process Model file, open it with Code Editor and paste the process definiton: <?xml version='1.0' encoding='UTF-8'?> <definitions xmlns= \"http://www.omg.org/spec/BPMN/20100524/MODEL\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd= \"http://www.w3.org/2001/XMLSchema\" xmlns:flowable= \"http://flowable.org/bpmn\" xmlns:bpmndi= \"http://www.omg.org/spec/BPMN/20100524/DI\" xmlns:omgdc= \"http://www.omg.org/spec/DD/20100524/DC\" xmlns:omgdi= \"http://www.omg.org/spec/DD/20100524/DI\" typeLanguage= \"http://www.w3.org/2001/XMLSchema\" expressionLanguage= \"http://www.w3.org/1999/XPath\" targetNamespace= \"http://www.flowable.org/processdef\" > <process id= \"hello\" name= \"hello\" isExecutable= \"true\" > <startEvent id= \"sid-3334E861-7999-4B89-B8B0-11724BA17A3E\" /> <serviceTask id= \"sayHello\" name= \"SayHello\" flowable:class= \"org.eclipse.dirigible.components.engine.bpm.flowable.delegate.DirigibleCallDelegate\" > <extensionElements> <flowable:field name= \"handler\" > <flowable:string> <![CDATA[bpmFlows/hello.js]]> </flowable:string> </flowable:field> </extensionElements> </serviceTask> <sequenceFlow id= \"sid-797626AE-B2F6-4C00-ABEE-FB30ADC177E4\" sourceRef= \"sid-3334E861-7999-4B89-B8B0-11724BA17A3E\" targetRef= \"sayHello\" /> <endEvent id= \"sid-70B488C1-384A-4E19-8091-1B12D1AEC7FD\" /> <sequenceFlow id= \"sid-645847E8-C959-48BD-816B-2E9CC4A2F08A\" sourceRef= \"sayHello\" targetRef= \"sid-70B488C1-384A-4E19-8091-1B12D1AEC7FD\" /> </process> <bpmndi:BPMNDiagram id= \"BPMNDiagram_hello\" > <bpmndi:BPMNPlane bpmnElement= \"hello\" id= \"BPMNPlane_hello\" > <bpmndi:BPMNShape bpmnElement= \"sid-3334E861-7999-4B89-B8B0-11724BA17A3E\" id= \"BPMNShape_sid-3334E861-7999-4B89-B8B0-11724BA17A3E\" > <omgdc:Bounds height= \"30.0\" width= \"30.0\" x= \"103.0\" y= \"78.0\" /> </bpmndi:BPMNShape> <bpmndi:BPMNShape bpmnElement= \"sayHello\" id= \"BPMNShape_sayHello\" > <omgdc:Bounds height= \"80.0\" width= \"100.0\" x= \"300.0\" y= \"105.0\" /> </bpmndi:BPMNShape> <bpmndi:BPMNShape bpmnElement= \"sid-70B488C1-384A-4E19-8091-1B12D1AEC7FD\" id= \"BPMNShape_sid-70B488C1-384A-4E19-8091-1B12D1AEC7FD\" > <omgdc:Bounds height= \"28.0\" width= \"28.0\" x= \"562.0\" y= \"78.0\" /> </bpmndi:BPMNShape> <bpmndi:BPMNEdge bpmnElement= \"sid-797626AE-B2F6-4C00-ABEE-FB30ADC177E4\" id= \"BPMNEdge_sid-797626AE-B2F6-4C00-ABEE-FB30ADC177E4\" > <omgdi:waypoint x= \"133.0\" y= \"93.0\" /> <omgdi:waypoint x= \"201.0\" y= \"93.0\" /> <omgdi:waypoint x= \"201.0\" y= \"145.0\" /> <omgdi:waypoint x= \"300.0\" y= \"145.0\" /> </bpmndi:BPMNEdge> <bpmndi:BPMNEdge bpmnElement= \"sid-645847E8-C959-48BD-816B-2E9CC4A2F08A\" id= \"BPMNEdge_sid-645847E8-C959-48BD-816B-2E9CC4A2F08A\" > <omgdi:waypoint x= \"400.0\" y= \"145.0\" /> <omgdi:waypoint x= \"466.0\" y= \"145.0\" /> <omgdi:waypoint x= \"466.0\" y= \"92.0\" /> <omgdi:waypoint x= \"562.0\" y= \"92.0\" /> </bpmndi:BPMNEdge> </bpmndi:BPMNPlane> </bpmndi:BPMNDiagram> </definitions> In a new project called bpmFlows add the following delegate hello.mjs or hello.js respectively ECMA6 // manipulating process variables throughout the execution context import { process } from \"sdk/bpm\" ; // Hello from the Enterprise Javascript delegate console . info ( \"Hello from the Javascript Engine!\" ); let execution = process . getExecutionContext (); process . setVariable ( execution . getId (), \"variable2\" , \"value2\" ); try { console . info ( \"variable1: \" + process . getVariable ( execution . getId (), \"variable1\" )); console . info ( \"variable2: \" + process . getVariable ( execution . getId (), \"variable2\" )); } catch ( e ) { if ( e instanceof Error ) { console . error ( e . message ); } else { console . error ( \"Something went wrong\" , e ) } }","title":"Basic Usage"},{"location":"bpm/process/#delegate-parameters","text":"Type: ServiceType Class: org.eclipse.dirigible.bpm.flowable.DirigibleCallDelegate Field for Service Callback: handler (e.g. 'bpmFlows/hello.js') Field for Service Engine Type: type (e.g. 'javascript')","title":"Delegate parameters:"},{"location":"bpm/process/#functions","text":"Function Description Returns start(key, parameters) Starts a process by its key and initial parameters and returns the process instance id string getExecutionContext() Returns the execution context object ExecutionContext","title":"Functions"},{"location":"bpm/process/#objects","text":"","title":"Objects"},{"location":"bpm/process/#executioncontext","text":"Function Description Returns getId() Returns the id from the execution context string isActive() Returns the isActive flag from the execution context string isScope() Returns the isScope flag from the execution context string isConcurrent() Returns the isConcurrent flag from the execution context string isEnded() Returns the isEnded flag from the execution context string isEventScope() Returns the isEventScope flag from the execution context string isMultiInstanceRoot() Returns the isMultiInstanceRoot flag from the execution context string isCountEnabled() Returns the isCountEnabled flag from the execution context string suspensionState() Returns the suspensionState flag from the execution context string startTime() Returns the start time from the execution context string eventSubscriptionCount() Returns the event subscription count from the execution context string taskCount() Returns the task count from the execution context string jobCount() Returns the job count from the execution context string timerJobCount() Returns the timer job count from the execution context string suspendedJobCount() Returns the suspended job count from the execution context string deadLetterJobCount() Returns the dead letter job count from the execution context string variableCount() Returns the variable count from the execution context string identityLinkCount() Returns the identity link count from the execution context string processDefinitionId() Returns the process definition id from the execution context string processDefinitionKey() Returns the process definition key from the execution context string activityId() Returns the activity id from the execution context string processInstanceId() Returns the process instance id from the execution context string parentId() Returns the parent process id from the execution context string rootProcessInstanceId() Returns the root process instance id from the execution context string forcedUpdate() Returns the forcedUpdate flag from the execution context string revision() Returns the revision from the execution context string tenantId() Returns the tenant id from the execution context string","title":"ExecutionContext"},{"location":"builtin/console/","text":"Console Console object is used to write messages to the default logging output. It has several log levels INFO , WARNING , ERROR and DEBUG . Overview Module: built-in Status: stable Group: core Basic Usage const text = \"Hello World!\" ; console . info ( `Info message ${ text } .` ); console . error ( `Error message ${ text } .` ); console . warn ( `Warning message ${ text } .` ); console . debug ( `Debug message ${ text } .` ); console . log ( `Log message ${ text } .` ); Functions Function Description Returns log(message) Logs a raw message with level INFO - info(message) Logs a message with level INFO - warn(message) Logs a message with level WARN - error(message) Logs a message with level ERROR - debug(message) Logs a message with level DEBUG -","title":"Console"},{"location":"builtin/console/#console","text":"Console object is used to write messages to the default logging output. It has several log levels INFO , WARNING , ERROR and DEBUG . Overview Module: built-in Status: stable Group: core","title":"Console"},{"location":"builtin/console/#basic-usage","text":"const text = \"Hello World!\" ; console . info ( `Info message ${ text } .` ); console . error ( `Error message ${ text } .` ); console . warn ( `Warning message ${ text } .` ); console . debug ( `Debug message ${ text } .` ); console . log ( `Log message ${ text } .` );","title":"Basic Usage"},{"location":"builtin/console/#functions","text":"Function Description Returns log(message) Logs a raw message with level INFO - info(message) Logs a message with level INFO - warn(message) Logs a message with level WARN - error(message) Logs a message with level ERROR - debug(message) Logs a message with level DEBUG -","title":"Functions"},{"location":"cache/cache/","text":"Cache API Cache object is used to access and manage the cache from the underlying engine. Overview Module: sdk/cache Source: cache.ts Status: stable Group: api Basic Usage The service which interacts with the cache: ECMA6 import { Cache } from \"sdk/cache\" ; Cache . set ( \"key\" , \"value\" ); let value = Cache . get ( \"key\" ); let exists = Cache . contains ( \"key\" ); Cache . delete ( \"key\" ); Cache . clear (); Functions Function Description Returns contains(key) Checks if the cache contains a specific key boolean get(key) Retrieves the value associated with a specific key from the cache any / undefined set(key, data) Stores a value in the cache under a specific key void delete(key) Deletes the value associated with a specific key from the cache void clear() Clears all entries from the cache void","title":"Cache API"},{"location":"cache/cache/#cache-api","text":"Cache object is used to access and manage the cache from the underlying engine. Overview Module: sdk/cache Source: cache.ts Status: stable Group: api","title":"Cache API"},{"location":"cache/cache/#basic-usage","text":"The service which interacts with the cache: ECMA6 import { Cache } from \"sdk/cache\" ; Cache . set ( \"key\" , \"value\" ); let value = Cache . get ( \"key\" ); let exists = Cache . contains ( \"key\" ); Cache . delete ( \"key\" ); Cache . clear ();","title":"Basic Usage"},{"location":"cache/cache/#functions","text":"Function Description Returns contains(key) Checks if the cache contains a specific key boolean get(key) Retrieves the value associated with a specific key from the cache any / undefined set(key, data) Stores a value in the cache under a specific key void delete(key) Deletes the value associated with a specific key from the cache void clear() Clears all entries from the cache void","title":"Functions"},{"location":"cms/cmis/","text":"CMIS CMIS object is used for access of the underlying Content Management System (CMS) with CMIS API . Overview Module: cms/cmis Definition: https://github.com/eclipse/dirigible/issues/178 Source: /cms/cmis.ts Status: stable Group: cms Basic Usage ECMA6 import { cmis } from \"sdk/cms\" ; import { response } from \"sdk/http\" ; import { streams } from \"sdk/io\" ; let cmisSession = cmis . getSession (); let rootFolder = cmisSession . getRootFolder (); let children = rootFolder . getChildren (); response . println ( \"Listing the children of the root folder:\" ); for ( let i in children ) { response . println ( \"Object ID: \" + children [ i ]. getId ()); response . println ( \"Object Name: \" + children [ i ]. getName ()); } const textFileName = \"test.txt\" ; response . println ( \"Creating a simple text file, \" + textFileName ); const mimetype = \"text/plain; charset=UTF-8\" ; let content = \"This is some test content.\" ; let filename = textFileName ; let outputStream = streams . createByteArrayOutputStream (); outputStream . writeText ( content ); let bytes = outputStream . getBytes (); let inputStream = streams . createByteArrayInputStream ( bytes ); let contentStream = cmisSession . getObjectFactory (). createContentStream ( filename , bytes . length , mimetype , inputStream ); let properties = { \"cmis:name\" : \"\" , \"cmis:objectTypeId\" : \"\" }; properties [ cmis . OBJECT_TYPE_ID ] = cmis . OBJECT_TYPE_DOCUMENT ; properties [ cmis . NAME ] = filename ; let newDocument ; try { newDocument = rootFolder . createDocument ( properties , contentStream , cmis . VERSIONING_STATE_MAJOR ); } catch ( e ) { response . println ( \"Error: \" + e ); } let documentId = newDocument ? . getId (); response . println ( \"Document ID: \" + documentId ); children = rootFolder . getChildren (); response . println ( \"Listing the children of the root folder again:\" ); for ( let i in children ) { response . println ( \"Object ID: \" + children [ i ]. getId ()); response . println ( \"Object Name: \" + children [ i ]. getName ()); response . println ( \"Object Type: \" + JSON . stringify ( children [ i ]. getType (). getId (). toString ())); } // Get the contents of the file let doc ; if ( documentId !== undefined ) { doc = cmisSession . getObject ( documentId ); } else { response . println ( \"No content\" ); } contentStream = doc ? . getContentStream (); // returns null if the document has no content if ( contentStream !== null ) { content = contentStream . getStream (). readText (); response . println ( \"Contents of \" + filename + \" are: \" + content ); } else { response . println ( \"No content.\" ); } response . println ( \"Deleting the newly created document\" ); if ( newDocument ) { newDocument . delete (); } response . flush (); response . close (); Functions Function Description Returns getSession() Returns the CMIS connection session to the CMS system Session getAccessDefinitions(path, method) Returns array of CMIS access constraints for the specified path and method array of objects Objects Session Function Description Returns getRepositoryInfo() Returns the information about the CMIS repository RepositoryInfo getObjectFactory() Returns the ObjectFactory utility ObjectFactory getRootFolder() Returns the root folder of this repository Folder getObject() Returns a CMIS Object by name CmisObject getObjectByPath() Returns a CMIS Object by path CmisObject RepositoryInfo Function Description Returns getId() Returns the ID of the CMIS repository string getName() Returns the Name of the CMIS repository string ObjectFactory Function Description Returns createContentStream() Returns a newly created ContentStream object ContentStream ContentStream Function Description Returns getStream() Returns the InputStream of this ContentStream object streams.InputStream CmisObject Function Description Returns getId() Returns the ID of this CmisObject string getName() Returns the Name of this CmisObject string getType() Returns the Type of this CmisObject string delete() Deletes this CmisObject string rename(newName) Renames this CmisObject - Folder Function Description Returns getId() Returns the ID of this Folder string getName() Returns the Name of this Folder string getPath() Returns the Path of this Folder string createFolder(properties) Creates a new folder under this Folder Folder createDocument(properties, contentStream, versioningState) Creates a new document under this Folder Document getChildren() Returns an array of CmisObject sub-elements of this Folder array of CmisObject isRootFolder() Returns true if this Folder is a root folder and false otherwise boolean getFolderParent() Returns the parent Folder of this Folder Folder delete() Deletes this Folder string rename(newName) Renames this Folder - Document Function Description Returns getId() Returns the ID of this Document string getName() Returns the Name of this Document string delete() Deletes this Document string getContentStream() Returns the ContentStream representing the contents of this Document ContentStream rename(newName) Renames this Document - Constants Base Constant Description Type NAME Value is cmis:name string OBJECT_ID Value is cmis:objectId string OBJECT_TYPE_ID Value is cmis:objectTypeId string BASE_TYPE_ID Value is cmis:baseTypeId string CREATED_BY Value is cmis:createdBy string CREATION_DATE Value is cmis:creationDate string LAST_MODIFIED_BY Value is cmis:lastModifiedBy string LAST_MODIFICATION_DATE Value is cmis:lastModificationDate string CHANGE_TOKEN Value is mis:changeToken string Document Constant Description Type IS_IMMUTABLE Value is cmis:isImmutable string IS_LATEST_VERSION Value is cmis:isLatestVersion string IS_MAJOR_VERSION Value is cmis:isMajorVersion string IS_LATEST_MAJOR_VERSION Value is cmis:isLatestMajorVersion string VERSION_LABEL Value is cmis:versionLabel string VERSION_SERIES_ID Value is ccmis:versionSeriesId string IS_VERSION_SERIES_CHECKED_OUT Value is cmis:isVersionSeriesCheckedOut string VERSION_SERIES_CHECKED_OUT_BY Value is cmis:versionSeriesCheckedOutBy string VERSION_SERIES_CHECKED_OUT_ID Value is cmis:versionSeriesCheckedOutId string CHECKIN_COMMENT Value is cmis:checkinComment string CONTENT_STREAM_LENGTH Value is cmis:contentStreamLength string CONTENT_STREAM_MIME_TYPE Value is cmis:contentStreamMimeType string CONTENT_STREAM_FILE_NAME Value is cmis:contentStreamFileName string CONTENT_STREAM_ID Value is cmis:contentStreamId string Folder Constant Description Type PARENT_ID Value is cmis:parentId string ALLOWED_CHILD_OBJECT_TYPE_IDS Value is cmis:allowedChildObjectTypeIds string PATH Value is cmis:path string Relationship Constant Description Type SOURCE_ID Value is cmis:sourceId string TARGET_ID Value is cmis:targetId string Relationship Constant Description Type POLICY_TEXT Value is cmis:policyText string Versioning States Constant Description Type VERSIONING_STATE_NONE Value is none string VERSIONING_STATE_MAJOR Value is major string VERSIONING_STATE_MINOR Value is minor string VERSIONING_STATE_CHECKEDOUT Value is checkedout string Object Types Constant Description Type OBJECT_TYPE_DOCUMENT Value is cmis:document string OBJECT_TYPE_FOLDER Value is cmis:folder string OBJECT_TYPE_RELATIONSHIP Value is cmis:relationship string OBJECT_TYPE_POLICY Value is cmis:policy string OBJECT_TYPE_ITEM Value is cmis:item string OBJECT_TYPE_SECONDARY Value is cmis:secondary string","title":"CMIS"},{"location":"cms/cmis/#cmis","text":"CMIS object is used for access of the underlying Content Management System (CMS) with CMIS API . Overview Module: cms/cmis Definition: https://github.com/eclipse/dirigible/issues/178 Source: /cms/cmis.ts Status: stable Group: cms","title":"CMIS"},{"location":"cms/cmis/#basic-usage","text":"ECMA6 import { cmis } from \"sdk/cms\" ; import { response } from \"sdk/http\" ; import { streams } from \"sdk/io\" ; let cmisSession = cmis . getSession (); let rootFolder = cmisSession . getRootFolder (); let children = rootFolder . getChildren (); response . println ( \"Listing the children of the root folder:\" ); for ( let i in children ) { response . println ( \"Object ID: \" + children [ i ]. getId ()); response . println ( \"Object Name: \" + children [ i ]. getName ()); } const textFileName = \"test.txt\" ; response . println ( \"Creating a simple text file, \" + textFileName ); const mimetype = \"text/plain; charset=UTF-8\" ; let content = \"This is some test content.\" ; let filename = textFileName ; let outputStream = streams . createByteArrayOutputStream (); outputStream . writeText ( content ); let bytes = outputStream . getBytes (); let inputStream = streams . createByteArrayInputStream ( bytes ); let contentStream = cmisSession . getObjectFactory (). createContentStream ( filename , bytes . length , mimetype , inputStream ); let properties = { \"cmis:name\" : \"\" , \"cmis:objectTypeId\" : \"\" }; properties [ cmis . OBJECT_TYPE_ID ] = cmis . OBJECT_TYPE_DOCUMENT ; properties [ cmis . NAME ] = filename ; let newDocument ; try { newDocument = rootFolder . createDocument ( properties , contentStream , cmis . VERSIONING_STATE_MAJOR ); } catch ( e ) { response . println ( \"Error: \" + e ); } let documentId = newDocument ? . getId (); response . println ( \"Document ID: \" + documentId ); children = rootFolder . getChildren (); response . println ( \"Listing the children of the root folder again:\" ); for ( let i in children ) { response . println ( \"Object ID: \" + children [ i ]. getId ()); response . println ( \"Object Name: \" + children [ i ]. getName ()); response . println ( \"Object Type: \" + JSON . stringify ( children [ i ]. getType (). getId (). toString ())); } // Get the contents of the file let doc ; if ( documentId !== undefined ) { doc = cmisSession . getObject ( documentId ); } else { response . println ( \"No content\" ); } contentStream = doc ? . getContentStream (); // returns null if the document has no content if ( contentStream !== null ) { content = contentStream . getStream (). readText (); response . println ( \"Contents of \" + filename + \" are: \" + content ); } else { response . println ( \"No content.\" ); } response . println ( \"Deleting the newly created document\" ); if ( newDocument ) { newDocument . delete (); } response . flush (); response . close ();","title":"Basic Usage"},{"location":"cms/cmis/#functions","text":"Function Description Returns getSession() Returns the CMIS connection session to the CMS system Session getAccessDefinitions(path, method) Returns array of CMIS access constraints for the specified path and method array of objects","title":"Functions"},{"location":"cms/cmis/#objects","text":"","title":"Objects"},{"location":"cms/cmis/#session","text":"Function Description Returns getRepositoryInfo() Returns the information about the CMIS repository RepositoryInfo getObjectFactory() Returns the ObjectFactory utility ObjectFactory getRootFolder() Returns the root folder of this repository Folder getObject() Returns a CMIS Object by name CmisObject getObjectByPath() Returns a CMIS Object by path CmisObject","title":"Session"},{"location":"cms/cmis/#repositoryinfo","text":"Function Description Returns getId() Returns the ID of the CMIS repository string getName() Returns the Name of the CMIS repository string","title":"RepositoryInfo"},{"location":"cms/cmis/#objectfactory","text":"Function Description Returns createContentStream() Returns a newly created ContentStream object ContentStream","title":"ObjectFactory"},{"location":"cms/cmis/#contentstream","text":"Function Description Returns getStream() Returns the InputStream of this ContentStream object streams.InputStream","title":"ContentStream"},{"location":"cms/cmis/#cmisobject","text":"Function Description Returns getId() Returns the ID of this CmisObject string getName() Returns the Name of this CmisObject string getType() Returns the Type of this CmisObject string delete() Deletes this CmisObject string rename(newName) Renames this CmisObject -","title":"CmisObject"},{"location":"cms/cmis/#folder","text":"Function Description Returns getId() Returns the ID of this Folder string getName() Returns the Name of this Folder string getPath() Returns the Path of this Folder string createFolder(properties) Creates a new folder under this Folder Folder createDocument(properties, contentStream, versioningState) Creates a new document under this Folder Document getChildren() Returns an array of CmisObject sub-elements of this Folder array of CmisObject isRootFolder() Returns true if this Folder is a root folder and false otherwise boolean getFolderParent() Returns the parent Folder of this Folder Folder delete() Deletes this Folder string rename(newName) Renames this Folder -","title":"Folder"},{"location":"cms/cmis/#document","text":"Function Description Returns getId() Returns the ID of this Document string getName() Returns the Name of this Document string delete() Deletes this Document string getContentStream() Returns the ContentStream representing the contents of this Document ContentStream rename(newName) Renames this Document -","title":"Document"},{"location":"cms/cmis/#constants","text":"","title":"Constants"},{"location":"cms/cmis/#base","text":"Constant Description Type NAME Value is cmis:name string OBJECT_ID Value is cmis:objectId string OBJECT_TYPE_ID Value is cmis:objectTypeId string BASE_TYPE_ID Value is cmis:baseTypeId string CREATED_BY Value is cmis:createdBy string CREATION_DATE Value is cmis:creationDate string LAST_MODIFIED_BY Value is cmis:lastModifiedBy string LAST_MODIFICATION_DATE Value is cmis:lastModificationDate string CHANGE_TOKEN Value is mis:changeToken string","title":"Base"},{"location":"cms/cmis/#document_1","text":"Constant Description Type IS_IMMUTABLE Value is cmis:isImmutable string IS_LATEST_VERSION Value is cmis:isLatestVersion string IS_MAJOR_VERSION Value is cmis:isMajorVersion string IS_LATEST_MAJOR_VERSION Value is cmis:isLatestMajorVersion string VERSION_LABEL Value is cmis:versionLabel string VERSION_SERIES_ID Value is ccmis:versionSeriesId string IS_VERSION_SERIES_CHECKED_OUT Value is cmis:isVersionSeriesCheckedOut string VERSION_SERIES_CHECKED_OUT_BY Value is cmis:versionSeriesCheckedOutBy string VERSION_SERIES_CHECKED_OUT_ID Value is cmis:versionSeriesCheckedOutId string CHECKIN_COMMENT Value is cmis:checkinComment string CONTENT_STREAM_LENGTH Value is cmis:contentStreamLength string CONTENT_STREAM_MIME_TYPE Value is cmis:contentStreamMimeType string CONTENT_STREAM_FILE_NAME Value is cmis:contentStreamFileName string CONTENT_STREAM_ID Value is cmis:contentStreamId string","title":"Document"},{"location":"cms/cmis/#folder_1","text":"Constant Description Type PARENT_ID Value is cmis:parentId string ALLOWED_CHILD_OBJECT_TYPE_IDS Value is cmis:allowedChildObjectTypeIds string PATH Value is cmis:path string","title":"Folder"},{"location":"cms/cmis/#relationship","text":"Constant Description Type SOURCE_ID Value is cmis:sourceId string TARGET_ID Value is cmis:targetId string","title":"Relationship"},{"location":"cms/cmis/#relationship_1","text":"Constant Description Type POLICY_TEXT Value is cmis:policyText string","title":"Relationship"},{"location":"cms/cmis/#versioning-states","text":"Constant Description Type VERSIONING_STATE_NONE Value is none string VERSIONING_STATE_MAJOR Value is major string VERSIONING_STATE_MINOR Value is minor string VERSIONING_STATE_CHECKEDOUT Value is checkedout string","title":"Versioning States"},{"location":"cms/cmis/#object-types","text":"Constant Description Type OBJECT_TYPE_DOCUMENT Value is cmis:document string OBJECT_TYPE_FOLDER Value is cmis:folder string OBJECT_TYPE_RELATIONSHIP Value is cmis:relationship string OBJECT_TYPE_POLICY Value is cmis:policy string OBJECT_TYPE_ITEM Value is cmis:item string OBJECT_TYPE_SECONDARY Value is cmis:secondary string","title":"Object Types"},{"location":"core/configurations/","text":"Configurations Overview Module: core/configurations Source: /core/configurations.ts Status: stable Group: core Basic Usage ECMA6 import { response } from \"sdk/http\" ; import { configurations } from \"sdk/core\" ; configurations . set ( \"ENV_VAR_1\" , \"ENV_VAR_1\" ); configurations . set ( \"ENV_VAR_2\" , \"ENV_VAR_2\" ); let credentials = { envVar1 : configurations . get ( \"ENV_VAR_1\" ), envVar2 : configurations . get ( \"ENV_VAR_2\" ) }; response . println ( JSON . stringify ( credentials )); Functions Function Description Returns get(key, defaultValue)() Returns the value for the specified key, or the default value string set(key, value) Sets a value, for the specified key - getKeys() Returns an arrays of keys array of string load(path) Loads a configuration from a properties file at path - update() Updates the loaded configurations -","title":"Configurations"},{"location":"core/configurations/#configurations","text":"Overview Module: core/configurations Source: /core/configurations.ts Status: stable Group: core","title":"Configurations"},{"location":"core/configurations/#basic-usage","text":"ECMA6 import { response } from \"sdk/http\" ; import { configurations } from \"sdk/core\" ; configurations . set ( \"ENV_VAR_1\" , \"ENV_VAR_1\" ); configurations . set ( \"ENV_VAR_2\" , \"ENV_VAR_2\" ); let credentials = { envVar1 : configurations . get ( \"ENV_VAR_1\" ), envVar2 : configurations . get ( \"ENV_VAR_2\" ) }; response . println ( JSON . stringify ( credentials ));","title":"Basic Usage"},{"location":"core/configurations/#functions","text":"Function Description Returns get(key, defaultValue)() Returns the value for the specified key, or the default value string set(key, value) Sets a value, for the specified key - getKeys() Returns an arrays of keys array of string load(path) Loads a configuration from a properties file at path - update() Updates the loaded configurations -","title":"Functions"},{"location":"core/context/","text":"Context Context object is used to store and manage properties for a single execution flow (with or without HTTP request) Overview Module: core/context Definition: https://github.com/eclipse/dirigible/issues/31 Source: /core/context.ts Status: stable Group: core Basic Usage ECMA6 import { context } from \"sdk/core\" ; import { response } from \"sdk/http\" ; context . set ( \"attr1\" , \"value1\" ); let attr = context . get ( \"attr1\" ); response . println ( \"[Attribute]: \" + attr ); response . flush (); response . close (); Functions Function Description Returns get(key) Returns the value per key from the context parameters string set(key, value) Sets the value per key to the context parameters -","title":"Context"},{"location":"core/context/#context","text":"Context object is used to store and manage properties for a single execution flow (with or without HTTP request) Overview Module: core/context Definition: https://github.com/eclipse/dirigible/issues/31 Source: /core/context.ts Status: stable Group: core","title":"Context"},{"location":"core/context/#basic-usage","text":"ECMA6 import { context } from \"sdk/core\" ; import { response } from \"sdk/http\" ; context . set ( \"attr1\" , \"value1\" ); let attr = context . get ( \"attr1\" ); response . println ( \"[Attribute]: \" + attr ); response . flush (); response . close ();","title":"Basic Usage"},{"location":"core/context/#functions","text":"Function Description Returns get(key) Returns the value per key from the context parameters string set(key, value) Sets the value per key to the context parameters -","title":"Functions"},{"location":"core/env/","text":"Env Env object is used for access of the environment variables. Overview Module: core/env Definition: https://github.com/eclipse/dirigible/issues/29 Source: /core/env.js Status: stable Group: core Basic Usage ECMA6 import { env } from \"sdk/core\" ; import { response } from \"sdk/http\" ; let os = env . get ( \"os.name\" ); response . println ( \"[OS]: \" + os ); response . flush (); response . close (); Functions Function Description Returns get(key) Returns the value per key from the environments variables string list() Returns the list of the environments variables in JSON formatted string string","title":"Env"},{"location":"core/env/#env","text":"Env object is used for access of the environment variables. Overview Module: core/env Definition: https://github.com/eclipse/dirigible/issues/29 Source: /core/env.js Status: stable Group: core","title":"Env"},{"location":"core/env/#basic-usage","text":"ECMA6 import { env } from \"sdk/core\" ; import { response } from \"sdk/http\" ; let os = env . get ( \"os.name\" ); response . println ( \"[OS]: \" + os ); response . flush (); response . close ();","title":"Basic Usage"},{"location":"core/env/#functions","text":"Function Description Returns get(key) Returns the value per key from the environments variables string list() Returns the list of the environments variables in JSON formatted string string","title":"Functions"},{"location":"core/globals/","text":"Globals Globals object is used to store and manage properties in the global store. Overview Module: core/globals Definition: https://github.com/eclipse/dirigible/issues/30 Source: /core/globals.js Status: stable Group: core Basic Usage ECMA6 import { globals } from \"sdk/core\" ; import { response } from \"sdk/http\" ; globals . set ( \"attr1\" , \"value1\" ); let attr = globals . get ( \"attr1\" ); response . println ( \"[Attribute]: \" + attr ); response . flush (); response . close (); Functions Function Description Returns get(key) Returns the value per key from the global parameters string set(key, value) Sets the value per key to the global parameters -","title":"Globals"},{"location":"core/globals/#globals","text":"Globals object is used to store and manage properties in the global store. Overview Module: core/globals Definition: https://github.com/eclipse/dirigible/issues/30 Source: /core/globals.js Status: stable Group: core","title":"Globals"},{"location":"core/globals/#basic-usage","text":"ECMA6 import { globals } from \"sdk/core\" ; import { response } from \"sdk/http\" ; globals . set ( \"attr1\" , \"value1\" ); let attr = globals . get ( \"attr1\" ); response . println ( \"[Attribute]: \" + attr ); response . flush (); response . close ();","title":"Basic Usage"},{"location":"core/globals/#functions","text":"Function Description Returns get(key) Returns the value per key from the global parameters string set(key, value) Sets the value per key to the global parameters -","title":"Functions"},{"location":"database/dao/","text":"DAO Simplified database access objects utility. Overview Module: db/dao Definition: https://github.com/eclipse/dirigible/issues/84 Source: /db/dao.js Status: stable Group: core Basic Usage ECMA6 import { dao } from \"sdk/db\" ; //create a DAO from configuration const customers = dao . create ({ table : \"CUSTOMERS\" , properties : [{ name : \"id\" , column : \"ID\" , type : \"BIGINT\" , id : true }, { name : \"orgName\" , column : \"ORG_NAME\" , type : \"VARCHAR\" , required : true }, { name : \"employeesNumber\" , column : \"ORG_EMP_NUM\" , type : \"INTEGER\" , required : true }, { name : \"orgDescription\" , column : \"ORG_DESCR\" , type : \"VARCHAR\" , required : false }] }); //Create CUSTOMERS table customers . createTable (); try { //Create a new customer entity let customerId = customers . insert ({ orgName : \"ACME\" , employeesNumber : 1000 }); //List all customer entities let customersList = customers . list (); //Get a particular customer entity by its id let customer = customers . find ( customerId ); //Update a customer entity property customer . orgDescription = \"ACME is a company\" ; customers . update ( customer ); //Delete a customer entity customers . remove ( customerId ); } finally { //Drop CUSTOMERS table customers . dropTable (); } Advance Usage Filter Select Limit and Offset Sort and Order To apply filter use the $filter property with the followin options: equals - exact match of the given value(s) (single value or array of values) . notEquals - exclude for the given value(s) from the result (single value or array of values) . contains - performs LIKE %...% operation (case sensitive) . greaterThan - performs comparison operation ( > ) . lessThan - performs comparison operation ( < ) . greaterThanOrEqual - performs comparison operation ( >= ) . lessThanOrEqual - performs comparison operation ( <= ) . Note The \"key\" (e.g. Team , Country , etc.) should match a property in the DAO definition. DAO Definition import { dao as daoApi } from \"sdk/db\" ; const dao = daoApi . create ({ table : \"SAMPLE_EMPLOYEE\" , properties : [ { name : \"Id\" , column : \"EMPLOYEE_ID\" , type : \"INTEGER\" , id : true , autoIncrement : true , }, { name : \"Name\" , column : \"EMPLOYEE_NAME\" , type : \"VARCHAR\" , }, { name : \"Email\" , column : \"EMPLOYEE_EMAIL\" , type : \"VARCHAR\" , }, { name : \"Phone\" , column : \"EMPLOYEE_PHONE\" , type : \"VARCHAR\" , }, { name : \"Address\" , column : \"EMPLOYEE_ADDRESS\" , type : \"VARCHAR\" , }, { name : \"PostCode\" , column : \"EMPLOYEE_POSTCODE\" , type : \"VARCHAR\" , }, { name : \"City\" , column : \"EMPLOYEE_CITY\" , type : \"VARCHAR\" , }, { name : \"Country\" , column : \"EMPLOYEE_COUNTRY\" , type : \"VARCHAR\" , }, { name : \"Team\" , column : \"EMPLOYEE_TEAM\" , type : \"INTEGER\" , }, { name : \"Company\" , column : \"EMPLOYEE_COMPANY\" , type : \"INTEGER\" , }, { name : \"Vacation\" , column : \"EMPLOYEE_VACATION\" , type : \"INTEGER\" , } ] }); const data = dao . list ({ $filter : { equals : { Team : [ 11 , 12 , 18 ] }, notEquals : { Country : [ \"Indonesia\" , \"Chile\" ], Company : 4 }, contains : { Address : \"Cedar St\" , City : \"town\" }, greaterThan : { Vacation : 20 }, // lessThan: { // Vacation: 35 // }, // greaterThanOrEqual: { // Vacation: 20 // }, lessThanOrEqual : { Vacation : 35 } } }); The following SQL is being executed: SELECT * FROM \"SAMPLE_EMPLOYEE\" WHERE ( \"EMPLOYEE_TEAM\" IN ( ? , ? , ? )) AND ( \"EMPLOYEE_COUNTRY\" NOT IN ( ? , ? )) AND ( \"EMPLOYEE_COMPANY\" != ? ) AND ( \"EMPLOYEE_ADDRESS\" LIKE ? ) AND ( \"EMPLOYEE_CITY\" LIKE ? ) AND ( \"EMPLOYEE_VACATION\" > ? ) AND ( \"EMPLOYEE_VACATION\" <= ? ) The $select property can be used to select only a set of properties/columns from the DAO query. Note The selected \"key\" (e.g. Name , Country , etc.) should match a property in the DAO definition. DAO Definition import { dao as daoApi } from \"sdk/db\" ; const dao = daoApi . create ({ table : \"SAMPLE_EMPLOYEE\" , properties : [ { name : \"Id\" , column : \"EMPLOYEE_ID\" , type : \"INTEGER\" , id : true , autoIncrement : true , }, { name : \"Name\" , column : \"EMPLOYEE_NAME\" , type : \"VARCHAR\" , }, { name : \"Email\" , column : \"EMPLOYEE_EMAIL\" , type : \"VARCHAR\" , }, { name : \"Phone\" , column : \"EMPLOYEE_PHONE\" , type : \"VARCHAR\" , }, { name : \"Address\" , column : \"EMPLOYEE_ADDRESS\" , type : \"VARCHAR\" , }, { name : \"PostCode\" , column : \"EMPLOYEE_POSTCODE\" , type : \"VARCHAR\" , }, { name : \"City\" , column : \"EMPLOYEE_CITY\" , type : \"VARCHAR\" , }, { name : \"Country\" , column : \"EMPLOYEE_COUNTRY\" , type : \"VARCHAR\" , }, { name : \"Team\" , column : \"EMPLOYEE_TEAM\" , type : \"INTEGER\" , }, { name : \"Company\" , column : \"EMPLOYEE_COMPANY\" , type : \"INTEGER\" , }, { name : \"Vacation\" , column : \"EMPLOYEE_VACATION\" , type : \"INTEGER\" , } ] }); const data = dao . list ({ $select : [ \"Name\" , \"Country\" , \"Company\" ] }); The following SQL is being executed: SELECT \"EMPLOYEE_NAME\" , \"EMPLOYEE_COUNTRY\" , \"EMPLOYEE_COMPANY\" FROM \"SAMPLE_EMPLOYEE\" The $limit and $offset properties can be used together to achieve pagination of large data sets. Note Values for both $limit and $offset should be provided. DAO Definition import { dao as daoApi } from \"sdk/db\" ; const dao = daoApi . create ({ table : \"SAMPLE_EMPLOYEE\" , properties : [ { name : \"Id\" , column : \"EMPLOYEE_ID\" , type : \"INTEGER\" , id : true , autoIncrement : true , }, { name : \"Name\" , column : \"EMPLOYEE_NAME\" , type : \"VARCHAR\" , }, { name : \"Email\" , column : \"EMPLOYEE_EMAIL\" , type : \"VARCHAR\" , }, { name : \"Phone\" , column : \"EMPLOYEE_PHONE\" , type : \"VARCHAR\" , }, { name : \"Address\" , column : \"EMPLOYEE_ADDRESS\" , type : \"VARCHAR\" , }, { name : \"PostCode\" , column : \"EMPLOYEE_POSTCODE\" , type : \"VARCHAR\" , }, { name : \"City\" , column : \"EMPLOYEE_CITY\" , type : \"VARCHAR\" , }, { name : \"Country\" , column : \"EMPLOYEE_COUNTRY\" , type : \"VARCHAR\" , }, { name : \"Team\" , column : \"EMPLOYEE_TEAM\" , type : \"INTEGER\" , }, { name : \"Company\" , column : \"EMPLOYEE_COMPANY\" , type : \"INTEGER\" , }, { name : \"Vacation\" , column : \"EMPLOYEE_VACATION\" , type : \"INTEGER\" , } ] }); const data = dao . list ({ $limit : 50 , $offset : 0 , }); The following SQL is being executed: SELECT * FROM \"SAMPLE_EMPLOYEE\" LIMIT 50 OFFSET 0 The $sort and $order properties can be used together to sort the returned data. Note $sort - comma separated list of \"keys\" matching properties in the DAO definition (e.g. Country,City ) . $order - either asc or desc (the default order is asc ) . DAO Definition import { dao as daoApi } from \"sdk/db\" ; const dao = daoApi . create ({ table : \"SAMPLE_EMPLOYEE\" , properties : [ { name : \"Id\" , column : \"EMPLOYEE_ID\" , type : \"INTEGER\" , id : true , autoIncrement : true , }, { name : \"Name\" , column : \"EMPLOYEE_NAME\" , type : \"VARCHAR\" , }, { name : \"Email\" , column : \"EMPLOYEE_EMAIL\" , type : \"VARCHAR\" , }, { name : \"Phone\" , column : \"EMPLOYEE_PHONE\" , type : \"VARCHAR\" , }, { name : \"Address\" , column : \"EMPLOYEE_ADDRESS\" , type : \"VARCHAR\" , }, { name : \"PostCode\" , column : \"EMPLOYEE_POSTCODE\" , type : \"VARCHAR\" , }, { name : \"City\" , column : \"EMPLOYEE_CITY\" , type : \"VARCHAR\" , }, { name : \"Country\" , column : \"EMPLOYEE_COUNTRY\" , type : \"VARCHAR\" , }, { name : \"Team\" , column : \"EMPLOYEE_TEAM\" , type : \"INTEGER\" , }, { name : \"Company\" , column : \"EMPLOYEE_COMPANY\" , type : \"INTEGER\" , }, { name : \"Vacation\" , column : \"EMPLOYEE_VACATION\" , type : \"INTEGER\" , } ] }); const data = dao . list ({ $sort : \"Country,City\" , $order : \"desc\" , }); The following SQL is being executed: SELECT * FROM \"SAMPLE_EMPLOYEE\" ORDER BY \"EMPLOYEE_COUNTRY\" DESC , \"EMPLOYEE_CITY\" DESC Functions Function Description Returns create(configuration, loggerName?) Creates new DAO instances from configuraiton JS object, which can be either standard ORM definition or a standard dirigible table definition DAO Objects DAO Function Description Returns insert(entity) inserts array or entity and returns id (or ids of array of entities was supplied as input) any list(querySettings?) lists entities optionally constrained with the supplied query settings Array find(id, expand?, select?) returns an entity by its id(if any), optionally expanding inline the associations defined in expand and optionally constraining the entitiy properties to those specified in select Object update(entity) updates a persistent entity and returns for its dao chaining DAO remove(?id) delete entity by id, or array of ids, or delete all (if not argument is provided). --- count() returns the number of persisted entities Number createTable() Creates a table for persisting entities --- dropTable() Drops the entities table ---","title":"DAO"},{"location":"database/dao/#dao","text":"Simplified database access objects utility. Overview Module: db/dao Definition: https://github.com/eclipse/dirigible/issues/84 Source: /db/dao.js Status: stable Group: core","title":"DAO"},{"location":"database/dao/#basic-usage","text":"ECMA6 import { dao } from \"sdk/db\" ; //create a DAO from configuration const customers = dao . create ({ table : \"CUSTOMERS\" , properties : [{ name : \"id\" , column : \"ID\" , type : \"BIGINT\" , id : true }, { name : \"orgName\" , column : \"ORG_NAME\" , type : \"VARCHAR\" , required : true }, { name : \"employeesNumber\" , column : \"ORG_EMP_NUM\" , type : \"INTEGER\" , required : true }, { name : \"orgDescription\" , column : \"ORG_DESCR\" , type : \"VARCHAR\" , required : false }] }); //Create CUSTOMERS table customers . createTable (); try { //Create a new customer entity let customerId = customers . insert ({ orgName : \"ACME\" , employeesNumber : 1000 }); //List all customer entities let customersList = customers . list (); //Get a particular customer entity by its id let customer = customers . find ( customerId ); //Update a customer entity property customer . orgDescription = \"ACME is a company\" ; customers . update ( customer ); //Delete a customer entity customers . remove ( customerId ); } finally { //Drop CUSTOMERS table customers . dropTable (); }","title":"Basic Usage"},{"location":"database/dao/#advance-usage","text":"Filter Select Limit and Offset Sort and Order To apply filter use the $filter property with the followin options: equals - exact match of the given value(s) (single value or array of values) . notEquals - exclude for the given value(s) from the result (single value or array of values) . contains - performs LIKE %...% operation (case sensitive) . greaterThan - performs comparison operation ( > ) . lessThan - performs comparison operation ( < ) . greaterThanOrEqual - performs comparison operation ( >= ) . lessThanOrEqual - performs comparison operation ( <= ) . Note The \"key\" (e.g. Team , Country , etc.) should match a property in the DAO definition. DAO Definition import { dao as daoApi } from \"sdk/db\" ; const dao = daoApi . create ({ table : \"SAMPLE_EMPLOYEE\" , properties : [ { name : \"Id\" , column : \"EMPLOYEE_ID\" , type : \"INTEGER\" , id : true , autoIncrement : true , }, { name : \"Name\" , column : \"EMPLOYEE_NAME\" , type : \"VARCHAR\" , }, { name : \"Email\" , column : \"EMPLOYEE_EMAIL\" , type : \"VARCHAR\" , }, { name : \"Phone\" , column : \"EMPLOYEE_PHONE\" , type : \"VARCHAR\" , }, { name : \"Address\" , column : \"EMPLOYEE_ADDRESS\" , type : \"VARCHAR\" , }, { name : \"PostCode\" , column : \"EMPLOYEE_POSTCODE\" , type : \"VARCHAR\" , }, { name : \"City\" , column : \"EMPLOYEE_CITY\" , type : \"VARCHAR\" , }, { name : \"Country\" , column : \"EMPLOYEE_COUNTRY\" , type : \"VARCHAR\" , }, { name : \"Team\" , column : \"EMPLOYEE_TEAM\" , type : \"INTEGER\" , }, { name : \"Company\" , column : \"EMPLOYEE_COMPANY\" , type : \"INTEGER\" , }, { name : \"Vacation\" , column : \"EMPLOYEE_VACATION\" , type : \"INTEGER\" , } ] }); const data = dao . list ({ $filter : { equals : { Team : [ 11 , 12 , 18 ] }, notEquals : { Country : [ \"Indonesia\" , \"Chile\" ], Company : 4 }, contains : { Address : \"Cedar St\" , City : \"town\" }, greaterThan : { Vacation : 20 }, // lessThan: { // Vacation: 35 // }, // greaterThanOrEqual: { // Vacation: 20 // }, lessThanOrEqual : { Vacation : 35 } } }); The following SQL is being executed: SELECT * FROM \"SAMPLE_EMPLOYEE\" WHERE ( \"EMPLOYEE_TEAM\" IN ( ? , ? , ? )) AND ( \"EMPLOYEE_COUNTRY\" NOT IN ( ? , ? )) AND ( \"EMPLOYEE_COMPANY\" != ? ) AND ( \"EMPLOYEE_ADDRESS\" LIKE ? ) AND ( \"EMPLOYEE_CITY\" LIKE ? ) AND ( \"EMPLOYEE_VACATION\" > ? ) AND ( \"EMPLOYEE_VACATION\" <= ? ) The $select property can be used to select only a set of properties/columns from the DAO query. Note The selected \"key\" (e.g. Name , Country , etc.) should match a property in the DAO definition. DAO Definition import { dao as daoApi } from \"sdk/db\" ; const dao = daoApi . create ({ table : \"SAMPLE_EMPLOYEE\" , properties : [ { name : \"Id\" , column : \"EMPLOYEE_ID\" , type : \"INTEGER\" , id : true , autoIncrement : true , }, { name : \"Name\" , column : \"EMPLOYEE_NAME\" , type : \"VARCHAR\" , }, { name : \"Email\" , column : \"EMPLOYEE_EMAIL\" , type : \"VARCHAR\" , }, { name : \"Phone\" , column : \"EMPLOYEE_PHONE\" , type : \"VARCHAR\" , }, { name : \"Address\" , column : \"EMPLOYEE_ADDRESS\" , type : \"VARCHAR\" , }, { name : \"PostCode\" , column : \"EMPLOYEE_POSTCODE\" , type : \"VARCHAR\" , }, { name : \"City\" , column : \"EMPLOYEE_CITY\" , type : \"VARCHAR\" , }, { name : \"Country\" , column : \"EMPLOYEE_COUNTRY\" , type : \"VARCHAR\" , }, { name : \"Team\" , column : \"EMPLOYEE_TEAM\" , type : \"INTEGER\" , }, { name : \"Company\" , column : \"EMPLOYEE_COMPANY\" , type : \"INTEGER\" , }, { name : \"Vacation\" , column : \"EMPLOYEE_VACATION\" , type : \"INTEGER\" , } ] }); const data = dao . list ({ $select : [ \"Name\" , \"Country\" , \"Company\" ] }); The following SQL is being executed: SELECT \"EMPLOYEE_NAME\" , \"EMPLOYEE_COUNTRY\" , \"EMPLOYEE_COMPANY\" FROM \"SAMPLE_EMPLOYEE\" The $limit and $offset properties can be used together to achieve pagination of large data sets. Note Values for both $limit and $offset should be provided. DAO Definition import { dao as daoApi } from \"sdk/db\" ; const dao = daoApi . create ({ table : \"SAMPLE_EMPLOYEE\" , properties : [ { name : \"Id\" , column : \"EMPLOYEE_ID\" , type : \"INTEGER\" , id : true , autoIncrement : true , }, { name : \"Name\" , column : \"EMPLOYEE_NAME\" , type : \"VARCHAR\" , }, { name : \"Email\" , column : \"EMPLOYEE_EMAIL\" , type : \"VARCHAR\" , }, { name : \"Phone\" , column : \"EMPLOYEE_PHONE\" , type : \"VARCHAR\" , }, { name : \"Address\" , column : \"EMPLOYEE_ADDRESS\" , type : \"VARCHAR\" , }, { name : \"PostCode\" , column : \"EMPLOYEE_POSTCODE\" , type : \"VARCHAR\" , }, { name : \"City\" , column : \"EMPLOYEE_CITY\" , type : \"VARCHAR\" , }, { name : \"Country\" , column : \"EMPLOYEE_COUNTRY\" , type : \"VARCHAR\" , }, { name : \"Team\" , column : \"EMPLOYEE_TEAM\" , type : \"INTEGER\" , }, { name : \"Company\" , column : \"EMPLOYEE_COMPANY\" , type : \"INTEGER\" , }, { name : \"Vacation\" , column : \"EMPLOYEE_VACATION\" , type : \"INTEGER\" , } ] }); const data = dao . list ({ $limit : 50 , $offset : 0 , }); The following SQL is being executed: SELECT * FROM \"SAMPLE_EMPLOYEE\" LIMIT 50 OFFSET 0 The $sort and $order properties can be used together to sort the returned data. Note $sort - comma separated list of \"keys\" matching properties in the DAO definition (e.g. Country,City ) . $order - either asc or desc (the default order is asc ) . DAO Definition import { dao as daoApi } from \"sdk/db\" ; const dao = daoApi . create ({ table : \"SAMPLE_EMPLOYEE\" , properties : [ { name : \"Id\" , column : \"EMPLOYEE_ID\" , type : \"INTEGER\" , id : true , autoIncrement : true , }, { name : \"Name\" , column : \"EMPLOYEE_NAME\" , type : \"VARCHAR\" , }, { name : \"Email\" , column : \"EMPLOYEE_EMAIL\" , type : \"VARCHAR\" , }, { name : \"Phone\" , column : \"EMPLOYEE_PHONE\" , type : \"VARCHAR\" , }, { name : \"Address\" , column : \"EMPLOYEE_ADDRESS\" , type : \"VARCHAR\" , }, { name : \"PostCode\" , column : \"EMPLOYEE_POSTCODE\" , type : \"VARCHAR\" , }, { name : \"City\" , column : \"EMPLOYEE_CITY\" , type : \"VARCHAR\" , }, { name : \"Country\" , column : \"EMPLOYEE_COUNTRY\" , type : \"VARCHAR\" , }, { name : \"Team\" , column : \"EMPLOYEE_TEAM\" , type : \"INTEGER\" , }, { name : \"Company\" , column : \"EMPLOYEE_COMPANY\" , type : \"INTEGER\" , }, { name : \"Vacation\" , column : \"EMPLOYEE_VACATION\" , type : \"INTEGER\" , } ] }); const data = dao . list ({ $sort : \"Country,City\" , $order : \"desc\" , }); The following SQL is being executed: SELECT * FROM \"SAMPLE_EMPLOYEE\" ORDER BY \"EMPLOYEE_COUNTRY\" DESC , \"EMPLOYEE_CITY\" DESC","title":"Advance Usage"},{"location":"database/dao/#functions","text":"Function Description Returns create(configuration, loggerName?) Creates new DAO instances from configuraiton JS object, which can be either standard ORM definition or a standard dirigible table definition DAO","title":"Functions"},{"location":"database/dao/#objects","text":"","title":"Objects"},{"location":"database/dao/#dao_1","text":"Function Description Returns insert(entity) inserts array or entity and returns id (or ids of array of entities was supplied as input) any list(querySettings?) lists entities optionally constrained with the supplied query settings Array find(id, expand?, select?) returns an entity by its id(if any), optionally expanding inline the associations defined in expand and optionally constraining the entitiy properties to those specified in select Object update(entity) updates a persistent entity and returns for its dao chaining DAO remove(?id) delete entity by id, or array of ids, or delete all (if not argument is provided). --- count() returns the number of persisted entities Number createTable() Creates a table for persisting entities --- dropTable() Drops the entities table ---","title":"DAO"},{"location":"database/database/","text":"Database Standard access to the registered relational data sources. Overview Module: db/database Definition: https://github.com/eclipse/dirigible/issues/21 Source: /db/database.js Status: stable Group: core Basic Usage ECMA6 import { database } from \"sdk/db\" ; import { response } from \"sdk/http\" ; let connection = database . getConnection ( \"SystemDB\" ); try { let statement = connection . prepareStatement ( \"select * from DIRIGIBLE_EXTENSIONS\" ); let resultSet = statement . executeQuery (); while ( resultSet . next ()) { response . println ( \"[path]: \" + resultSet . getString ( \"ARTEFACT_LOCATION\" )); } resultSet . close (); statement . close (); } catch ( e ) { if ( e instanceof Error ) { console . error ( e ); response . println ( e . message ); } else { console . error ( \"Something went wrong\" , e ); } } finally { connection . close (); } response . flush (); response . close (); Functions Function Description Returns getDatabaseTypes() deprecated as all the datasources now are in a single list list of string getDataSources() Returns the list of the available data-sources in this instance. The data-sources of the default database type are listed list of string createDataSource(name, driver, url, username, password, properties) Creates a named dynamic datasource based on the provided parameters - getMetadata(datasourceName) Returns the metadata of the selected datasourceName . In case the datasourceName parameter is omitted, then the default data-source for the selected database is taken. metadata object getConnection(datasourceName) Establishes a connection to the selected data-source. Both parameters are optional Connection Objects Connection Function Description Returns getDatabaseSystem() Get database system type for this connection DatabaseSystem enum isOfType(databaseSystem) Check whether the connection is of specific database system type boolean prepareStatement(sql) Creates a prepared statement by the given SQL script PreparedStatement prepareCall(sql) Creates a callable statement by the given SQL script CallableStatement close() Closes the Connection and returns it to the pool - commit() Commits the current transaction - getAutoCommit() Returns the value of the auto commit setting boolean getCatalog() Returns the Catalog name, which the Connection is related to string getSchema() Returns the Schema name, which the Connection is related to string getTransactionIsolation() Returns the value of the transaction isolation setting int isClosed() Returns true if the Connection is already closed and false otherwise boolean isReadOnly() Returns true if the Connection is opened in a read only state and false otherwise boolean isValid() Returns true if the Connection is still valid and false otherwise boolean rollback() Rolls the current transaction back - setAutoCommit(autoCommit) Sets the value of the auto commit setting - setCatalog(catalog) Sets the Catalog name, which the Connection is related to - setSchema(schema) Sets the Schema name, which the Connection is related to - setReadOnly(readOnly) Sets the value of the read only state - setTransactionIsolation(transactionIsolation) Sets the value of the transaction isolation setting - PreparedStatement Function Description Returns close() Closes the Statement - execute() Executes an SQL query, script, procedure, etc. boolean executeQuery() Executes a query and returns a ResultSet ResultSet executeUpdate() Executes an update SQL statement - setNull(index, value) Sets a parameter as null - setBoolean(index, value) Sets a parameter of type boolean - setDate(index, value) Sets a parameter of type date - setClob(index, value) Sets a parameter of type clob - setBlob(index, value) Sets a parameter of type blob - setBytes(index, value) Sets a parameter of type bytes - setBinaryStream(index, inputStreamValue, length?) Sets a parameter of type binary stream - setDouble(index, value) Sets a parameter of type double - setFloat(index, value) Sets a parameter of type float - setInt(index, value) Sets a parameter of type integer - setLong(index, value) Sets a parameter of type long - setShort(index, value) Sets a parameter of type short - setString(index, value) Sets a parameter of type string - setTime(index, value) Sets a parameter of type time - setTimestamp(index, value) Sets a parameter of type timestamp - addBatch() Adds a set of parameters to this PreparedStatement batch of commands - executeBatch() Submits a batch of commands to the database for execution and if all commands execute successfully, returns an array of update counts. integer array getMetaData() Retrieves a metadata object that contains information about the columns of the object that will be returned when this PreparedStatement is executed object getMoreResults() Returns true, if there are more ResultSet objects to be retrieved. boolean getParameterMetaData() Retrieves the number, types and properties of this PreparedStatement parameters object getSQLWarning() Retrieves the first warning reported object isClosed() Returns true, if closed boolean CallableStatement Function Description Returns close() Closes the Statement - execute() Executes an SQL query, script, procedure, etc. boolean executeQuery() Executes a query and returns a ResultSet ResultSet executeUpdate() Executes an update SQL statement - setNull(index, value) Sets a parameter as null - setBoolean(index, value) Sets a parameter of type boolean - setDate(index, value) Sets a parameter of type date - setClob(index, value) Sets a parameter of type clob - setBlob(index, value) Sets a parameter of type blob - setBytes(index, value) Sets a parameter of type bytes - setDouble(index, value) Sets a parameter of type double - setFloat(index, value) Sets a parameter of type float - setInt(index, value) Sets a parameter of type integer - setLong(index, value) Sets a parameter of type long - setShort(index, value) Sets a parameter of type short - setString(index, value) Sets a parameter of type string - setTime(index, value) Sets a parameter of type time - setTimestamp(index, value) Sets a parameter of type timestamp - addBatch() Adds a set of parameters to this PreparedStatement batch of commands - executeBatch() Submits a batch of commands to the database for execution and if all commands execute successfully, returns an array of update counts. integer array getMetaData() Retrieves a metadata object that contains information about the columns of the object that will be returned when this PreparedStatement is executed object getMoreResults() Returns true, if there are more ResultSet objects to be retrieved. boolean getParameterMetaData() Retrieves the number, types and properties of this PreparedStatement parameters object getSQLWarning() Retrieves the first warning reported object isClosed() Returns true, if closed boolean ResultSet Function Description Returns toJson(limited) Returns the result set as stringfied JSON, limited = true will return only the first 100 records string close() Closes the ResultSet - getBoolean(identifier) Returns a value of type boolean boolean getDate(identifier) Returns a value of type date Date getDouble(identifier) Returns a value of type double double getFloat(identifier) Returns a value of type float float getInt(identifier) Returns a value of type integer int getLong(identifier) Returns a value of type long long getShort(identifier) Returns a value of type short short getString(identifier) Returns a value of type string string getTime(identifier) Returns a value of type time Date getTimestamp(identifier) Returns a value of type timestamp Date isAfterLast() Returns true if the ResultSet is iterated at the end and false otherwise boolean isBeforeFirst() Returns true if the ResultSet is iterated at the beginning and false otherwise boolean isFirst() Returns true if the ResultSet is iterated at the first row and false otherwise boolean isLast() Returns true if the ResultSet is iterated at the last row and false otherwise boolean isClosed() Returns true if the ResultSet is already closed and false otherwise boolean next() Iterates the ResultSet to the next row and returns true if it is successful. Returns false if no more rows remain. boolean","title":"Database"},{"location":"database/database/#database","text":"Standard access to the registered relational data sources. Overview Module: db/database Definition: https://github.com/eclipse/dirigible/issues/21 Source: /db/database.js Status: stable Group: core","title":"Database"},{"location":"database/database/#basic-usage","text":"ECMA6 import { database } from \"sdk/db\" ; import { response } from \"sdk/http\" ; let connection = database . getConnection ( \"SystemDB\" ); try { let statement = connection . prepareStatement ( \"select * from DIRIGIBLE_EXTENSIONS\" ); let resultSet = statement . executeQuery (); while ( resultSet . next ()) { response . println ( \"[path]: \" + resultSet . getString ( \"ARTEFACT_LOCATION\" )); } resultSet . close (); statement . close (); } catch ( e ) { if ( e instanceof Error ) { console . error ( e ); response . println ( e . message ); } else { console . error ( \"Something went wrong\" , e ); } } finally { connection . close (); } response . flush (); response . close ();","title":"Basic Usage"},{"location":"database/database/#functions","text":"Function Description Returns getDatabaseTypes() deprecated as all the datasources now are in a single list list of string getDataSources() Returns the list of the available data-sources in this instance. The data-sources of the default database type are listed list of string createDataSource(name, driver, url, username, password, properties) Creates a named dynamic datasource based on the provided parameters - getMetadata(datasourceName) Returns the metadata of the selected datasourceName . In case the datasourceName parameter is omitted, then the default data-source for the selected database is taken. metadata object getConnection(datasourceName) Establishes a connection to the selected data-source. Both parameters are optional Connection","title":"Functions"},{"location":"database/database/#objects","text":"","title":"Objects"},{"location":"database/database/#connection","text":"Function Description Returns getDatabaseSystem() Get database system type for this connection DatabaseSystem enum isOfType(databaseSystem) Check whether the connection is of specific database system type boolean prepareStatement(sql) Creates a prepared statement by the given SQL script PreparedStatement prepareCall(sql) Creates a callable statement by the given SQL script CallableStatement close() Closes the Connection and returns it to the pool - commit() Commits the current transaction - getAutoCommit() Returns the value of the auto commit setting boolean getCatalog() Returns the Catalog name, which the Connection is related to string getSchema() Returns the Schema name, which the Connection is related to string getTransactionIsolation() Returns the value of the transaction isolation setting int isClosed() Returns true if the Connection is already closed and false otherwise boolean isReadOnly() Returns true if the Connection is opened in a read only state and false otherwise boolean isValid() Returns true if the Connection is still valid and false otherwise boolean rollback() Rolls the current transaction back - setAutoCommit(autoCommit) Sets the value of the auto commit setting - setCatalog(catalog) Sets the Catalog name, which the Connection is related to - setSchema(schema) Sets the Schema name, which the Connection is related to - setReadOnly(readOnly) Sets the value of the read only state - setTransactionIsolation(transactionIsolation) Sets the value of the transaction isolation setting -","title":"Connection"},{"location":"database/database/#preparedstatement","text":"Function Description Returns close() Closes the Statement - execute() Executes an SQL query, script, procedure, etc. boolean executeQuery() Executes a query and returns a ResultSet ResultSet executeUpdate() Executes an update SQL statement - setNull(index, value) Sets a parameter as null - setBoolean(index, value) Sets a parameter of type boolean - setDate(index, value) Sets a parameter of type date - setClob(index, value) Sets a parameter of type clob - setBlob(index, value) Sets a parameter of type blob - setBytes(index, value) Sets a parameter of type bytes - setBinaryStream(index, inputStreamValue, length?) Sets a parameter of type binary stream - setDouble(index, value) Sets a parameter of type double - setFloat(index, value) Sets a parameter of type float - setInt(index, value) Sets a parameter of type integer - setLong(index, value) Sets a parameter of type long - setShort(index, value) Sets a parameter of type short - setString(index, value) Sets a parameter of type string - setTime(index, value) Sets a parameter of type time - setTimestamp(index, value) Sets a parameter of type timestamp - addBatch() Adds a set of parameters to this PreparedStatement batch of commands - executeBatch() Submits a batch of commands to the database for execution and if all commands execute successfully, returns an array of update counts. integer array getMetaData() Retrieves a metadata object that contains information about the columns of the object that will be returned when this PreparedStatement is executed object getMoreResults() Returns true, if there are more ResultSet objects to be retrieved. boolean getParameterMetaData() Retrieves the number, types and properties of this PreparedStatement parameters object getSQLWarning() Retrieves the first warning reported object isClosed() Returns true, if closed boolean","title":"PreparedStatement"},{"location":"database/database/#callablestatement","text":"Function Description Returns close() Closes the Statement - execute() Executes an SQL query, script, procedure, etc. boolean executeQuery() Executes a query and returns a ResultSet ResultSet executeUpdate() Executes an update SQL statement - setNull(index, value) Sets a parameter as null - setBoolean(index, value) Sets a parameter of type boolean - setDate(index, value) Sets a parameter of type date - setClob(index, value) Sets a parameter of type clob - setBlob(index, value) Sets a parameter of type blob - setBytes(index, value) Sets a parameter of type bytes - setDouble(index, value) Sets a parameter of type double - setFloat(index, value) Sets a parameter of type float - setInt(index, value) Sets a parameter of type integer - setLong(index, value) Sets a parameter of type long - setShort(index, value) Sets a parameter of type short - setString(index, value) Sets a parameter of type string - setTime(index, value) Sets a parameter of type time - setTimestamp(index, value) Sets a parameter of type timestamp - addBatch() Adds a set of parameters to this PreparedStatement batch of commands - executeBatch() Submits a batch of commands to the database for execution and if all commands execute successfully, returns an array of update counts. integer array getMetaData() Retrieves a metadata object that contains information about the columns of the object that will be returned when this PreparedStatement is executed object getMoreResults() Returns true, if there are more ResultSet objects to be retrieved. boolean getParameterMetaData() Retrieves the number, types and properties of this PreparedStatement parameters object getSQLWarning() Retrieves the first warning reported object isClosed() Returns true, if closed boolean","title":"CallableStatement"},{"location":"database/database/#resultset","text":"Function Description Returns toJson(limited) Returns the result set as stringfied JSON, limited = true will return only the first 100 records string close() Closes the ResultSet - getBoolean(identifier) Returns a value of type boolean boolean getDate(identifier) Returns a value of type date Date getDouble(identifier) Returns a value of type double double getFloat(identifier) Returns a value of type float float getInt(identifier) Returns a value of type integer int getLong(identifier) Returns a value of type long long getShort(identifier) Returns a value of type short short getString(identifier) Returns a value of type string string getTime(identifier) Returns a value of type time Date getTimestamp(identifier) Returns a value of type timestamp Date isAfterLast() Returns true if the ResultSet is iterated at the end and false otherwise boolean isBeforeFirst() Returns true if the ResultSet is iterated at the beginning and false otherwise boolean isFirst() Returns true if the ResultSet is iterated at the first row and false otherwise boolean isLast() Returns true if the ResultSet is iterated at the last row and false otherwise boolean isClosed() Returns true if the ResultSet is already closed and false otherwise boolean next() Iterates the ResultSet to the next row and returns true if it is successful. Returns false if no more rows remain. boolean","title":"ResultSet"},{"location":"database/insert/","text":"Insert Simplified insert functionality, accepts SQL script and query parameters. Overview Module: db/insert Definition: Source: Status: stable Group: core Basic Usage ECMA6 import { query , update , insert } from \"sdk/db\" ; import { response } from \"sdk/http\" ; update . execute ( \"CREATE TABLE MY_TABLE (COLUMN_A INT)\" , [], \"DefaultDB\" ); insert . execute ( \"INSERT INTO MY_TABLE VALUES (1)\" , [], \"DefaultDB\" ); let resultSetBefore = query . execute ( \"SELECT COLUMN_A FROM MY_TABLE\" , [], \"DefaultDB\" ); response . println ( \"Value before update: \" + JSON . stringify ( resultSetBefore )); update . execute ( \"UPDATE MY_TABLE SET COLUMN_A = 2\" , [], \"DefaultDB\" ); let resultSetAfter = query . execute ( \"SELECT COLUMN_A FROM MY_TABLE\" , [], \"DefaultDB\" ); response . println ( \"Value after update: \" + JSON . stringify ( resultSetAfter )); update . execute ( \"DROP TABLE MY_TABLE\" , [], \"DefaultDB\" ); Functions Function Description Returns execute(sql, parameters?, datasourceName?) Executes a SQL insert against the selected datasourceName with the provided parameters and returns the number of affected rows int executeNamed(sql, parameters?, datasourceName?) Executes a SQL insert against the selected datasourceName with the provided parameters and returns the number of affected rows int parameters array supports primitives e.g. [1, 'John', 34.56] or objects in format {'type':'[DATA_TYPE]', 'value':[VALUE]} e.g. [1, {'type':'CHAR', 'value':'ISBN19202323322'}] named parameters array supports objects in format {'name':[PARAM_NAME] 'type':'[DATA_TYPE]', 'value':[VALUE]} e.g. [1, {'name':'isbn', 'type':'CHAR', 'value':'ISBN19202323322'}]","title":"Insert"},{"location":"database/insert/#insert","text":"Simplified insert functionality, accepts SQL script and query parameters. Overview Module: db/insert Definition: Source: Status: stable Group: core","title":"Insert"},{"location":"database/insert/#basic-usage","text":"ECMA6 import { query , update , insert } from \"sdk/db\" ; import { response } from \"sdk/http\" ; update . execute ( \"CREATE TABLE MY_TABLE (COLUMN_A INT)\" , [], \"DefaultDB\" ); insert . execute ( \"INSERT INTO MY_TABLE VALUES (1)\" , [], \"DefaultDB\" ); let resultSetBefore = query . execute ( \"SELECT COLUMN_A FROM MY_TABLE\" , [], \"DefaultDB\" ); response . println ( \"Value before update: \" + JSON . stringify ( resultSetBefore )); update . execute ( \"UPDATE MY_TABLE SET COLUMN_A = 2\" , [], \"DefaultDB\" ); let resultSetAfter = query . execute ( \"SELECT COLUMN_A FROM MY_TABLE\" , [], \"DefaultDB\" ); response . println ( \"Value after update: \" + JSON . stringify ( resultSetAfter )); update . execute ( \"DROP TABLE MY_TABLE\" , [], \"DefaultDB\" );","title":"Basic Usage"},{"location":"database/insert/#functions","text":"Function Description Returns execute(sql, parameters?, datasourceName?) Executes a SQL insert against the selected datasourceName with the provided parameters and returns the number of affected rows int executeNamed(sql, parameters?, datasourceName?) Executes a SQL insert against the selected datasourceName with the provided parameters and returns the number of affected rows int parameters array supports primitives e.g. [1, 'John', 34.56] or objects in format {'type':'[DATA_TYPE]', 'value':[VALUE]} e.g. [1, {'type':'CHAR', 'value':'ISBN19202323322'}] named parameters array supports objects in format {'name':[PARAM_NAME] 'type':'[DATA_TYPE]', 'value':[VALUE]} e.g. [1, {'name':'isbn', 'type':'CHAR', 'value':'ISBN19202323322'}]","title":"Functions"},{"location":"database/procedure/","text":"Procedure Simplified procedure functionality, accepts SQL script and query parameters and returns the result-set as a JSON object. Overview Module: db/procedure Definition: https://github.com/eclipse/dirigible/issues/773 Source: /db/procedure.js Status: stable Group: core Basic Usage Note To use procedures you need to add database that supports them (default DB is H2 that does not support procedures): Open Database perspective and click on Databases at the bottom. Click New and add your database information. Use you newly added database in most methods as databaseType . Create Procedure: ECMA6 import { procedure } from \"sdk/db\" ; import { response } from \"sdk/http\" ; const sql = \" \\ CREATE PROCEDURE CUSTOMERS_BY_COUNTRY_AND_ALL_CUSTOMERS(c_id integer, c_name text, c_country text) \\ LANGUAGE SQL \\ AS $$ \\ INSERT INTO CUSTOMERS(id, name, country) values (c_id, c_name, c_country); \\ $$; \\ \" procedure . create ( sql , \"psql\" ); response . println ( \"Procedure created\" ); response . flush (); response . close (); Call Procedure: ECMA6 import { query , procedure } from \"sdk/db\" ; import { response } from \"sdk/http\" ; const sql = \"CALL CUSTOMERS_BY_COUNTRY_AND_ALL_CUSTOMERS(c_id => ?, c_name => ?, c_country => ?)\" ; try { procedure . execute ( sql , [ 6 , \"IBM\" , \"USA\" ], \"psql\" ); } finally { let result = query . execute ( \"SELECT * FROM CUSTOMERS\" , [], \"psql\" ); response . println ( JSON . stringify ( result )); response . flush (); response . close (); } Functions Function Description Returns create(sql, datasourceName?) Creates a SQL Stored Procedure in the selected datasourceName , throws Error, if issue occur - execute(sql, parameters?, datasourceName?) Execute SQL Stored Procedure in the selected datasourceName with the provided parameters and returns the result, if any array of arrays Sample Parameters Array: let parameters = [ 1 , 'John' , 34.56 ]; or let parameters = [ { value : 1 , type : \"int\" }, { value : 'John' , type : \"string\" }, { value : 34.56 type : \"double\" } ];","title":"Procedure"},{"location":"database/procedure/#procedure","text":"Simplified procedure functionality, accepts SQL script and query parameters and returns the result-set as a JSON object. Overview Module: db/procedure Definition: https://github.com/eclipse/dirigible/issues/773 Source: /db/procedure.js Status: stable Group: core","title":"Procedure"},{"location":"database/procedure/#basic-usage","text":"Note To use procedures you need to add database that supports them (default DB is H2 that does not support procedures): Open Database perspective and click on Databases at the bottom. Click New and add your database information. Use you newly added database in most methods as databaseType . Create Procedure: ECMA6 import { procedure } from \"sdk/db\" ; import { response } from \"sdk/http\" ; const sql = \" \\ CREATE PROCEDURE CUSTOMERS_BY_COUNTRY_AND_ALL_CUSTOMERS(c_id integer, c_name text, c_country text) \\ LANGUAGE SQL \\ AS $$ \\ INSERT INTO CUSTOMERS(id, name, country) values (c_id, c_name, c_country); \\ $$; \\ \" procedure . create ( sql , \"psql\" ); response . println ( \"Procedure created\" ); response . flush (); response . close (); Call Procedure: ECMA6 import { query , procedure } from \"sdk/db\" ; import { response } from \"sdk/http\" ; const sql = \"CALL CUSTOMERS_BY_COUNTRY_AND_ALL_CUSTOMERS(c_id => ?, c_name => ?, c_country => ?)\" ; try { procedure . execute ( sql , [ 6 , \"IBM\" , \"USA\" ], \"psql\" ); } finally { let result = query . execute ( \"SELECT * FROM CUSTOMERS\" , [], \"psql\" ); response . println ( JSON . stringify ( result )); response . flush (); response . close (); }","title":"Basic Usage"},{"location":"database/procedure/#functions","text":"Function Description Returns create(sql, datasourceName?) Creates a SQL Stored Procedure in the selected datasourceName , throws Error, if issue occur - execute(sql, parameters?, datasourceName?) Execute SQL Stored Procedure in the selected datasourceName with the provided parameters and returns the result, if any array of arrays Sample Parameters Array: let parameters = [ 1 , 'John' , 34.56 ]; or let parameters = [ { value : 1 , type : \"int\" }, { value : 'John' , type : \"string\" }, { value : 34.56 type : \"double\" } ];","title":"Functions"},{"location":"database/query/","text":"Query Simplified query functionality, accepts SQL script and query parameters and returns the result-set as a JSON object. Overview Module: db/query Definition: https://github.com/eclipse/dirigible/issues/48 Source: /db/query.js Status: stable Group: core Basic Usage ECMA6 import { query } from \"sdk/db\" ; import { response } from \"sdk/http\" ; const sql = \"SELECT * FROM DIRIGIBLE_EXTENSIONS WHERE EXTENSION_EXTENSIONPOINT_NAME = ?\" ; let resultset = query . execute ( sql , [ \"ide-editor\" ], \"SystemDB\" ); response . println ( JSON . stringify ( resultset )); Typed Parameters Usage ECMA6 import { query } from \"sdk/db\" ; import { response } from \"sdk/http\" ; const sql = \"SELECT * FROM DIRIGIBLE_EXTENSIONS WHERE EXTENSION_EXTENSIONPOINT_NAME = ?\" ; let resultset = query . execute ( sql , [{ \"type\" : \"VARCHAR\" , \"value\" : \"ide-editor\" }], \"SystemDB\" ); response . println ( JSON . stringify ( resultset )); Named Parameters Usage ECMA6 import { query } from \"sdk/db\" ; import { response } from \"sdk/http\" ; const sql = \"SELECT * FROM DIRIGIBLE_EXTENSIONS WHERE EXTENSION_EXTENSIONPOINT_NAME = :editor\" ; let resultset = query . executeNamed ( sql , [{ \"name\" : \"editor\" , \"type\" : \"VARCHAR\" , \"value\" : \"ide-editor\" }], \"SystemDB\" ); response . println ( JSON . stringify ( resultset )); Functions Function Description Returns execute(sql, parameters?, datasourceName?) Executes a SQL query against the selected datasourceName with the provided parameters result-set as JSON object executeNamed(sql, parameters?, datasourceName?) Executes a SQL query against the selected datasourceName with the provided parameters result-set as JSON object parameters array supports primitives e.g. [1, 'John', 34.56] or objects in format {'type':'[DATA_TYPE]', 'value':[VALUE]} e.g. [1, {'type':'CHAR', 'value':'ISBN19202323322'}]","title":"Query"},{"location":"database/query/#query","text":"Simplified query functionality, accepts SQL script and query parameters and returns the result-set as a JSON object. Overview Module: db/query Definition: https://github.com/eclipse/dirigible/issues/48 Source: /db/query.js Status: stable Group: core","title":"Query"},{"location":"database/query/#basic-usage","text":"ECMA6 import { query } from \"sdk/db\" ; import { response } from \"sdk/http\" ; const sql = \"SELECT * FROM DIRIGIBLE_EXTENSIONS WHERE EXTENSION_EXTENSIONPOINT_NAME = ?\" ; let resultset = query . execute ( sql , [ \"ide-editor\" ], \"SystemDB\" ); response . println ( JSON . stringify ( resultset ));","title":"Basic Usage"},{"location":"database/query/#typed-parameters-usage","text":"ECMA6 import { query } from \"sdk/db\" ; import { response } from \"sdk/http\" ; const sql = \"SELECT * FROM DIRIGIBLE_EXTENSIONS WHERE EXTENSION_EXTENSIONPOINT_NAME = ?\" ; let resultset = query . execute ( sql , [{ \"type\" : \"VARCHAR\" , \"value\" : \"ide-editor\" }], \"SystemDB\" ); response . println ( JSON . stringify ( resultset ));","title":"Typed Parameters Usage"},{"location":"database/query/#named-parameters-usage","text":"ECMA6 import { query } from \"sdk/db\" ; import { response } from \"sdk/http\" ; const sql = \"SELECT * FROM DIRIGIBLE_EXTENSIONS WHERE EXTENSION_EXTENSIONPOINT_NAME = :editor\" ; let resultset = query . executeNamed ( sql , [{ \"name\" : \"editor\" , \"type\" : \"VARCHAR\" , \"value\" : \"ide-editor\" }], \"SystemDB\" ); response . println ( JSON . stringify ( resultset ));","title":"Named Parameters Usage"},{"location":"database/query/#functions","text":"Function Description Returns execute(sql, parameters?, datasourceName?) Executes a SQL query against the selected datasourceName with the provided parameters result-set as JSON object executeNamed(sql, parameters?, datasourceName?) Executes a SQL query against the selected datasourceName with the provided parameters result-set as JSON object parameters array supports primitives e.g. [1, 'John', 34.56] or objects in format {'type':'[DATA_TYPE]', 'value':[VALUE]} e.g. [1, {'type':'CHAR', 'value':'ISBN19202323322'}]","title":"Functions"},{"location":"database/sequence/","text":"Sequence Functionality for manipulating the database sequence objects. Overview Module: db/sequence Definition: https://github.com/eclipse/dirigible/issues/124 Source: /db/sequence.js Status: stable Group: core Basic Usage ECMA6 import { sequence } from \"sdk/db\" ; import { response } from \"sdk/http\" ; let value = sequence . nextval ( \"MYSEQUENCE\" ); response . println ( value . toString ()); response . flush (); response . close (); Functions Function Description Returns nextval(name, databaseType?, datasourceName?) Increment the sequence with the given name and returns the value. Creates the sequence implicitly if it deos not exist. integer create(name, databaseType?, datasourceName?) Creates the sequence by the given name . - drop(name, databaseType?, datasourceName?) Remove the sequence by the given name . -","title":"Sequence"},{"location":"database/sequence/#sequence","text":"Functionality for manipulating the database sequence objects. Overview Module: db/sequence Definition: https://github.com/eclipse/dirigible/issues/124 Source: /db/sequence.js Status: stable Group: core","title":"Sequence"},{"location":"database/sequence/#basic-usage","text":"ECMA6 import { sequence } from \"sdk/db\" ; import { response } from \"sdk/http\" ; let value = sequence . nextval ( \"MYSEQUENCE\" ); response . println ( value . toString ()); response . flush (); response . close ();","title":"Basic Usage"},{"location":"database/sequence/#functions","text":"Function Description Returns nextval(name, databaseType?, datasourceName?) Increment the sequence with the given name and returns the value. Creates the sequence implicitly if it deos not exist. integer create(name, databaseType?, datasourceName?) Creates the sequence by the given name . - drop(name, databaseType?, datasourceName?) Remove the sequence by the given name . -","title":"Functions"},{"location":"database/sql/","text":"SQL Type-safe SQL builders with multi-dialect support. Overview Module: db/sql Definition: https://github.com/eclipse/dirigible/issues/125 Source: /db/sql.js Status: stable Group: core Basic Usage ECMA6 import { sql } from \"sdk/db\" ; import { response } from \"sdk/http\" ; let script = sql . getDialect (). select (). column ( \"FIRST_NAME\" ). column ( \"LAST_NAME\" ). from ( \"CUSTOMERS\" ). build (); response . println ( script ); response . flush (); response . close (); Functions Function Description Returns getDialect(connection?) Returns the dialect based on the provided connection if any or the default one otherwise Dialect Objects Dialect Function Description Returns select() Returns a Select SQL builder Select insert() Returns an Insert SQL builder Insert update() Returns an Update SQL builder Update delete() Returns a Delete SQL builder Delete nextval(name) Returns a Nextval SQL builder by a given name Nextval create() Returns a Create SQL builder Create drop() Returns a Drop SQL builder Drop Select Function Description Returns distinct() Sets the distinct flag and returns the current Select SQL builder Select forUpdate() Sets the forUpdate flag and returns the current Select SQL builder Select column(name) Adds a column with the given name and returns the current Select SQL builder. Use * for all Select from(table, alias?) Adds a table with the given table name and alias and returns the current Select SQL builder Select join(table, on, alias?) Adds a join clause and returns the current Select SQL builder Select innerJoin(table, on, alias?) Adds a join clause and returns the current Select SQL builder Select outerJoin(table, on, alias?) Adds a join clause and returns the current Select SQL builder Select leftJoin(table, on, alias?) Adds a join clause and returns the current Select SQL builder Select rightJoin(table, on, alias?) Adds a join clause and returns the current Select SQL builder Select fullJoin(table, on, alias?) Adds a join clause and returns the current Select SQL builder Select where(condition) Adds a where clause with the given condition and returns the current Select SQL builder Select order(column, asc?) Adds an order clause with the given column and optionally the ascending or descending order and returns the current Select SQL builder Select group(column) Adds a group by clause and returns the current Select SQL builder Select union(select) Adds an union clause and returns the current Select SQL builder Select having(condition) Adds an having clause and returns the current Select SQL builder Select limit() Sets the limit number and returns the current Select SQL builder Select offset() Sets the offset number and returns the current Select SQL builder Select build() Generate and returns the Select SQL statement as a string String Insert Function Description Returns into(table) Sets the table name and returns the current Insert SQL builder Insert column(name) Adds a column name and returns the current Insert SQL builder Insert value(param) Adds a value param and returns the current Insert SQL builder. Use ? for prepared statements afterwards. Insert select(statement) Sets the select statement if needed and returns the current Insert SQL builder Insert build() Generate and returns the Insert SQL statement as a string String Update Function Description Returns table(name) Sets the table name and returns the current Update SQL builder Update set(column, value) Adds a column - value pair and returns the current Update SQL builder Update where(condition) Adds a where clause with the given condition and returns the current Update SQL builder Update build() Generate and returns the Update SQL statement as a string String Delete Function Description Returns from(table) Sets the table name and returns the current Delete SQL builder Delete where(condition) Adds a where clause with the given condition and returns the current Delete SQL builder Delete build() Generate and returns the Delete SQL statement as a string String Nextval Function Description Returns build() Generate and returns the Nextval SQL statement as a string String Create Function Description Returns table(name) Returns a CreateTable SQL builder CreateTable view(name) Returns a CreateView SQL builder CreateView sequence(name) Returns a CreateSequence SQL builder CreateSequence Drop Function Description Returns table(name) Returns a DropTable SQL builder DropTable view(name) Returns a DropView SQL builder DropView sequence(name) Returns a DropSequence SQL builder DropSequence CreateTable Function Description Returns column(name, type, isPrimaryKey?, isNullable?, isUnique?, args?) Adds a column definition and returns the current CreateTable SQL builder CreateTable columnVarchar(name, length, isPrimaryKey?, isNullable?, isUnique?, args?) Adds a VARCHAR column definition and returns the current CreateTable SQL builder CreateTable columnChar(name, length, isPrimaryKey?, isNullable?, isUnique?, args?) Adds a CHAR column definition and returns the current CreateTable SQL builder CreateTable columnDate(name, isPrimaryKey?, isNullable?, isUnique?, args?) Adds a DATE column definition and returns the current CreateTable SQL builder CreateTable columnTime(name, isPrimaryKey?, isNullable?, isUnique?, args?) Adds a TIME column definition and returns the current CreateTable SQL builder CreateTable columnTimestamp(name, isPrimaryKey?, isNullable?, isUnique?, args?) Adds a TIMESTAMP column definition and returns the current CreateTable SQL builder CreateTable columnInteger(name, isPrimaryKey?, isNullable?, isUnique?, args?) Adds a INTEGER column definition and returns the current CreateTable SQL builder CreateTable columnTinyint(name, isPrimaryKey?, isNullable?, isUnique?, args?) Adds a TINYINT column definition and returns the current CreateTable SQL builder CreateTable columnBigint(name, isPrimaryKey?, isNullable?, isUnique?, args?) Adds a BIGINT column definition and returns the current CreateTable SQL builder CreateTable columnSmallint(name, isPrimaryKey?, isNullable?, isUnique?, args?) Adds a SMALLINT column definition and returns the current CreateTable SQL builder CreateTable columnDate(name, isPrimaryKey?, isNullable?, isUnique?, args?) Adds a DATE column definition and returns the current CreateTable SQL builder CreateTable columnReal(name, isPrimaryKey?, isNullable?, isUnique?, args?) Adds a REAL column definition and returns the current CreateTable SQL builder CreateTable columnDouble(name, isPrimaryKey?, isNullable?, isUnique?, args?) Adds a DOUBLE PRECISION column definition and returns the current CreateTable SQL builder CreateTable columnBoolean(name, isPrimaryKey?, isNullable?, isUnique?, args?) Adds a BOOLEAN column definition and returns the current CreateTable SQL builder CreateTable columnBlob(name, isNullable?, args?) Adds a BLOB column definition and returns the current CreateTable SQL builder CreateTable columnDecimal(column, precision, scale, isPrimaryKey?, isNullable?, isUnique?, args?) Adds a DECIMAL column definition and returns the current CreateTable SQL builder CreateTable primaryKey(columns, name?) Sets a primary key definition and returns the current CreateTable SQL builder CreateTable foreignKey(name, columns, referencedTable, referencedColumns) Adds a foreign key definition and returns the current CreateTable SQL builder CreateTable unique(name, columns) Adds an unique index definition and returns the current CreateTable SQL builder CreateTable check(name, expression) Adds a check definition and returns the current CreateTable SQL builder CreateTable build() Generate and returns the CreateTable SQL statement as a string String CreateView Function Description Returns column(name) Adds a column definition and returns the current VieweTable SQL builder VieweTable asSelect(select) Sets the select definition and returns the current VieweTable SQL builder VieweTable build() Generate and returns the VieweTable SQL statement as a string String CreateSequence Function Description Returns build() Generate and returns the Sequence SQL statement as a string String DropTable Function Description Returns build() Generate and returns the DropTable SQL statement as a string String DropView Function Description Returns build() Generate and returns the DropView SQL statement as a string String DropSequence Function Description Returns build() Generate and returns the DropSequence SQL statement as a string String","title":"SQL"},{"location":"database/sql/#sql","text":"Type-safe SQL builders with multi-dialect support. Overview Module: db/sql Definition: https://github.com/eclipse/dirigible/issues/125 Source: /db/sql.js Status: stable Group: core","title":"SQL"},{"location":"database/sql/#basic-usage","text":"ECMA6 import { sql } from \"sdk/db\" ; import { response } from \"sdk/http\" ; let script = sql . getDialect (). select (). column ( \"FIRST_NAME\" ). column ( \"LAST_NAME\" ). from ( \"CUSTOMERS\" ). build (); response . println ( script ); response . flush (); response . close ();","title":"Basic Usage"},{"location":"database/sql/#functions","text":"Function Description Returns getDialect(connection?) Returns the dialect based on the provided connection if any or the default one otherwise Dialect","title":"Functions"},{"location":"database/sql/#objects","text":"","title":"Objects"},{"location":"database/sql/#dialect","text":"Function Description Returns select() Returns a Select SQL builder Select insert() Returns an Insert SQL builder Insert update() Returns an Update SQL builder Update delete() Returns a Delete SQL builder Delete nextval(name) Returns a Nextval SQL builder by a given name Nextval create() Returns a Create SQL builder Create drop() Returns a Drop SQL builder Drop","title":"Dialect"},{"location":"database/sql/#select","text":"Function Description Returns distinct() Sets the distinct flag and returns the current Select SQL builder Select forUpdate() Sets the forUpdate flag and returns the current Select SQL builder Select column(name) Adds a column with the given name and returns the current Select SQL builder. Use * for all Select from(table, alias?) Adds a table with the given table name and alias and returns the current Select SQL builder Select join(table, on, alias?) Adds a join clause and returns the current Select SQL builder Select innerJoin(table, on, alias?) Adds a join clause and returns the current Select SQL builder Select outerJoin(table, on, alias?) Adds a join clause and returns the current Select SQL builder Select leftJoin(table, on, alias?) Adds a join clause and returns the current Select SQL builder Select rightJoin(table, on, alias?) Adds a join clause and returns the current Select SQL builder Select fullJoin(table, on, alias?) Adds a join clause and returns the current Select SQL builder Select where(condition) Adds a where clause with the given condition and returns the current Select SQL builder Select order(column, asc?) Adds an order clause with the given column and optionally the ascending or descending order and returns the current Select SQL builder Select group(column) Adds a group by clause and returns the current Select SQL builder Select union(select) Adds an union clause and returns the current Select SQL builder Select having(condition) Adds an having clause and returns the current Select SQL builder Select limit() Sets the limit number and returns the current Select SQL builder Select offset() Sets the offset number and returns the current Select SQL builder Select build() Generate and returns the Select SQL statement as a string String","title":"Select"},{"location":"database/sql/#insert","text":"Function Description Returns into(table) Sets the table name and returns the current Insert SQL builder Insert column(name) Adds a column name and returns the current Insert SQL builder Insert value(param) Adds a value param and returns the current Insert SQL builder. Use ? for prepared statements afterwards. Insert select(statement) Sets the select statement if needed and returns the current Insert SQL builder Insert build() Generate and returns the Insert SQL statement as a string String","title":"Insert"},{"location":"database/sql/#update","text":"Function Description Returns table(name) Sets the table name and returns the current Update SQL builder Update set(column, value) Adds a column - value pair and returns the current Update SQL builder Update where(condition) Adds a where clause with the given condition and returns the current Update SQL builder Update build() Generate and returns the Update SQL statement as a string String","title":"Update"},{"location":"database/sql/#delete","text":"Function Description Returns from(table) Sets the table name and returns the current Delete SQL builder Delete where(condition) Adds a where clause with the given condition and returns the current Delete SQL builder Delete build() Generate and returns the Delete SQL statement as a string String","title":"Delete"},{"location":"database/sql/#nextval","text":"Function Description Returns build() Generate and returns the Nextval SQL statement as a string String","title":"Nextval"},{"location":"database/sql/#create","text":"Function Description Returns table(name) Returns a CreateTable SQL builder CreateTable view(name) Returns a CreateView SQL builder CreateView sequence(name) Returns a CreateSequence SQL builder CreateSequence","title":"Create"},{"location":"database/sql/#drop","text":"Function Description Returns table(name) Returns a DropTable SQL builder DropTable view(name) Returns a DropView SQL builder DropView sequence(name) Returns a DropSequence SQL builder DropSequence","title":"Drop"},{"location":"database/sql/#createtable","text":"Function Description Returns column(name, type, isPrimaryKey?, isNullable?, isUnique?, args?) Adds a column definition and returns the current CreateTable SQL builder CreateTable columnVarchar(name, length, isPrimaryKey?, isNullable?, isUnique?, args?) Adds a VARCHAR column definition and returns the current CreateTable SQL builder CreateTable columnChar(name, length, isPrimaryKey?, isNullable?, isUnique?, args?) Adds a CHAR column definition and returns the current CreateTable SQL builder CreateTable columnDate(name, isPrimaryKey?, isNullable?, isUnique?, args?) Adds a DATE column definition and returns the current CreateTable SQL builder CreateTable columnTime(name, isPrimaryKey?, isNullable?, isUnique?, args?) Adds a TIME column definition and returns the current CreateTable SQL builder CreateTable columnTimestamp(name, isPrimaryKey?, isNullable?, isUnique?, args?) Adds a TIMESTAMP column definition and returns the current CreateTable SQL builder CreateTable columnInteger(name, isPrimaryKey?, isNullable?, isUnique?, args?) Adds a INTEGER column definition and returns the current CreateTable SQL builder CreateTable columnTinyint(name, isPrimaryKey?, isNullable?, isUnique?, args?) Adds a TINYINT column definition and returns the current CreateTable SQL builder CreateTable columnBigint(name, isPrimaryKey?, isNullable?, isUnique?, args?) Adds a BIGINT column definition and returns the current CreateTable SQL builder CreateTable columnSmallint(name, isPrimaryKey?, isNullable?, isUnique?, args?) Adds a SMALLINT column definition and returns the current CreateTable SQL builder CreateTable columnDate(name, isPrimaryKey?, isNullable?, isUnique?, args?) Adds a DATE column definition and returns the current CreateTable SQL builder CreateTable columnReal(name, isPrimaryKey?, isNullable?, isUnique?, args?) Adds a REAL column definition and returns the current CreateTable SQL builder CreateTable columnDouble(name, isPrimaryKey?, isNullable?, isUnique?, args?) Adds a DOUBLE PRECISION column definition and returns the current CreateTable SQL builder CreateTable columnBoolean(name, isPrimaryKey?, isNullable?, isUnique?, args?) Adds a BOOLEAN column definition and returns the current CreateTable SQL builder CreateTable columnBlob(name, isNullable?, args?) Adds a BLOB column definition and returns the current CreateTable SQL builder CreateTable columnDecimal(column, precision, scale, isPrimaryKey?, isNullable?, isUnique?, args?) Adds a DECIMAL column definition and returns the current CreateTable SQL builder CreateTable primaryKey(columns, name?) Sets a primary key definition and returns the current CreateTable SQL builder CreateTable foreignKey(name, columns, referencedTable, referencedColumns) Adds a foreign key definition and returns the current CreateTable SQL builder CreateTable unique(name, columns) Adds an unique index definition and returns the current CreateTable SQL builder CreateTable check(name, expression) Adds a check definition and returns the current CreateTable SQL builder CreateTable build() Generate and returns the CreateTable SQL statement as a string String","title":"CreateTable"},{"location":"database/sql/#createview","text":"Function Description Returns column(name) Adds a column definition and returns the current VieweTable SQL builder VieweTable asSelect(select) Sets the select definition and returns the current VieweTable SQL builder VieweTable build() Generate and returns the VieweTable SQL statement as a string String","title":"CreateView"},{"location":"database/sql/#createsequence","text":"Function Description Returns build() Generate and returns the Sequence SQL statement as a string String","title":"CreateSequence"},{"location":"database/sql/#droptable","text":"Function Description Returns build() Generate and returns the DropTable SQL statement as a string String","title":"DropTable"},{"location":"database/sql/#dropview","text":"Function Description Returns build() Generate and returns the DropView SQL statement as a string String","title":"DropView"},{"location":"database/sql/#dropsequence","text":"Function Description Returns build() Generate and returns the DropSequence SQL statement as a string String","title":"DropSequence"},{"location":"database/store/","text":"Store Simple Data Store functionality based on Hibernate framework. Overview Module: db/store Definition: https://github.com/eclipse/dirigible/issues/2485 Source: /db/store.js Status: beta Group: core Basic Usage ECMA6 import { store } from \"sdk/db\" ; import { response } from \"sdk/http\" ; let entry = { 'name' : 'John' , 'address' : 'Sofia, Bulgaria' }; store . save ( 'Customer' , entry ); let list = store . list ( 'Customer' ); response . println ( JSON . stringify ( list )); response . flush (); response . close (); The Entity description in the Hibernate xml or json format (e.g. Customer.hbm.xml as XML or Customer.entity as JSON) XML <hibernate-mapping> <class entity-name= \"Customer\" > <id name= \"id\" type= \"long\" column= \"ID\" > <generator class= \"sequence\" /> </id> <property name= \"name\" column= \"NAME\" type= \"string\" /> <property name= \"address\" column= \"ADDRESS\" type= \"string\" /> </class> </hibernate-mapping> Functions Function Description Returns save(name, entry) Save the entry in the collection with name - list(name) List all the entris in the collection with name Array of Objects get(name, id) Get the entry from the collection with name by its id Object deleteEntry(name, id) Delete the entry from the collection with name by its id -","title":"Store"},{"location":"database/store/#store","text":"Simple Data Store functionality based on Hibernate framework. Overview Module: db/store Definition: https://github.com/eclipse/dirigible/issues/2485 Source: /db/store.js Status: beta Group: core","title":"Store"},{"location":"database/store/#basic-usage","text":"ECMA6 import { store } from \"sdk/db\" ; import { response } from \"sdk/http\" ; let entry = { 'name' : 'John' , 'address' : 'Sofia, Bulgaria' }; store . save ( 'Customer' , entry ); let list = store . list ( 'Customer' ); response . println ( JSON . stringify ( list )); response . flush (); response . close (); The Entity description in the Hibernate xml or json format (e.g. Customer.hbm.xml as XML or Customer.entity as JSON) XML <hibernate-mapping> <class entity-name= \"Customer\" > <id name= \"id\" type= \"long\" column= \"ID\" > <generator class= \"sequence\" /> </id> <property name= \"name\" column= \"NAME\" type= \"string\" /> <property name= \"address\" column= \"ADDRESS\" type= \"string\" /> </class> </hibernate-mapping>","title":"Basic Usage"},{"location":"database/store/#functions","text":"Function Description Returns save(name, entry) Save the entry in the collection with name - list(name) List all the entris in the collection with name Array of Objects get(name, id) Get the entry from the collection with name by its id Object deleteEntry(name, id) Delete the entry from the collection with name by its id -","title":"Functions"},{"location":"database/update/","text":"Update Simplified update functionality, accepts SQL script and query parameters and returns the result-set as a JSON object. Overview Module: db/update Definition: https://github.com/eclipse/dirigible/issues/49 Source: /db/update.js Status: stable Group: core Basic Usage ECMA6 import { query , update } from \"sdk/db\" ; import { response } from \"sdk/http\" ; update . execute ( \"CREATE TABLE MY_TABLE (COLUMN_A INT)\" , [], \"DefaultDB\" ); update . execute ( \"INSERT INTO MY_TABLE VALUES (1)\" , [], \"DefaultDB\" ); let resultSetBefore = query . execute ( \"SELECT COLUMN_A FROM MY_TABLE\" , [], \"DefaultDB\" ); response . println ( \"Value before update: \" + JSON . stringify ( resultSetBefore )); update . execute ( \"UPDATE MY_TABLE SET COLUMN_A = 2\" , [], \"DefaultDB\" ); let resultSetAfter = query . execute ( \"SELECT COLUMN_A FROM MY_TABLE\" , [], \"DefaultDB\" ); response . println ( \"Value after update: \" + JSON . stringify ( resultSetAfter )); update . execute ( \"DROP TABLE MY_TABLE\" , [], \"DefaultDB\" ); Functions Function Description Returns execute(sql, parameters?, datasourceName?) Executes a SQL update against the selected datasourceName with the provided parameters and returns the number of affected rows int executeNamed(sql, parameters?, datasourceName?) Executes a SQL update against the selected datasourceName with the provided parameters and returns the number of affected rows int parameters array supports primitives e.g. [1, 'John', 34.56] or objects in format {'type':'[DATA_TYPE]', 'value':[VALUE]} e.g. [1, {'type':'CHAR', 'value':'ISBN19202323322'}] named parameters array supports objects in format {'name':[PARAM_NAME] 'type':'[DATA_TYPE]', 'value':[VALUE]} e.g. [1, {'name':'isbn', 'type':'CHAR', 'value':'ISBN19202323322'}]","title":"Update"},{"location":"database/update/#update","text":"Simplified update functionality, accepts SQL script and query parameters and returns the result-set as a JSON object. Overview Module: db/update Definition: https://github.com/eclipse/dirigible/issues/49 Source: /db/update.js Status: stable Group: core","title":"Update"},{"location":"database/update/#basic-usage","text":"ECMA6 import { query , update } from \"sdk/db\" ; import { response } from \"sdk/http\" ; update . execute ( \"CREATE TABLE MY_TABLE (COLUMN_A INT)\" , [], \"DefaultDB\" ); update . execute ( \"INSERT INTO MY_TABLE VALUES (1)\" , [], \"DefaultDB\" ); let resultSetBefore = query . execute ( \"SELECT COLUMN_A FROM MY_TABLE\" , [], \"DefaultDB\" ); response . println ( \"Value before update: \" + JSON . stringify ( resultSetBefore )); update . execute ( \"UPDATE MY_TABLE SET COLUMN_A = 2\" , [], \"DefaultDB\" ); let resultSetAfter = query . execute ( \"SELECT COLUMN_A FROM MY_TABLE\" , [], \"DefaultDB\" ); response . println ( \"Value after update: \" + JSON . stringify ( resultSetAfter )); update . execute ( \"DROP TABLE MY_TABLE\" , [], \"DefaultDB\" );","title":"Basic Usage"},{"location":"database/update/#functions","text":"Function Description Returns execute(sql, parameters?, datasourceName?) Executes a SQL update against the selected datasourceName with the provided parameters and returns the number of affected rows int executeNamed(sql, parameters?, datasourceName?) Executes a SQL update against the selected datasourceName with the provided parameters and returns the number of affected rows int parameters array supports primitives e.g. [1, 'John', 34.56] or objects in format {'type':'[DATA_TYPE]', 'value':[VALUE]} e.g. [1, {'type':'CHAR', 'value':'ISBN19202323322'}] named parameters array supports objects in format {'name':[PARAM_NAME] 'type':'[DATA_TYPE]', 'value':[VALUE]} e.g. [1, {'name':'isbn', 'type':'CHAR', 'value':'ISBN19202323322'}]","title":"Functions"},{"location":"etcd/client/","text":"Etcd Client The Etcd Client is giving an access to an etcd key-value storage. Overview Module: etcd/client Definition: https://github.com/eclipse/dirigible/issues/675 Source: /etcd/client.js Facade: EtcdFacade Status: beta Group: ext Basic Usage ECMA6 // Load the etcd client module. import { etcd } from \"sdk/etcd\" ; // Initialize the etcd client. let etcdClient = etcd . getClient (); // Put key-value pair where the value is a string. etcdClient . putStringValue ( \"foo\" , \"bar\" ); // Get key-value pair where value will be returned as a string. etcdClient . getKvsStringValue ( \"foo\" ); // => { \"foo\": \"bar\" } // Put key-value pair where the value is a byte array. etcdClient . putByteArrayValue ( \"foo\" , [ 98 , 97 , 114 ]); // Get key-value pair where value will be returned as a byte array. etcdClient . getKvsByteArrayValue ( \"foo\" ); // => { \"foo\": [98, 97, 114] } // Delete key-value pair. etcdClient . delete ( \"foo\" ); Functions Function Description Returns getClient() Returns an object representing an Etcd Client Client Objects Client Function Description Returns putStringValue(key, value) Puts a key-value pair to the etcd storage where the value should be a string - putByteArrayValue(key, value) Puts a key-value pair to the etcd storage where the value should be a byte array - getHeader(key) Returns an object representing an Etcd Header Header getKvsStringValue(key) Returns a key-value object with string value js object getKvsByteArrayValue(key) Returns a key-value object with byte array value js object getCount(key) Returns the number of keys if the get method is for range integer delete(key) Deletes a key-value pair - Header Function Description Returns getRevision() Returns the revision of the header integer getClusterId() Returns the cluster id of the header integer getMemberId() Returns the member id of the header integer getRaftTerm() Returns the raft term of the header integer","title":"Client"},{"location":"etcd/client/#etcd-client","text":"The Etcd Client is giving an access to an etcd key-value storage. Overview Module: etcd/client Definition: https://github.com/eclipse/dirigible/issues/675 Source: /etcd/client.js Facade: EtcdFacade Status: beta Group: ext","title":"Etcd Client"},{"location":"etcd/client/#basic-usage","text":"ECMA6 // Load the etcd client module. import { etcd } from \"sdk/etcd\" ; // Initialize the etcd client. let etcdClient = etcd . getClient (); // Put key-value pair where the value is a string. etcdClient . putStringValue ( \"foo\" , \"bar\" ); // Get key-value pair where value will be returned as a string. etcdClient . getKvsStringValue ( \"foo\" ); // => { \"foo\": \"bar\" } // Put key-value pair where the value is a byte array. etcdClient . putByteArrayValue ( \"foo\" , [ 98 , 97 , 114 ]); // Get key-value pair where value will be returned as a byte array. etcdClient . getKvsByteArrayValue ( \"foo\" ); // => { \"foo\": [98, 97, 114] } // Delete key-value pair. etcdClient . delete ( \"foo\" );","title":"Basic Usage"},{"location":"etcd/client/#functions","text":"Function Description Returns getClient() Returns an object representing an Etcd Client Client","title":"Functions"},{"location":"etcd/client/#objects","text":"","title":"Objects"},{"location":"etcd/client/#client","text":"Function Description Returns putStringValue(key, value) Puts a key-value pair to the etcd storage where the value should be a string - putByteArrayValue(key, value) Puts a key-value pair to the etcd storage where the value should be a byte array - getHeader(key) Returns an object representing an Etcd Header Header getKvsStringValue(key) Returns a key-value object with string value js object getKvsByteArrayValue(key) Returns a key-value object with byte array value js object getCount(key) Returns the number of keys if the get method is for range integer delete(key) Deletes a key-value pair -","title":"Client"},{"location":"etcd/client/#header","text":"Function Description Returns getRevision() Returns the revision of the header integer getClusterId() Returns the cluster id of the header integer getMemberId() Returns the member id of the header integer getRaftTerm() Returns the raft term of the header integer","title":"Header"},{"location":"extensions/extension-point/","text":"Extension Point Overview Status: stable Group: core Extension points Extension points are used to group extensions by type. It is a simple JSON formatted *.extensionpoint file and can be placed anywhere in your project, although it's recommended to place it inside an extensionpoints folder, in the root of your project. { \"name\" : \"extension-point-name\" , \"description\" : \"Description for Extension Point 1\" }","title":"Extension Point"},{"location":"extensions/extension-point/#extension-point","text":"Overview Status: stable Group: core","title":"Extension Point"},{"location":"extensions/extension-point/#extension-points","text":"Extension points are used to group extensions by type. It is a simple JSON formatted *.extensionpoint file and can be placed anywhere in your project, although it's recommended to place it inside an extensionpoints folder, in the root of your project. { \"name\" : \"extension-point-name\" , \"description\" : \"Description for Extension Point 1\" }","title":"Extension points"},{"location":"extensions/extensions-client/","text":"Extensions (Client) Used for getting extensions that registered on the platform. Overview Module: platform-core Source: platform-core/ui/platform/extensions.js Web Link: /services/web/platform-core/ui/platform/extensions.js Status: stable Group: platform Extension files Extensions are used for creating custom modules and extend the functionality of the platform. They can be used both for client and server modules. An extension must first be registered with an extension point . It is a simple JSON formatted *.extension file and can be placed anywhere in your project, although it's recommended to place it inside an extensions folder, in the root of your project. { \"module\" : \"module.js\" , \"extensionPoint\" : \"extension-point-name\" , \"description\" : \"Example extension\" } The module is a simple JavaScript file that exports functions and/or data. exports . getFunc = () => ({ id : 'id-data' , path : '/uri/path/to/an/api/' , ... }); Basic Usage If you are using the standard Dirigible view configuration, extensions support is enabled automatically. All you have to do is to include Extensions in your controller. exampleView . controller ( 'ExampleViewController' , ( $scope , Extensions ) => { Extensions . getViews (). then (( response ) => { console . log ( response . data ); }, ( error ) => { console . error ( error ); }); }); If you are making a custom view, you can include the API (called platformExtensions ) using the web link above, include it in your app module and then include Extensions in your controller: const exampleView = angular . module ( 'exampleView' , [ ... 'platformExtensions' , ]); exampleView . controller ( 'ExampleViewController' , ( $scope , Extensions ) => {...}); If you have custom extension points and extensions, then you can call your extension service using any HTTP capable library (like $http or fetch) and get the data. $http . get ( '/services/js/project-name/services/new-service.js' ). then (( response ) => { console . log ( response ); }); Functions Function Description Returns getViews(ExPointArray) Returns all registered views. Promise getSubviews(ExPointArray) Returns all registered subviews. Promise getWindows(ExPointArray) Returns all registered windows. Promise getSettings(ExPointArray) Returns all registered settings. Promise getEditors(ExPointArray) Returns all registered editors. Promise getPerspectives(ExPointArray) Returns all registered perspectives. Promise getShells(ExPointArray) Returns all registered shells. Promise getMenus(ExPointArray) Returns all registered menus. Promise getThemes(ExPointArray) Returns all registered themes. Promise Note Params in square brackets are optional. Typedefs ExPointArray : Array Type Description string Extension point id. Example Extensions . getViews (). then (( response ) => { console . log ( response . data ); }, ( error ) => { console . error ( error ); }); If you have a custom extension point for your own views: const views = Extensions . getViews ([ 'custom-point' ]); If you want to mix extensions from the built-in extension-point and your custom one: const views = Extensions . getViews ([ 'platform-views' , 'custom-point' ]);","title":"Extensions (Client)"},{"location":"extensions/extensions-client/#extensions-client","text":"Used for getting extensions that registered on the platform. Overview Module: platform-core Source: platform-core/ui/platform/extensions.js Web Link: /services/web/platform-core/ui/platform/extensions.js Status: stable Group: platform","title":"Extensions (Client)"},{"location":"extensions/extensions-client/#extension-files","text":"Extensions are used for creating custom modules and extend the functionality of the platform. They can be used both for client and server modules. An extension must first be registered with an extension point . It is a simple JSON formatted *.extension file and can be placed anywhere in your project, although it's recommended to place it inside an extensions folder, in the root of your project. { \"module\" : \"module.js\" , \"extensionPoint\" : \"extension-point-name\" , \"description\" : \"Example extension\" } The module is a simple JavaScript file that exports functions and/or data. exports . getFunc = () => ({ id : 'id-data' , path : '/uri/path/to/an/api/' , ... });","title":"Extension files"},{"location":"extensions/extensions-client/#basic-usage","text":"If you are using the standard Dirigible view configuration, extensions support is enabled automatically. All you have to do is to include Extensions in your controller. exampleView . controller ( 'ExampleViewController' , ( $scope , Extensions ) => { Extensions . getViews (). then (( response ) => { console . log ( response . data ); }, ( error ) => { console . error ( error ); }); }); If you are making a custom view, you can include the API (called platformExtensions ) using the web link above, include it in your app module and then include Extensions in your controller: const exampleView = angular . module ( 'exampleView' , [ ... 'platformExtensions' , ]); exampleView . controller ( 'ExampleViewController' , ( $scope , Extensions ) => {...}); If you have custom extension points and extensions, then you can call your extension service using any HTTP capable library (like $http or fetch) and get the data. $http . get ( '/services/js/project-name/services/new-service.js' ). then (( response ) => { console . log ( response ); });","title":"Basic Usage"},{"location":"extensions/extensions-client/#functions","text":"Function Description Returns getViews(ExPointArray) Returns all registered views. Promise getSubviews(ExPointArray) Returns all registered subviews. Promise getWindows(ExPointArray) Returns all registered windows. Promise getSettings(ExPointArray) Returns all registered settings. Promise getEditors(ExPointArray) Returns all registered editors. Promise getPerspectives(ExPointArray) Returns all registered perspectives. Promise getShells(ExPointArray) Returns all registered shells. Promise getMenus(ExPointArray) Returns all registered menus. Promise getThemes(ExPointArray) Returns all registered themes. Promise Note Params in square brackets are optional.","title":"Functions"},{"location":"extensions/extensions-client/#typedefs","text":"","title":"Typedefs"},{"location":"extensions/extensions-client/#expointarray-array","text":"Type Description string Extension point id.","title":"ExPointArray : Array"},{"location":"extensions/extensions-client/#example","text":"Extensions . getViews (). then (( response ) => { console . log ( response . data ); }, ( error ) => { console . error ( error ); }); If you have a custom extension point for your own views: const views = Extensions . getViews ([ 'custom-point' ]); If you want to mix extensions from the built-in extension-point and your custom one: const views = Extensions . getViews ([ 'platform-views' , 'custom-point' ]);","title":"Example"},{"location":"extensions/extensions-server/","text":"Extensions (Server) Overview Module: extensions/extensions Definition: https://github.com/eclipse/dirigible/issues/18 Source: /extensions/extensions.js Status: stable Group: core Extension files Extensions are used for creating custom modules and extend the functionality of the platform. They can be used both for client and server modules. An extension must first be registered with an extension point . It is a simple JSON formatted *.extension file and can be placed anywhere in your project, although it's recommended to place it inside an extensions folder, in the root of your project. { \"module\" : \"module.js\" , \"extensionPoint\" : \"extension-point-name\" , \"description\" : \"Example extension\" } The module is a simple JavaScript file that exports functions and/or data. exports . getFunc = () => ({ id : 'id-data' , path : '/uri/path/to/an/api/' , ... }); Basic Usage Here are two examples of an extension service that can be used to retrieve extension information. Example ECMA6 import { response } from \"sdk/http\" ; import { extensions } from \"sdk/extensions\" ; const customExtensions = await Promise . resolve ( extensions . loadExtensionModules ( 'extension-point-name' )); const extensionConfigs = []; for ( let i = 0 ; i < customExtensions ? . length ; i ++ ) { extensionConfigs . push ( customExtensions [ i ]. getFunc ()); } response . setContentType ( \"application/json\" ); response . println ( JSON . stringify ( extensionConfigs )); response . flush (); response . close (); import { extensions } from \"sdk/extensions\" ; import { response } from \"sdk/http\" ; const mainmenu = []; const menuExtensions = extensions . getExtensions ( \"example-menu\" ); for ( let i = 0 ; i < menuExtensions . length ; i ++ ) { const extensionPath = menuExtensions [ i ]; // To require CommonJS extension // const menuExtension = require(extensionPath); // const menu = menuExtension.getMenu(); // Note: ECMA6 imports are always relative, thus providing the relative path to the project root folder. // In this sample it's assumed that the file is located at \"my-project/myFolder/file.mjs\" const { getMenu } = await import ( `../../ ${ extensionPath } ` ); const menu = getMenu (); mainmenu . push ( menu ); } response . setContentType ( \"application/json\" ); response . println ( JSON . stringify ( mainmenu )); response . flush (); response . close (); Functions Function Description Returns getExtensionPoints() Returns an array of the extension points names array of string getExtensions(extensionPoint) Returns an array of the extensions names for the specified extension point array of string","title":"Extensions (Server)"},{"location":"extensions/extensions-server/#extensions-server","text":"Overview Module: extensions/extensions Definition: https://github.com/eclipse/dirigible/issues/18 Source: /extensions/extensions.js Status: stable Group: core","title":"Extensions (Server)"},{"location":"extensions/extensions-server/#extension-files","text":"Extensions are used for creating custom modules and extend the functionality of the platform. They can be used both for client and server modules. An extension must first be registered with an extension point . It is a simple JSON formatted *.extension file and can be placed anywhere in your project, although it's recommended to place it inside an extensions folder, in the root of your project. { \"module\" : \"module.js\" , \"extensionPoint\" : \"extension-point-name\" , \"description\" : \"Example extension\" } The module is a simple JavaScript file that exports functions and/or data. exports . getFunc = () => ({ id : 'id-data' , path : '/uri/path/to/an/api/' , ... });","title":"Extension files"},{"location":"extensions/extensions-server/#basic-usage","text":"Here are two examples of an extension service that can be used to retrieve extension information. Example ECMA6 import { response } from \"sdk/http\" ; import { extensions } from \"sdk/extensions\" ; const customExtensions = await Promise . resolve ( extensions . loadExtensionModules ( 'extension-point-name' )); const extensionConfigs = []; for ( let i = 0 ; i < customExtensions ? . length ; i ++ ) { extensionConfigs . push ( customExtensions [ i ]. getFunc ()); } response . setContentType ( \"application/json\" ); response . println ( JSON . stringify ( extensionConfigs )); response . flush (); response . close (); import { extensions } from \"sdk/extensions\" ; import { response } from \"sdk/http\" ; const mainmenu = []; const menuExtensions = extensions . getExtensions ( \"example-menu\" ); for ( let i = 0 ; i < menuExtensions . length ; i ++ ) { const extensionPath = menuExtensions [ i ]; // To require CommonJS extension // const menuExtension = require(extensionPath); // const menu = menuExtension.getMenu(); // Note: ECMA6 imports are always relative, thus providing the relative path to the project root folder. // In this sample it's assumed that the file is located at \"my-project/myFolder/file.mjs\" const { getMenu } = await import ( `../../ ${ extensionPath } ` ); const menu = getMenu (); mainmenu . push ( menu ); } response . setContentType ( \"application/json\" ); response . println ( JSON . stringify ( mainmenu )); response . flush (); response . close ();","title":"Basic Usage"},{"location":"extensions/extensions-server/#functions","text":"Function Description Returns getExtensionPoints() Returns an array of the extension points names array of string getExtensions(extensionPoint) Returns an array of the extensions names for the specified extension point array of string","title":"Functions"},{"location":"git/client/","text":"Git Client Git Client is used by scripting services to call git commands Overview Module: git/client Source: /git/client.js Status: stable Group: platform Basic Usage ECMA6 import { client } from \"sdk/git\" const user = \"dirigible\" ; const email = \"dirigible@eclipse.org\" ; const workspaceName = \"workspace\" ; const projectName = \"project\" ; const repositoryName = projectName ; const initialCommitMessage = \"Initial commit\" ; const commitMessage = \"Second commit\" ; const add = true ; client . initRepository ( user , email , workspaceName , projectName , repositoryName , initialCommitMessage ); client . commit ( user , email , workspaceName , repositoryName , commitMessage , add ); Functions Function Description Returns initRepository(user, email, workspaceName, projectName, repositoryName, commitMessage) Initializes a repository in the selected project - commit(user, userEmail, workspaceName, repositoryName, commitMessage, add) Creates a new commit in the selected project repository - getGitRepositories(workspaceName) Returns all git repositories in the selected workspace Projects getHistory(repositoryName, workspaceName, path) Returns git history for the selected repository GitCommitInfoList deleteRepository(workspaceName, repositoryName) Deletes git repository - cloneRepository(workspaceName, repositoryUri, username, password, branch) Clones repository from given URL in selected workspace - pull(workspaceName, repositoryName, username, password) Pull current branch of selected repository - push(workspaceName, repositoryName, username, password) Push current branch to origin - checkout(workspaceName, repositoryName, branchName) Checkout given branch - createBranch(workspaceName, repositoryName, branchName, startingPoint) Creates a new branch - hardReset(workspaceName, repositoryName) Hard reset current branch - rebase(workspaceName, repositoryName, branchName) Rebase selected branch - status(workspaceName, repositoryName) Get selected repository status Status getBranch(workspaceName, repositoryName) Get current branch String getLocalBranches(workspaceName, repositoryName) Get list of local branches Branches getRemoteBranches(workspaceName, repositoryName) Get list of remote branches Branches getUnstagedChanges(workspaceName, repositoryName) Get unstaged changes for selected repository GitChangedFiles getStagedChanges(workspaceName, repositoryName) Get staged changes for selected repository GitChangedFiles getFileContent(workspaceName, repositoryName, filePath, revStr) Get the content of selected file String Objects GitCommitInfoList Function Description Returns size() Returns the size of this GitCommitInfoList programmatically integer get(index) Gets a GitCommitInfo by index programmatically GitCommitInfo GitCommitInfo Function Description Returns getId() Gets the id of the commit string getAuthor() Gets the author of the commit string getEmailAddress() Gets the author's email address string getDateTime() Gets the date and time of the commit string getMessage() Gets the commit's message string Status Function Description Returns isClean() Checks whether the repository is clean boolean getAdded() Gets added files array of strings getChanged() Gets changed files array of strings getRemoved() Gets removed files array of strings getMissing() Gets missing files array of strings getUntracked() Gets untracked files array of strings getUntrackedFolders() Gets untracked folders array of strings getConflicting() Gets conflicting files array of strings getIgnoredNotInIndex() Get ignored files array of strings getUncommittedChanges() Get uncommited changes array of strings Branches Function Description Returns size() Returns the size of this Branches list programmatically integer get(index) Gets a Branch by index programmatically Branch Branch Function Description Returns getName() Gets the name of the branch string isRemote() Checks whether the branch is remote boolean isCurrent Checks whether the branch is current boolean getCommitObjectId() Gets the commit's object id string getCommitShortId() Gets the commit's short id string getCommitDate() Gets the commit's data string getCommitMessage() Gets the commit's message string getCommitAuthor Gets the commit's author name string GitChangedFiles Function Description Returns size() Returns the size of this GitChangedFiles list programmatically integer get(index) Gets a GitChangedFile by index programmatically GitChangedFile GitChangedFile Function Description Returns getPath() Gets the path of the changed file string","title":"Client"},{"location":"git/client/#git-client","text":"Git Client is used by scripting services to call git commands Overview Module: git/client Source: /git/client.js Status: stable Group: platform","title":"Git Client"},{"location":"git/client/#basic-usage","text":"ECMA6 import { client } from \"sdk/git\" const user = \"dirigible\" ; const email = \"dirigible@eclipse.org\" ; const workspaceName = \"workspace\" ; const projectName = \"project\" ; const repositoryName = projectName ; const initialCommitMessage = \"Initial commit\" ; const commitMessage = \"Second commit\" ; const add = true ; client . initRepository ( user , email , workspaceName , projectName , repositoryName , initialCommitMessage ); client . commit ( user , email , workspaceName , repositoryName , commitMessage , add );","title":"Basic Usage"},{"location":"git/client/#functions","text":"Function Description Returns initRepository(user, email, workspaceName, projectName, repositoryName, commitMessage) Initializes a repository in the selected project - commit(user, userEmail, workspaceName, repositoryName, commitMessage, add) Creates a new commit in the selected project repository - getGitRepositories(workspaceName) Returns all git repositories in the selected workspace Projects getHistory(repositoryName, workspaceName, path) Returns git history for the selected repository GitCommitInfoList deleteRepository(workspaceName, repositoryName) Deletes git repository - cloneRepository(workspaceName, repositoryUri, username, password, branch) Clones repository from given URL in selected workspace - pull(workspaceName, repositoryName, username, password) Pull current branch of selected repository - push(workspaceName, repositoryName, username, password) Push current branch to origin - checkout(workspaceName, repositoryName, branchName) Checkout given branch - createBranch(workspaceName, repositoryName, branchName, startingPoint) Creates a new branch - hardReset(workspaceName, repositoryName) Hard reset current branch - rebase(workspaceName, repositoryName, branchName) Rebase selected branch - status(workspaceName, repositoryName) Get selected repository status Status getBranch(workspaceName, repositoryName) Get current branch String getLocalBranches(workspaceName, repositoryName) Get list of local branches Branches getRemoteBranches(workspaceName, repositoryName) Get list of remote branches Branches getUnstagedChanges(workspaceName, repositoryName) Get unstaged changes for selected repository GitChangedFiles getStagedChanges(workspaceName, repositoryName) Get staged changes for selected repository GitChangedFiles getFileContent(workspaceName, repositoryName, filePath, revStr) Get the content of selected file String","title":"Functions"},{"location":"git/client/#objects","text":"","title":"Objects"},{"location":"git/client/#gitcommitinfolist","text":"Function Description Returns size() Returns the size of this GitCommitInfoList programmatically integer get(index) Gets a GitCommitInfo by index programmatically GitCommitInfo","title":"GitCommitInfoList"},{"location":"git/client/#gitcommitinfo","text":"Function Description Returns getId() Gets the id of the commit string getAuthor() Gets the author of the commit string getEmailAddress() Gets the author's email address string getDateTime() Gets the date and time of the commit string getMessage() Gets the commit's message string","title":"GitCommitInfo"},{"location":"git/client/#status","text":"Function Description Returns isClean() Checks whether the repository is clean boolean getAdded() Gets added files array of strings getChanged() Gets changed files array of strings getRemoved() Gets removed files array of strings getMissing() Gets missing files array of strings getUntracked() Gets untracked files array of strings getUntrackedFolders() Gets untracked folders array of strings getConflicting() Gets conflicting files array of strings getIgnoredNotInIndex() Get ignored files array of strings getUncommittedChanges() Get uncommited changes array of strings","title":"Status"},{"location":"git/client/#branches","text":"Function Description Returns size() Returns the size of this Branches list programmatically integer get(index) Gets a Branch by index programmatically Branch","title":"Branches"},{"location":"git/client/#branch","text":"Function Description Returns getName() Gets the name of the branch string isRemote() Checks whether the branch is remote boolean isCurrent Checks whether the branch is current boolean getCommitObjectId() Gets the commit's object id string getCommitShortId() Gets the commit's short id string getCommitDate() Gets the commit's data string getCommitMessage() Gets the commit's message string getCommitAuthor Gets the commit's author name string","title":"Branch"},{"location":"git/client/#gitchangedfiles","text":"Function Description Returns size() Returns the size of this GitChangedFiles list programmatically integer get(index) Gets a GitChangedFile by index programmatically GitChangedFile","title":"GitChangedFiles"},{"location":"git/client/#gitchangedfile","text":"Function Description Returns getPath() Gets the path of the changed file string","title":"GitChangedFile"},{"location":"http/client-async/","text":"HTTP Client Async Client Async is used by scripting services to call asynchronously external services via HTTP. Overview Module: http/clientAsync Definition: https://github.com/eclipse/dirigible/issues/388 Source: /http/clientAsync.js Status: stable Group: core Basic Usage ECMA6 import { client , clientAsync } from \"sdk/http\" ; let clientAsyncInstance = clientAsync . getInstance (); let api = 'https://services.odata.org/V4/Northwind/Northwind.svc/' ; let northWindResponse = client . get ( api , { params : [{ name : \"$format\" , value : \"json\" }] }); let northWindEntities = JSON . parse ( northWindResponse . text ); for ( let i = 0 ; i < northWindEntities . value . length ; i ++ ) { clientAsyncInstance . getAsync ( api + northWindEntities . value [ i ]. url , { success : function ( response ) { let entity = JSON . parse ( response . text ); console . error ( entity [ \"@odata.context\" ] + \" : \" + entity . value . length ); } }); } clientAsyncInstance . execute (); Functions Function Description Returns getAsync(url, config, options) Makes a HTTP GET Async request to a remote service at the URL by the HttpOptions and returns HttpResponse to the HttpResponseCallback - postAsync(url, config, options) Makes a HTTP POST Async request to a remote service at the URL by the HttpOptions and returns HttpResponse to the HttpResponseCallback - putAsync(url, config, options) Makes a HTTP PUT Async request to a remote service at the URL by the HttpOptions and returns HttpResponse to the HttpResponseCallback - deleteAsync(url, config, options) Makes a HTTP DELETE Async request to a remote service at the URL by the HttpOptions and returns HttpResponse to the HttpResponseCallback - headAsync(url, config, options) Makes a HTTP HEAD Async request to a remote service at the URL by the HttpOptions and returns HttpResponse to the HttpResponseCallback - traceAsync(url, config, options) Makes a HTTP TRACE Async request to a remote service at the URL by the HttpOptions and returns HttpResponse to the HttpResponseCallback - Objects HttpResponseCallbackConfig Property Description Type success The success response callback HttpResponseCallback function error The error response callback HttpResponseCallback function cancel The cancel response callback HttpResponseCallback function HttpResponseCallback Parameters Description Type response? The HTTP Response object HttpResponse error? The HTTP Response Error Object HttpResponseError HttpResponse Property Description Type statusCode The Response status code int statusMessage The Response status message string data The Response data array of bytes text The Response data as text string binary Whether the Response data is binary in data or string in text boolean protocol The HTTP version of the Response string headers The Response headers array of HttpHeader HttpResponseError Property Description Type message The error message string HttpHeader Property Description Type name The name of the header string value The value of the header string HttpParam Property Description Type name The name of the param string value The value of the param string HttpOptions Property Description Type data The body of the HTTP Request as binary array of bytes text The body of the HTTP Request as text string files The body of the HTTP Request as files (for POST) array of strings params The body of the HTTP Request as form parameters array of HttpParam binary Whether the body of the HTTP Request is binary boolean characterEncodingEnabled The character encoding enabled parameter. Default is true boolean characterEncoding The character encoding parameter. Default is UTF-8 string contentType The content type parameter. Default is plain/text string headers The Response headers array of HttpHeader proxyHost The proxy host parameter string proxyPort The proxy port parameter int expectContinueEnabled The continue enabled parameter boolean cookieSpec The cookieSpec parameter string redirectsEnabled The redirects enabled parameter boolean relativeRedirectsAllowed The relative redirects allowed parameter boolean circularRedirectsAllowed The circular redirects allowed parameter boolean maxRedirects The max redirects parameter int authenticationEnabled The authentication enabled parameter boolean targetPreferredAuthSchemes The target preferred authentication schemes parameter array of strings proxyPreferredAuthSchemes The proxy preferred authentication schemes parameter array of strings connectionRequestTimeout The connection request timeout parameter int connectTimeout The connect timeout parameter int socketTimeout The socket timeout parameter int contentCompressionEnabled The content compression enabled parameter boolean sslTrustAllEnabled The SSL trust all enabled parameter boolean","title":"Client Async"},{"location":"http/client-async/#http-client-async","text":"Client Async is used by scripting services to call asynchronously external services via HTTP. Overview Module: http/clientAsync Definition: https://github.com/eclipse/dirigible/issues/388 Source: /http/clientAsync.js Status: stable Group: core","title":"HTTP Client Async"},{"location":"http/client-async/#basic-usage","text":"ECMA6 import { client , clientAsync } from \"sdk/http\" ; let clientAsyncInstance = clientAsync . getInstance (); let api = 'https://services.odata.org/V4/Northwind/Northwind.svc/' ; let northWindResponse = client . get ( api , { params : [{ name : \"$format\" , value : \"json\" }] }); let northWindEntities = JSON . parse ( northWindResponse . text ); for ( let i = 0 ; i < northWindEntities . value . length ; i ++ ) { clientAsyncInstance . getAsync ( api + northWindEntities . value [ i ]. url , { success : function ( response ) { let entity = JSON . parse ( response . text ); console . error ( entity [ \"@odata.context\" ] + \" : \" + entity . value . length ); } }); } clientAsyncInstance . execute ();","title":"Basic Usage"},{"location":"http/client-async/#functions","text":"Function Description Returns getAsync(url, config, options) Makes a HTTP GET Async request to a remote service at the URL by the HttpOptions and returns HttpResponse to the HttpResponseCallback - postAsync(url, config, options) Makes a HTTP POST Async request to a remote service at the URL by the HttpOptions and returns HttpResponse to the HttpResponseCallback - putAsync(url, config, options) Makes a HTTP PUT Async request to a remote service at the URL by the HttpOptions and returns HttpResponse to the HttpResponseCallback - deleteAsync(url, config, options) Makes a HTTP DELETE Async request to a remote service at the URL by the HttpOptions and returns HttpResponse to the HttpResponseCallback - headAsync(url, config, options) Makes a HTTP HEAD Async request to a remote service at the URL by the HttpOptions and returns HttpResponse to the HttpResponseCallback - traceAsync(url, config, options) Makes a HTTP TRACE Async request to a remote service at the URL by the HttpOptions and returns HttpResponse to the HttpResponseCallback -","title":"Functions"},{"location":"http/client-async/#objects","text":"","title":"Objects"},{"location":"http/client-async/#httpresponsecallbackconfig","text":"Property Description Type success The success response callback HttpResponseCallback function error The error response callback HttpResponseCallback function cancel The cancel response callback HttpResponseCallback function","title":"HttpResponseCallbackConfig"},{"location":"http/client-async/#httpresponsecallback","text":"Parameters Description Type response? The HTTP Response object HttpResponse error? The HTTP Response Error Object HttpResponseError","title":"HttpResponseCallback"},{"location":"http/client-async/#httpresponse","text":"Property Description Type statusCode The Response status code int statusMessage The Response status message string data The Response data array of bytes text The Response data as text string binary Whether the Response data is binary in data or string in text boolean protocol The HTTP version of the Response string headers The Response headers array of HttpHeader","title":"HttpResponse"},{"location":"http/client-async/#httpresponseerror","text":"Property Description Type message The error message string","title":"HttpResponseError"},{"location":"http/client-async/#httpheader","text":"Property Description Type name The name of the header string value The value of the header string","title":"HttpHeader"},{"location":"http/client-async/#httpparam","text":"Property Description Type name The name of the param string value The value of the param string","title":"HttpParam"},{"location":"http/client-async/#httpoptions","text":"Property Description Type data The body of the HTTP Request as binary array of bytes text The body of the HTTP Request as text string files The body of the HTTP Request as files (for POST) array of strings params The body of the HTTP Request as form parameters array of HttpParam binary Whether the body of the HTTP Request is binary boolean characterEncodingEnabled The character encoding enabled parameter. Default is true boolean characterEncoding The character encoding parameter. Default is UTF-8 string contentType The content type parameter. Default is plain/text string headers The Response headers array of HttpHeader proxyHost The proxy host parameter string proxyPort The proxy port parameter int expectContinueEnabled The continue enabled parameter boolean cookieSpec The cookieSpec parameter string redirectsEnabled The redirects enabled parameter boolean relativeRedirectsAllowed The relative redirects allowed parameter boolean circularRedirectsAllowed The circular redirects allowed parameter boolean maxRedirects The max redirects parameter int authenticationEnabled The authentication enabled parameter boolean targetPreferredAuthSchemes The target preferred authentication schemes parameter array of strings proxyPreferredAuthSchemes The proxy preferred authentication schemes parameter array of strings connectionRequestTimeout The connection request timeout parameter int connectTimeout The connect timeout parameter int socketTimeout The socket timeout parameter int contentCompressionEnabled The content compression enabled parameter boolean sslTrustAllEnabled The SSL trust all enabled parameter boolean","title":"HttpOptions"},{"location":"http/client/","text":"HTTP Client Client is used by scripting services to call external services via HTTP. Overview Module: http/client Definition: https://github.com/eclipse/dirigible/issues/15 Source: /http/client.js Status: stable Group: core Basic Usage ECMA6 import { client , response } from \"sdk/http\" ; const httpResponse = client . get ( \"https://services.odata.org/V4/Northwind/Northwind.svc/\" ); response . println ( httpResponse . statusMessage ); response . println ( httpResponse . text ); response . flush (); response . close (); Functions Function Description Returns get(url, options) Makes a HTTP GET request to a remote service at the URL by the HttpOptions and returns the result HttpResponse post(url, options) Makes a HTTP POST request to a remote service at the URL by the HttpOptions and returns the result HttpResponse put(url, options) Makes a HTTP PUT request to a remote service at the URL by the HttpOptions and returns the result HttpResponse delete(url, options) Makes a HTTP DELETE request to a remote service at the URL by the HttpOptions and returns the result HttpResponse head(url, options) Makes a HTTP HEAD request to a remote service at the URL by the HttpOptions and returns the result HttpResponse trace(url, options) Makes a HTTP TRACE request to a remote service at the URL by the HttpOptions and returns the result HttpResponse Objects HttpResponse Property Description Type statusCode The Response status code int statusMessage The Response status message string data The Response data array of bytes text The Response data as text string binary Whether the Response data is binary in data or string in text boolean protocol The HTTP version of the Response string headers The Response headers array of HttpHeader HttpHeader Property Description Type name The name of the header string value The value of the header string HttpParam Property Description Type name The name of the param string value The value of the param string HttpOptions Property Description Type data The body of the HTTP Request as binary array of bytes text The body of the HTTP Request as text string files The body of the HTTP Request as files (for POST) array of strings params The body of the HTTP Request as form parameters array of HttpParam binary Whether the body of the HTTP Request is binary boolean characterEncodingEnabled The character encoding enabled parameter. Default is true boolean characterEncoding The character encoding parameter. Default is UTF-8 string contentType The content type parameter. Default is plain/text string headers The Response headers array of HttpHeader proxyHost The proxy host parameter string proxyPort The proxy port parameter int expectContinueEnabled The continue enabled parameter boolean cookieSpec The cookieSpec parameter string redirectsEnabled The redirects enabled parameter boolean relativeRedirectsAllowed The relative redirects allowed parameter boolean circularRedirectsAllowed The circular redirects allowed parameter boolean maxRedirects The max redirects parameter int authenticationEnabled The authentication enabled parameter boolean targetPreferredAuthSchemes The target preferred authentication schemes parameter array of strings proxyPreferredAuthSchemes The proxy preferred authentication schemes parameter array of strings connectionRequestTimeout The connection request timeout parameter int connectTimeout The connect timeout parameter int socketTimeout The socket timeout parameter int contentCompressionEnabled The content compression enabled parameter boolean sslTrustAllEnabled The SSL trust all enabled parameter boolean","title":"Client"},{"location":"http/client/#http-client","text":"Client is used by scripting services to call external services via HTTP. Overview Module: http/client Definition: https://github.com/eclipse/dirigible/issues/15 Source: /http/client.js Status: stable Group: core","title":"HTTP Client"},{"location":"http/client/#basic-usage","text":"ECMA6 import { client , response } from \"sdk/http\" ; const httpResponse = client . get ( \"https://services.odata.org/V4/Northwind/Northwind.svc/\" ); response . println ( httpResponse . statusMessage ); response . println ( httpResponse . text ); response . flush (); response . close ();","title":"Basic Usage"},{"location":"http/client/#functions","text":"Function Description Returns get(url, options) Makes a HTTP GET request to a remote service at the URL by the HttpOptions and returns the result HttpResponse post(url, options) Makes a HTTP POST request to a remote service at the URL by the HttpOptions and returns the result HttpResponse put(url, options) Makes a HTTP PUT request to a remote service at the URL by the HttpOptions and returns the result HttpResponse delete(url, options) Makes a HTTP DELETE request to a remote service at the URL by the HttpOptions and returns the result HttpResponse head(url, options) Makes a HTTP HEAD request to a remote service at the URL by the HttpOptions and returns the result HttpResponse trace(url, options) Makes a HTTP TRACE request to a remote service at the URL by the HttpOptions and returns the result HttpResponse","title":"Functions"},{"location":"http/client/#objects","text":"","title":"Objects"},{"location":"http/client/#httpresponse","text":"Property Description Type statusCode The Response status code int statusMessage The Response status message string data The Response data array of bytes text The Response data as text string binary Whether the Response data is binary in data or string in text boolean protocol The HTTP version of the Response string headers The Response headers array of HttpHeader","title":"HttpResponse"},{"location":"http/client/#httpheader","text":"Property Description Type name The name of the header string value The value of the header string","title":"HttpHeader"},{"location":"http/client/#httpparam","text":"Property Description Type name The name of the param string value The value of the param string","title":"HttpParam"},{"location":"http/client/#httpoptions","text":"Property Description Type data The body of the HTTP Request as binary array of bytes text The body of the HTTP Request as text string files The body of the HTTP Request as files (for POST) array of strings params The body of the HTTP Request as form parameters array of HttpParam binary Whether the body of the HTTP Request is binary boolean characterEncodingEnabled The character encoding enabled parameter. Default is true boolean characterEncoding The character encoding parameter. Default is UTF-8 string contentType The content type parameter. Default is plain/text string headers The Response headers array of HttpHeader proxyHost The proxy host parameter string proxyPort The proxy port parameter int expectContinueEnabled The continue enabled parameter boolean cookieSpec The cookieSpec parameter string redirectsEnabled The redirects enabled parameter boolean relativeRedirectsAllowed The relative redirects allowed parameter boolean circularRedirectsAllowed The circular redirects allowed parameter boolean maxRedirects The max redirects parameter int authenticationEnabled The authentication enabled parameter boolean targetPreferredAuthSchemes The target preferred authentication schemes parameter array of strings proxyPreferredAuthSchemes The proxy preferred authentication schemes parameter array of strings connectionRequestTimeout The connection request timeout parameter int connectTimeout The connect timeout parameter int socketTimeout The socket timeout parameter int contentCompressionEnabled The content compression enabled parameter boolean sslTrustAllEnabled The SSL trust all enabled parameter boolean","title":"HttpOptions"},{"location":"http/request/","text":"HTTP Request HTTP Request object provided to the scripting services implementation. It contains the headers and parameters coming as input from the HTTP call. Overview Module: http/request Definition: https://github.com/eclipse/dirigible/issues/12 Source: /http/request.js Status: stable Group: core Basic Usage ECMA6 import { request , response } from \"sdk/http\" ; let method = request . getMethod (); response . println ( \"[Method]: \" + method ); response . flush (); response . close (); Functions Function Description Returns isValid() Returns true if the current execution context is in a HTTP call boolean getMethod() Returns the HTTP request method - GET, POST, PUT, DELETE, HEAD, TRACE string getRemoteUser() Returns the user name performing the request string getPathInfo() Returns the path info section of the URL string getPathTranslated() Returns the translated path string getHeader(name) Returns the value of the header by name, if any string isUserInRole(role) Returns true if the user has the given role and false otherwise string getAttribute(name) Returns the value of the attribute by name, if any string getAuthType() Returns the authentication type string getCookies() Returns all the cookies from the request array of HttpCookie getAttributeNames() Returns the names of all the attribute array of string getCharacterEncoding() Returns the character encoding string getContentLength() Returns the content length string getHeaders() Returns the array of headers array of HttpHeader getContentType() Returns the content type string getBytes() Returns the content as byte array array of bytes getText() Returns the content as text string getJSON() Returns a JSON object, after parsing the content as text Object getParameter(name) Returns the value of the parameter by name, if any string getHeaderNames() Returns the names of all the headers array of string getParameterNames() Returns the names of all the parameters array of string getParameterValues(name) Returns the values of the parameter by name array of string getParameters() Returns the all the parameters - name and value pairs array of pair getProtocol() Returns the protocol string getScheme() Returns the scheme string getContextPath() Returns the context path string getServerName() Returns the server name string getServerPort() Returns the server port int getQueryString() Returns the query string string getRemoteAddress() Returns the remote address string getRemoteHost() Returns the remote host string setAttribute(name,value) Sets the value of the attribute by name - removeAttribute(name) Sets the value of the attribute by name - getLocale() Returns the locale string string getRequestURI() Returns the request URI string isSecure() Whether the request goes via a secured channel boolean getRequestURL() Returns the request URL string getServicePath() Returns the service path string getRemotePort() Returns the remote port string getLocalName() Returns the local name string getLocalAddress() Returns the local address string getLocalPort() Returns the local port string Objects HttpCookie Property Description Type name The HttpCookie name string value The HttpCookie value string comment The HttpCookie comment section string maxAge The HttpCookie maximum age int path The URI path to which the client should return the HttpCookie string domain The domain name set to this HttpCookie string secure Returns true if the client is sending HttpCookie only over a secure protocol string version Returns the version of the protocol this cookie complies with 0 httpOnly The HttpCookie will not be exposed to the client-side scripting code if true boolean HttpHeader Property Description Type name The name of the header string value The value of the header string","title":"Request"},{"location":"http/request/#http-request","text":"HTTP Request object provided to the scripting services implementation. It contains the headers and parameters coming as input from the HTTP call. Overview Module: http/request Definition: https://github.com/eclipse/dirigible/issues/12 Source: /http/request.js Status: stable Group: core","title":"HTTP Request"},{"location":"http/request/#basic-usage","text":"ECMA6 import { request , response } from \"sdk/http\" ; let method = request . getMethod (); response . println ( \"[Method]: \" + method ); response . flush (); response . close ();","title":"Basic Usage"},{"location":"http/request/#functions","text":"Function Description Returns isValid() Returns true if the current execution context is in a HTTP call boolean getMethod() Returns the HTTP request method - GET, POST, PUT, DELETE, HEAD, TRACE string getRemoteUser() Returns the user name performing the request string getPathInfo() Returns the path info section of the URL string getPathTranslated() Returns the translated path string getHeader(name) Returns the value of the header by name, if any string isUserInRole(role) Returns true if the user has the given role and false otherwise string getAttribute(name) Returns the value of the attribute by name, if any string getAuthType() Returns the authentication type string getCookies() Returns all the cookies from the request array of HttpCookie getAttributeNames() Returns the names of all the attribute array of string getCharacterEncoding() Returns the character encoding string getContentLength() Returns the content length string getHeaders() Returns the array of headers array of HttpHeader getContentType() Returns the content type string getBytes() Returns the content as byte array array of bytes getText() Returns the content as text string getJSON() Returns a JSON object, after parsing the content as text Object getParameter(name) Returns the value of the parameter by name, if any string getHeaderNames() Returns the names of all the headers array of string getParameterNames() Returns the names of all the parameters array of string getParameterValues(name) Returns the values of the parameter by name array of string getParameters() Returns the all the parameters - name and value pairs array of pair getProtocol() Returns the protocol string getScheme() Returns the scheme string getContextPath() Returns the context path string getServerName() Returns the server name string getServerPort() Returns the server port int getQueryString() Returns the query string string getRemoteAddress() Returns the remote address string getRemoteHost() Returns the remote host string setAttribute(name,value) Sets the value of the attribute by name - removeAttribute(name) Sets the value of the attribute by name - getLocale() Returns the locale string string getRequestURI() Returns the request URI string isSecure() Whether the request goes via a secured channel boolean getRequestURL() Returns the request URL string getServicePath() Returns the service path string getRemotePort() Returns the remote port string getLocalName() Returns the local name string getLocalAddress() Returns the local address string getLocalPort() Returns the local port string","title":"Functions"},{"location":"http/request/#objects","text":"","title":"Objects"},{"location":"http/request/#httpcookie","text":"Property Description Type name The HttpCookie name string value The HttpCookie value string comment The HttpCookie comment section string maxAge The HttpCookie maximum age int path The URI path to which the client should return the HttpCookie string domain The domain name set to this HttpCookie string secure Returns true if the client is sending HttpCookie only over a secure protocol string version Returns the version of the protocol this cookie complies with 0 httpOnly The HttpCookie will not be exposed to the client-side scripting code if true boolean","title":"HttpCookie"},{"location":"http/request/#httpheader","text":"Property Description Type name The name of the header string value The value of the header string","title":"HttpHeader"},{"location":"http/response/","text":"HTTP Response HTTP Response object provided to the scripting services implementation to create the result, which will be sent back to the client. Overview Module: http/response Definition: https://github.com/eclipse/dirigible/issues/13 Source: /http/response.js Status: stable Group: core Basic Usage ECMA6 import { response } from \"sdk/http\" ; response . println ( \"Hello World!\" ); response . flush (); response . close (); Functions Function Description Returns isValid() Returns true if the current execution context is in a HTTP call boolean print(text) Prints the text to the response body - println(text) Prints the text to the response body with line separator at the end - write(bytes) Prints the bytes array to the response body - isCommitted() Whether response is already committed boolean setContentType() Sets the content type - flush() Flushes the content to the response to the client - close() Closes the response stream to the client - addCookie(cookie) Adds a HttpCookie to the response - containsHeader(name) Checks existence of the header by name boolean encodeURL(url) Returns the encoded url parameter string getCharacterEncoding() Returns the character encoding of the response string encodeRedirectURL() Returns the encoded redirect URL string getContentType() Returns the content type of the response string sendError(code, message) Sends an error instruction to the client with the given code and message . The message parameter is optional - setCharacterEncoding(encoding) Sets the character encoding of the response - sendRedirect(location) Sends a redirect instruction to the client to the given location - setContentLength(length) Sets the content length of the response - setHeader(name, value) Updates a header name/value pair to the response - addHeader(name, value) Adds a header name/value pair to the response - setStatus(status) Sets the status of the response - reset(status) Resets the response - getHeader(name) Returns the header value by name - setLocale(language, country, variant) Sets the locale to the response - getHeaders(name) Returns the array of header values by name array of string getHeaderNames() Returns the names of all the headers array of string getLocale() Returns the locale of the response string getOutputStream() Returns the OutputStream of the response OutputStream Constants Constant Description Type ACCEPTED Status code (202) indicating that a request was accepted for processing, but was not completed. int BAD_GATEWAY Status code (502) indicating that the HTTP server received an invalid response from a server it consulted when acting as a proxy or gateway. int BAD_REQUEST Status code (400) indicating the request sent by the client was syntactically incorrect. int CONFLICT Status code (409) indicating that the request could not be completed due to a conflict with the current state of the resource. int CONTINUE Status code (100) indicating the client can continue. int CREATED Status code (201) indicating the request succeeded and created a new resource on the server. int EXPECTATION_FAILED Status code (417) indicating that the server could not meet the expectation given in the Expect request header. int FORBIDDEN Status code (403) indicating the server understood the request but refused to fulfill it. int FOUND Status code (302) indicating that the resource reside temporarily under a different URI. int GATEWAY_TIMEOUT Status code (504) indicating that the server did not receive a timely response from the upstream server while acting as a gateway or proxy. int GONE Status code (410) indicating that the resource is no longer available at the server and no forwarding address is known. int HTTP_VERSION_NOT_SUPPORTED Status code (505) indicating that the server does not support or refuses to support the HTTP protocol version that was used in the request message. int INTERNAL_SERVER_ERROR Status code (500) indicating an error inside the HTTP server which prevented it from fulfilling the request. int LENGTH_REQUIRED Status code (411) indicating that the request cannot be handled without a defined Content-Length. int METHOD_NOT_ALLOWED Status code (405) indicating that the method specified in the Request-Line is not allowed for the resource identified by the Request-URI. int MOVED_PERMANENTLY Status code (301) indicating that the resource has permanently moved to a new location, and that future references should use a new URI with their requests. int MOVED_TEMPORARILY Status code (302) indicating that the resource has temporarily moved to another location, but that future references should still use the original URI to access the resource. int MULTIPLE_CHOICES Status code (300) indicating that the requested resource corresponds to any one of a set of representations, each with its own specific location. int NO_CONTENT Status code (204) indicating that the request succeeded but that there was no new information to return. int NON_AUTHORITATIVE_INFORMATION Status code (203) indicating that the meta information presented by the client did not originate from the server. int NOT_ACCEPTABLE Status code (406) indicating that the resource identified by the request is only capable of generating response entities which have content characteristics not acceptable according to the accept headers sent in the request. int NOT_FOUND Status code (404) indicating that the requested resource is not available. int NOT_IMPLEMENTED Status code (501) indicating the HTTP server does not support the functionality needed to fulfill the request. int NOT_MODIFIED Status code (304) indicating that a conditional GET operation found that the resource was available and not modified. int OK Status code (200) indicating the request succeeded normally. int PARTIAL_CONTENT Status code (206) indicating that the server has fulfilled the partial GET request for the resource. int PAYMENT_REQUIRED Status code (402) reserved for future use. int PRECONDITION_FAILED Status code (412) indicating that the precondition given in one or more of the request-header fields evaluated to false when it was tested on the server. int PROXY_AUTHENTICATION_REQUIRED Status code (407) indicating that the client MUST first authenticate itself with the proxy. int REQUEST_ENTITY_TOO_LARGE Status code (413) indicating that the server is refusing to process the request because the request entity is larger than the server is willing or able to process. int REQUEST_TIMEOUT Status code (408) indicating that the client did not produce a request within the time that the server was prepared to wait. int REQUEST_URI_TOO_LONG Status code (414) indicating that the server is refusing to service the request because the Request-URI is longer than the server is willing to interpret. int REQUESTED_RANGE_NOT_SATISFIABLE Status code (416) indicating that the server cannot serve the requested byte range. int RESET_CONTENT Status code (205) indicating that the agent SHOULD reset the document view which caused the request to be sent. int SEE_OTHER Status code (303) indicating that the response to the request can be found under a different URI. int SERVICE_UNAVAILABLE Status code (503) indicating that the HTTP server is temporarily overloaded, and unable to handle the request. int SERVICE_SWITCHING_PROTOCOLSUNAVAILABLE Status code (101) indicating the server is switching protocols according to Upgrade header. int TEMPORARY_REDIRECT Status code (307) indicating that the requested resource resides temporarily under a different URI. int UNAUTHORIZED Status code (401) indicating that the request requires HTTP authentication. int UNSUPPORTED_MEDIA_TYPE Status code (415) indicating that the server is refusing to service the request because the entity of the request is in a format not supported by the requested resource for the requested method. int USE_PROXY Status code (305) indicating that the requested resource MUST be accessed through the proxy given by the Location field. int","title":"Response"},{"location":"http/response/#http-response","text":"HTTP Response object provided to the scripting services implementation to create the result, which will be sent back to the client. Overview Module: http/response Definition: https://github.com/eclipse/dirigible/issues/13 Source: /http/response.js Status: stable Group: core","title":"HTTP Response"},{"location":"http/response/#basic-usage","text":"ECMA6 import { response } from \"sdk/http\" ; response . println ( \"Hello World!\" ); response . flush (); response . close ();","title":"Basic Usage"},{"location":"http/response/#functions","text":"Function Description Returns isValid() Returns true if the current execution context is in a HTTP call boolean print(text) Prints the text to the response body - println(text) Prints the text to the response body with line separator at the end - write(bytes) Prints the bytes array to the response body - isCommitted() Whether response is already committed boolean setContentType() Sets the content type - flush() Flushes the content to the response to the client - close() Closes the response stream to the client - addCookie(cookie) Adds a HttpCookie to the response - containsHeader(name) Checks existence of the header by name boolean encodeURL(url) Returns the encoded url parameter string getCharacterEncoding() Returns the character encoding of the response string encodeRedirectURL() Returns the encoded redirect URL string getContentType() Returns the content type of the response string sendError(code, message) Sends an error instruction to the client with the given code and message . The message parameter is optional - setCharacterEncoding(encoding) Sets the character encoding of the response - sendRedirect(location) Sends a redirect instruction to the client to the given location - setContentLength(length) Sets the content length of the response - setHeader(name, value) Updates a header name/value pair to the response - addHeader(name, value) Adds a header name/value pair to the response - setStatus(status) Sets the status of the response - reset(status) Resets the response - getHeader(name) Returns the header value by name - setLocale(language, country, variant) Sets the locale to the response - getHeaders(name) Returns the array of header values by name array of string getHeaderNames() Returns the names of all the headers array of string getLocale() Returns the locale of the response string getOutputStream() Returns the OutputStream of the response OutputStream","title":"Functions"},{"location":"http/response/#constants","text":"Constant Description Type ACCEPTED Status code (202) indicating that a request was accepted for processing, but was not completed. int BAD_GATEWAY Status code (502) indicating that the HTTP server received an invalid response from a server it consulted when acting as a proxy or gateway. int BAD_REQUEST Status code (400) indicating the request sent by the client was syntactically incorrect. int CONFLICT Status code (409) indicating that the request could not be completed due to a conflict with the current state of the resource. int CONTINUE Status code (100) indicating the client can continue. int CREATED Status code (201) indicating the request succeeded and created a new resource on the server. int EXPECTATION_FAILED Status code (417) indicating that the server could not meet the expectation given in the Expect request header. int FORBIDDEN Status code (403) indicating the server understood the request but refused to fulfill it. int FOUND Status code (302) indicating that the resource reside temporarily under a different URI. int GATEWAY_TIMEOUT Status code (504) indicating that the server did not receive a timely response from the upstream server while acting as a gateway or proxy. int GONE Status code (410) indicating that the resource is no longer available at the server and no forwarding address is known. int HTTP_VERSION_NOT_SUPPORTED Status code (505) indicating that the server does not support or refuses to support the HTTP protocol version that was used in the request message. int INTERNAL_SERVER_ERROR Status code (500) indicating an error inside the HTTP server which prevented it from fulfilling the request. int LENGTH_REQUIRED Status code (411) indicating that the request cannot be handled without a defined Content-Length. int METHOD_NOT_ALLOWED Status code (405) indicating that the method specified in the Request-Line is not allowed for the resource identified by the Request-URI. int MOVED_PERMANENTLY Status code (301) indicating that the resource has permanently moved to a new location, and that future references should use a new URI with their requests. int MOVED_TEMPORARILY Status code (302) indicating that the resource has temporarily moved to another location, but that future references should still use the original URI to access the resource. int MULTIPLE_CHOICES Status code (300) indicating that the requested resource corresponds to any one of a set of representations, each with its own specific location. int NO_CONTENT Status code (204) indicating that the request succeeded but that there was no new information to return. int NON_AUTHORITATIVE_INFORMATION Status code (203) indicating that the meta information presented by the client did not originate from the server. int NOT_ACCEPTABLE Status code (406) indicating that the resource identified by the request is only capable of generating response entities which have content characteristics not acceptable according to the accept headers sent in the request. int NOT_FOUND Status code (404) indicating that the requested resource is not available. int NOT_IMPLEMENTED Status code (501) indicating the HTTP server does not support the functionality needed to fulfill the request. int NOT_MODIFIED Status code (304) indicating that a conditional GET operation found that the resource was available and not modified. int OK Status code (200) indicating the request succeeded normally. int PARTIAL_CONTENT Status code (206) indicating that the server has fulfilled the partial GET request for the resource. int PAYMENT_REQUIRED Status code (402) reserved for future use. int PRECONDITION_FAILED Status code (412) indicating that the precondition given in one or more of the request-header fields evaluated to false when it was tested on the server. int PROXY_AUTHENTICATION_REQUIRED Status code (407) indicating that the client MUST first authenticate itself with the proxy. int REQUEST_ENTITY_TOO_LARGE Status code (413) indicating that the server is refusing to process the request because the request entity is larger than the server is willing or able to process. int REQUEST_TIMEOUT Status code (408) indicating that the client did not produce a request within the time that the server was prepared to wait. int REQUEST_URI_TOO_LONG Status code (414) indicating that the server is refusing to service the request because the Request-URI is longer than the server is willing to interpret. int REQUESTED_RANGE_NOT_SATISFIABLE Status code (416) indicating that the server cannot serve the requested byte range. int RESET_CONTENT Status code (205) indicating that the agent SHOULD reset the document view which caused the request to be sent. int SEE_OTHER Status code (303) indicating that the response to the request can be found under a different URI. int SERVICE_UNAVAILABLE Status code (503) indicating that the HTTP server is temporarily overloaded, and unable to handle the request. int SERVICE_SWITCHING_PROTOCOLSUNAVAILABLE Status code (101) indicating the server is switching protocols according to Upgrade header. int TEMPORARY_REDIRECT Status code (307) indicating that the requested resource resides temporarily under a different URI. int UNAUTHORIZED Status code (401) indicating that the request requires HTTP authentication. int UNSUPPORTED_MEDIA_TYPE Status code (415) indicating that the server is refusing to service the request because the entity of the request is in a format not supported by the requested resource for the requested method. int USE_PROXY Status code (305) indicating that the requested resource MUST be accessed through the proxy given by the Location field. int","title":"Constants"},{"location":"http/rs/","text":"RS HTTP RESTful services framework. Overview Module: http/rs Definition: https://github.com/eclipse/dirigible/issues/85 Source: /http/rs.js Status: stable Group: core Basic Usage ECMA6 import { rs } from \"sdk/http\" ; rs . service () . resource ( \"\" ) . get ( function ( _ctx , _request , response ) { response . println ( \"Hello there!\" ); }) . execute (); Functions Function Description Returns service(mappings?) Creates an HttpController instance, optionally initialized with a JS configuration or ResourceMappings object HttpController Objects HttpController Property Description Returns execute(request?, response?) processes HTTP requests, to match path, method and constraints to resource mappings and invoke callback handler functions accordingly and generate response. --- mappings() Returns the mappings configured for this controller instance. ResourceMapppngs ResourceMappings Property Description Returns resource(configuration?) Returns the resource configuration object optionally initialized with oConfiguration Resource configuration() Returns the configuration for this ResourceMappings object Object readonly() Disables all but GET requests to this API ResourceMappings disable(sPath, verb, arrConsumes, arrProduces) Disables the handling of requests sent to path path with HTTP method verb and with consumes media type arrConsumes and produces media type arrProduces media type constraints ResourceMappings find(path, verb, arrConsumes, arrProduces) Finds a request handler for requests sent to path path with HTTP method verb and with consumes media type arrConsumes and produces media type arrProduces media type constraints ResourceMethod execute(request?, response?) Executes the service ---- Resource Property Description Returns get(serveCallback?) Returns the get method configuration object, optionally configured with serveCallback for serving requests ResourceMethod post(serveCallback?) Returns the post method configuration object, optionally configured with serveCallback for serving requests ResourceMethod put(serveCallback?) Returns the put method configuration object, optionally configured with serveCallback for serving requests ResourceMethod delete(serveCallback?) Returns the delete method configuration object, optionally configured with serveCallback for serving requests ResourceMethod remove(serveCallback?) Same as delete() ResourceMethod method(httpVerb, configuration?) Returns the a method configuration object for the sHttpVerb HTTP method name and optionally initialized with configuration object ResourceMethod configuration() Returns the configuration for this Resource object Object readonly() Disables all but GET requests to this resource ResourceMappings disable(verb, arrConsumes, arrProduces) Disables the handling of requests sent to this resource path with HTTP method sVerb and with consumes media type arrConsumes and produces media type arrProduces media type constraints ResourceMappings find(verb, arrConsumes, arrProduces) Finds a request handler for requests sent to this resource path with HTTP method sVerb and with consumes media type arrConsumes and produces media type arrProduces media type constraints ResourceMethod execute(request?, response?) Executes the service ---- ResourceMethod Property Description Returns configuration() Returns the configuration for this ResourceMethod object Object consumes(arrMediaTypeStrings) Assigns a consumes constraint for this verb handler configuration. ResourceMethod produces(arrMediaTypeStrings) Assigns a produces constraint for this verb handler configuration. ResourceMethod before(function) Assign a before callback function for this verb handler configuration ResourceMethod serve(function) Assign a verb handler function for this verb handler configuration ResourceMethod catch(function) Assign a catch on error callback function for this verb handler configuration ResourceMethod finally(function) Assign a finally callback function for this verb handler configuration ResourceMethod execute(request?, response?) Executes the service ----","title":"RS"},{"location":"http/rs/#rs","text":"HTTP RESTful services framework. Overview Module: http/rs Definition: https://github.com/eclipse/dirigible/issues/85 Source: /http/rs.js Status: stable Group: core","title":"RS"},{"location":"http/rs/#basic-usage","text":"ECMA6 import { rs } from \"sdk/http\" ; rs . service () . resource ( \"\" ) . get ( function ( _ctx , _request , response ) { response . println ( \"Hello there!\" ); }) . execute ();","title":"Basic Usage"},{"location":"http/rs/#functions","text":"Function Description Returns service(mappings?) Creates an HttpController instance, optionally initialized with a JS configuration or ResourceMappings object HttpController","title":"Functions"},{"location":"http/rs/#objects","text":"","title":"Objects"},{"location":"http/rs/#httpcontroller","text":"Property Description Returns execute(request?, response?) processes HTTP requests, to match path, method and constraints to resource mappings and invoke callback handler functions accordingly and generate response. --- mappings() Returns the mappings configured for this controller instance. ResourceMapppngs","title":"HttpController"},{"location":"http/rs/#resourcemappings","text":"Property Description Returns resource(configuration?) Returns the resource configuration object optionally initialized with oConfiguration Resource configuration() Returns the configuration for this ResourceMappings object Object readonly() Disables all but GET requests to this API ResourceMappings disable(sPath, verb, arrConsumes, arrProduces) Disables the handling of requests sent to path path with HTTP method verb and with consumes media type arrConsumes and produces media type arrProduces media type constraints ResourceMappings find(path, verb, arrConsumes, arrProduces) Finds a request handler for requests sent to path path with HTTP method verb and with consumes media type arrConsumes and produces media type arrProduces media type constraints ResourceMethod execute(request?, response?) Executes the service ----","title":"ResourceMappings"},{"location":"http/rs/#resource","text":"Property Description Returns get(serveCallback?) Returns the get method configuration object, optionally configured with serveCallback for serving requests ResourceMethod post(serveCallback?) Returns the post method configuration object, optionally configured with serveCallback for serving requests ResourceMethod put(serveCallback?) Returns the put method configuration object, optionally configured with serveCallback for serving requests ResourceMethod delete(serveCallback?) Returns the delete method configuration object, optionally configured with serveCallback for serving requests ResourceMethod remove(serveCallback?) Same as delete() ResourceMethod method(httpVerb, configuration?) Returns the a method configuration object for the sHttpVerb HTTP method name and optionally initialized with configuration object ResourceMethod configuration() Returns the configuration for this Resource object Object readonly() Disables all but GET requests to this resource ResourceMappings disable(verb, arrConsumes, arrProduces) Disables the handling of requests sent to this resource path with HTTP method sVerb and with consumes media type arrConsumes and produces media type arrProduces media type constraints ResourceMappings find(verb, arrConsumes, arrProduces) Finds a request handler for requests sent to this resource path with HTTP method sVerb and with consumes media type arrConsumes and produces media type arrProduces media type constraints ResourceMethod execute(request?, response?) Executes the service ----","title":"Resource"},{"location":"http/rs/#resourcemethod","text":"Property Description Returns configuration() Returns the configuration for this ResourceMethod object Object consumes(arrMediaTypeStrings) Assigns a consumes constraint for this verb handler configuration. ResourceMethod produces(arrMediaTypeStrings) Assigns a produces constraint for this verb handler configuration. ResourceMethod before(function) Assign a before callback function for this verb handler configuration ResourceMethod serve(function) Assign a verb handler function for this verb handler configuration ResourceMethod catch(function) Assign a catch on error callback function for this verb handler configuration ResourceMethod finally(function) Assign a finally callback function for this verb handler configuration ResourceMethod execute(request?, response?) Executes the service ----","title":"ResourceMethod"},{"location":"http/session/","text":"Session HTTP Session object provided to the scripting services implementation to hold session attributes for multiple client requests. Overview Module: http/session Definition: https://github.com/eclipse/dirigible/issues/14 Source: /http/session.js Status: stable Group: core Basic Usage ECMA6 import { session , response } from \"sdk/http\" ; session . setAttribute ( \"attr1\" , \"value1\" ); let attr = session . getAttribute ( \"attr1\" ); response . println ( \"[Attribute]: \" + attr ); response . flush (); response . close (); Functions Function Description Returns isValid() Returns true if the current execution context is in a HTTP call boolean getAttribute(name) Returns the HTTP session attribute by name string getAttributeNames() Returns all the HTTP session attributes names array of string getCreationTime() Returns the time when the HTTP session has been initialized Date getId() Returns the HTTP session ID string getLastAccessedTime() Returns the time when the HTTP session has been last accessed Date getMaxInactiveInterval() Returns the maximum inactive interval of this HTTP session int invalidate() Invalidates this HTTP session - isNew() Returns true, if the HTTP session is created during this HTTP call and false otherwise boolean setAttribute(name, value) Sets the HTTP session attribute by name and value string removeAttribute(name) Removes the HTTP session attribute by name string setMaxInactiveInterval(interval) Sets the maximum inactive interval of this HTTP session -","title":"Session"},{"location":"http/session/#session","text":"HTTP Session object provided to the scripting services implementation to hold session attributes for multiple client requests. Overview Module: http/session Definition: https://github.com/eclipse/dirigible/issues/14 Source: /http/session.js Status: stable Group: core","title":"Session"},{"location":"http/session/#basic-usage","text":"ECMA6 import { session , response } from \"sdk/http\" ; session . setAttribute ( \"attr1\" , \"value1\" ); let attr = session . getAttribute ( \"attr1\" ); response . println ( \"[Attribute]: \" + attr ); response . flush (); response . close ();","title":"Basic Usage"},{"location":"http/session/#functions","text":"Function Description Returns isValid() Returns true if the current execution context is in a HTTP call boolean getAttribute(name) Returns the HTTP session attribute by name string getAttributeNames() Returns all the HTTP session attributes names array of string getCreationTime() Returns the time when the HTTP session has been initialized Date getId() Returns the HTTP session ID string getLastAccessedTime() Returns the time when the HTTP session has been last accessed Date getMaxInactiveInterval() Returns the maximum inactive interval of this HTTP session int invalidate() Invalidates this HTTP session - isNew() Returns true, if the HTTP session is created during this HTTP call and false otherwise boolean setAttribute(name, value) Sets the HTTP session attribute by name and value string removeAttribute(name) Removes the HTTP session attribute by name string setMaxInactiveInterval(interval) Sets the maximum inactive interval of this HTTP session -","title":"Functions"},{"location":"http/upload/","text":"Upload HTTP Upload is used to consume files posted as multipart request. Overview Module: http/upload Definition: https://github.com/eclipse/dirigible/issues/16 Source: /http/upload.ts Status: stable Group: core Basic Usage ECMA6 import { upload , request , response } from \"sdk/http\" ; if ( request . getMethod () === \"POST\" ) { if ( upload . isMultipartContent ()) { const fileItems = upload . parseRequest (); for ( let i = 0 ; i < fileItems . size (); i ++ ) { const fileItem = fileItems . get ( i ); const contentType = fileItem . getContentType (); console . log ( `Content Type: ${ contentType } ` ); console . log ( `Filename: ${ fileItem . getOriginalFilename () } ` ); // console.log(`Text: ${fileItem.getText()}`); response . setContentType ( contentType ); response . write ( fileItem . getBytesNative ()); } } else { response . println ( \"The request's content must be 'multipart'\" ); } } else if ( request . getMethod () === \"GET\" ) { response . println ( \"Use POST request.\" ); } response . flush (); response . close (); Sample HTML Page <!DOCTYPE html> < html > < body > < form action = \"/services/js/http-tests/upload/upload.js\" method = \"post\" enctype = \"multipart/form-data\" > < label for = \"file\" > Filename: </ label > < input type = \"file\" name = \"file\" id = \"file\" multiple > < br > < input type = \"submit\" name = \"submit\" value = \"Submit\" > </ form > </ body > </ html > Functions Function Description Returns isMultipartContent() Returns true if the HTTP request contains files content and false otherwise boolean parseRequest() Returns a HttpFileItems object by parsing the HTTP request HttpFileItems Objects HttpFileItems Function Description Returns get(index) The HttpFileItem object by the index HttpFileItem size() The size of the list of HttpFileItem objects HttpFileItem HttpFileItem Function Description Returns getName() The HttpFileItem's name string getOriginalFilename() The original file name string getContentType() The HttpFileItem's data content type string isEmpty() Returns whether the file is empty boolean getSize() The HttpFileItem's size long getBytes() Return the HttpFileItem's content as byte array array of byte getBytesNative() Return the HttpFileItem's content as Java byte array array of Java byte getText() Return the HttpFileItem's content as string string getInputStream() Return the input stream of the HttpFileItem's content streams.InputStream","title":"Upload"},{"location":"http/upload/#upload","text":"HTTP Upload is used to consume files posted as multipart request. Overview Module: http/upload Definition: https://github.com/eclipse/dirigible/issues/16 Source: /http/upload.ts Status: stable Group: core","title":"Upload"},{"location":"http/upload/#basic-usage","text":"ECMA6 import { upload , request , response } from \"sdk/http\" ; if ( request . getMethod () === \"POST\" ) { if ( upload . isMultipartContent ()) { const fileItems = upload . parseRequest (); for ( let i = 0 ; i < fileItems . size (); i ++ ) { const fileItem = fileItems . get ( i ); const contentType = fileItem . getContentType (); console . log ( `Content Type: ${ contentType } ` ); console . log ( `Filename: ${ fileItem . getOriginalFilename () } ` ); // console.log(`Text: ${fileItem.getText()}`); response . setContentType ( contentType ); response . write ( fileItem . getBytesNative ()); } } else { response . println ( \"The request's content must be 'multipart'\" ); } } else if ( request . getMethod () === \"GET\" ) { response . println ( \"Use POST request.\" ); } response . flush (); response . close ();","title":"Basic Usage"},{"location":"http/upload/#sample-html-page","text":"<!DOCTYPE html> < html > < body > < form action = \"/services/js/http-tests/upload/upload.js\" method = \"post\" enctype = \"multipart/form-data\" > < label for = \"file\" > Filename: </ label > < input type = \"file\" name = \"file\" id = \"file\" multiple > < br > < input type = \"submit\" name = \"submit\" value = \"Submit\" > </ form > </ body > </ html >","title":"Sample HTML Page"},{"location":"http/upload/#functions","text":"Function Description Returns isMultipartContent() Returns true if the HTTP request contains files content and false otherwise boolean parseRequest() Returns a HttpFileItems object by parsing the HTTP request HttpFileItems","title":"Functions"},{"location":"http/upload/#objects","text":"","title":"Objects"},{"location":"http/upload/#httpfileitems","text":"Function Description Returns get(index) The HttpFileItem object by the index HttpFileItem size() The size of the list of HttpFileItem objects HttpFileItem","title":"HttpFileItems"},{"location":"http/upload/#httpfileitem","text":"Function Description Returns getName() The HttpFileItem's name string getOriginalFilename() The original file name string getContentType() The HttpFileItem's data content type string isEmpty() Returns whether the file is empty boolean getSize() The HttpFileItem's size long getBytes() Return the HttpFileItem's content as byte array array of byte getBytesNative() Return the HttpFileItem's content as Java byte array array of Java byte getText() Return the HttpFileItem's content as string string getInputStream() Return the input stream of the HttpFileItem's content streams.InputStream","title":"HttpFileItem"},{"location":"indexing/searcher/","text":"Indexing Searcher The Indexing Searcher is the object used for free-text or exact periods searches over the added documents with the Indexing Writer . This version is backed by the Apache Lucene . Overview Module: indexing/searcher Definition: https://github.com/eclipse/dirigible/issues/110 Source: /indexing/searcher.js Status: stable Group: platform Basic Usage ECMA6 import { writer , searcher } from \"sdk/indexing\" ; writer . add ( \"index2\" , \"file1\" , \"apache lucene\" , new Date ( 123 )); writer . add ( \"index2\" , \"file2\" , \"lucene - the search engine\" , new Date ( 234 ), { \"name2\" : \"value2\" }); writer . add ( \"index2\" , \"file3\" , \"search engine\" , new Date ( 345 ), { \"name2\" : \"value2\" }); let found = searcher . between ( \"index2\" , new Date ( 124 ), new Date ( 344 )); console . log ( JSON . stringify ( found )) Functions Function Description Returns search(index, term) Returns an array of document descriptors matching the term list of descriptors before(index, date) Returns an array of document descriptors where lastModified is before the date list of descriptors after(index, date) Returns an array of document descriptors where lastModified is after the date list of descriptors between(index, lower, upper) Returns an array of document descriptors where lastModified is between the lower and upper list of descriptors","title":"Indexing Searcher"},{"location":"indexing/searcher/#indexing-searcher","text":"The Indexing Searcher is the object used for free-text or exact periods searches over the added documents with the Indexing Writer . This version is backed by the Apache Lucene . Overview Module: indexing/searcher Definition: https://github.com/eclipse/dirigible/issues/110 Source: /indexing/searcher.js Status: stable Group: platform","title":"Indexing Searcher"},{"location":"indexing/searcher/#basic-usage","text":"ECMA6 import { writer , searcher } from \"sdk/indexing\" ; writer . add ( \"index2\" , \"file1\" , \"apache lucene\" , new Date ( 123 )); writer . add ( \"index2\" , \"file2\" , \"lucene - the search engine\" , new Date ( 234 ), { \"name2\" : \"value2\" }); writer . add ( \"index2\" , \"file3\" , \"search engine\" , new Date ( 345 ), { \"name2\" : \"value2\" }); let found = searcher . between ( \"index2\" , new Date ( 124 ), new Date ( 344 )); console . log ( JSON . stringify ( found ))","title":"Basic Usage"},{"location":"indexing/searcher/#functions","text":"Function Description Returns search(index, term) Returns an array of document descriptors matching the term list of descriptors before(index, date) Returns an array of document descriptors where lastModified is before the date list of descriptors after(index, date) Returns an array of document descriptors where lastModified is after the date list of descriptors between(index, lower, upper) Returns an array of document descriptors where lastModified is between the lower and upper list of descriptors","title":"Functions"},{"location":"indexing/writer/","text":"Indexing Writer The Indexing Writer is an object which can store a text content with additional parameters for later high-performant free-text search. This version is backed by the Apache Lucene . Overview Module: indexing/writer Definition: https://github.com/eclipse/dirigible/issues/110 Source: /indexing/writer.js Status: stable Group: platform Basic Usage ECMA6 import { writer , searcher } from \"sdk/indexing\" ; writer . add ( \"index1\" , \"file1\" , \"apache lucene\" , new Date (), { \"name1\" : \"value1\" }); writer . add ( \"index1\" , \"file2\" , \"lucene - the search engine\" , new Date (), { \"name2\" : \"value2\" }); let found = searcher . search ( \"index1\" , \"lucene\" ); console . log ( JSON . stringify ( found )) Functions Function Description Returns add(index, location, contents, lastModified, parameters) Adds a document contents with the given location and parameters to an index -","title":"Indexing Writer"},{"location":"indexing/writer/#indexing-writer","text":"The Indexing Writer is an object which can store a text content with additional parameters for later high-performant free-text search. This version is backed by the Apache Lucene . Overview Module: indexing/writer Definition: https://github.com/eclipse/dirigible/issues/110 Source: /indexing/writer.js Status: stable Group: platform","title":"Indexing Writer"},{"location":"indexing/writer/#basic-usage","text":"ECMA6 import { writer , searcher } from \"sdk/indexing\" ; writer . add ( \"index1\" , \"file1\" , \"apache lucene\" , new Date (), { \"name1\" : \"value1\" }); writer . add ( \"index1\" , \"file2\" , \"lucene - the search engine\" , new Date (), { \"name2\" : \"value2\" }); let found = searcher . search ( \"index1\" , \"lucene\" ); console . log ( JSON . stringify ( found ))","title":"Basic Usage"},{"location":"indexing/writer/#functions","text":"Function Description Returns add(index, location, contents, lastModified, parameters) Adds a document contents with the given location and parameters to an index -","title":"Functions"},{"location":"io/bytes/","text":"Bytes Bytes module provides utility functions for working with bytes. Overview Module: io/bytes Definition: n/a Source: /io/bytes.js Status: stable Group: core Basic Usage ECMA6 import { bytes } from \"sdk/io\" console . log ( bytes . textToByteArray ( \"Hello World\" )); console . log ( bytes . byteArrayToText ([ 72 , 101 , 108 , 108 , 111 , 32 , 87 , 111 , 114 , 108 , 100 ])); Functions Function Description Returns textToByteArray(text) Converts a text to a byte array array of bytes byteArrayToText(bytes) Converts a byte array to text string toJavaBytes(bytes) Convert the native JavaScript byte array to Java one, to be used internally by the API layer array of Java bytes toJavaScriptBytes(bytes) Convert the Java byte array to a native JavaScript one, to be used internally by the API layer array of JavaScript bytes","title":"Bytes"},{"location":"io/bytes/#bytes","text":"Bytes module provides utility functions for working with bytes. Overview Module: io/bytes Definition: n/a Source: /io/bytes.js Status: stable Group: core","title":"Bytes"},{"location":"io/bytes/#basic-usage","text":"ECMA6 import { bytes } from \"sdk/io\" console . log ( bytes . textToByteArray ( \"Hello World\" )); console . log ( bytes . byteArrayToText ([ 72 , 101 , 108 , 108 , 111 , 32 , 87 , 111 , 114 , 108 , 100 ]));","title":"Basic Usage"},{"location":"io/bytes/#functions","text":"Function Description Returns textToByteArray(text) Converts a text to a byte array array of bytes byteArrayToText(bytes) Converts a byte array to text string toJavaBytes(bytes) Convert the native JavaScript byte array to Java one, to be used internally by the API layer array of Java bytes toJavaScriptBytes(bytes) Convert the Java byte array to a native JavaScript one, to be used internally by the API layer array of JavaScript bytes","title":"Functions"},{"location":"io/files/","text":"Files Files module provides an access to the underlying File System, where the Dirigible server is deployed on. Overview Module: io/files Definition: https://github.com/eclipse/dirigible/issues/19 Source: /io/files.js Status: stable Group: core Note Note that the parameter path takes either an absolute path or relative path from your working instance of Dirigible Basic Usage ECMA6 import { files } from \"sdk/io\" ; let tempFile = files . createTempFile ( \"dirigible\" , \".txt\" ); console . log ( \"Temp file: \" + tempFile ); files . writeText ( tempFile , \"Eclipse Dirigible\" ); files . deleteFile ( tempFile ); Constants Constant Description Returns separator OS file separator string Functions Function Description Returns list(path) List files under this path array of string exists(path) Whether a file by this path exists boolean isExecutable(path) Whether the file by this path is executable boolean isReadable(path) Whether the file by this path is readable boolean isWritable(path) Whether the file by this path is writable boolean isHidden(path) Whether the file by this path is hidden boolean isDirectory(path) Whether the file by this path is directory boolean isFile(path) Whether the file by this path is file boolean isSameFile(path1, path2) Whether the files by these path1 and path2 are pointing to the same file boolean getCanonicalPath(path) Returns the canonical path of the file by this path string getName(path) Returns the name of the file by this path string getParentPath(path) Returns the parent's path of the file by this path string readBytes(path) Returns the content of the given file as byte array array of bytes readBytesNative(path) Returns the content of the given file as array of Java bytes array of Java bytes readText(path) Returns the content of the given file as string string writeBytes(path, bytes) Writes the given byte array content to the file - writeBytesNative(path, bytes) Writes the given array of Java bytes content to the file - writeText(path, text) Writes the given text content to the file - getLastModified(path) Returns the last modification date of the file by this path Date setLastModified(path, date) Sets the last modification date of the file by this path - getOwner(path) Returns the owner of the file by this path string setOwner(path, owner) Sets the owner of the file by this path - getPermissions(path) Returns the POSIX permissions of the file by this path string setPermissions(path, owner) Sets the POSIX permissions of the file by this path - size(path) Returns the size of the file by this path long createFile(path) Creates a new file by the given path - createDirectory(path) Creates a new directory by the given path - copy(source, target) Copies a source file to a target - move(source, target) Moves a source file to a target - deleteFile(path) Deletes the file by the given path - deleteDirectory(path) Deletes the directory by the given path - createTempFile(prefix, suffix) Creates a new temporary file by the given prefix and suffix - createTempDirectory(prefix) Creates a new temporary directory by the given prefix - createInputStream(path) Creates an InputStream pointing to a file by the given path streams.InputStream createOutputStream(path) Creates an OutputStream pointing to a file by the given path streams.OutputStream","title":"Files"},{"location":"io/files/#files","text":"Files module provides an access to the underlying File System, where the Dirigible server is deployed on. Overview Module: io/files Definition: https://github.com/eclipse/dirigible/issues/19 Source: /io/files.js Status: stable Group: core Note Note that the parameter path takes either an absolute path or relative path from your working instance of Dirigible","title":"Files"},{"location":"io/files/#basic-usage","text":"ECMA6 import { files } from \"sdk/io\" ; let tempFile = files . createTempFile ( \"dirigible\" , \".txt\" ); console . log ( \"Temp file: \" + tempFile ); files . writeText ( tempFile , \"Eclipse Dirigible\" ); files . deleteFile ( tempFile );","title":"Basic Usage"},{"location":"io/files/#constants","text":"Constant Description Returns separator OS file separator string","title":"Constants"},{"location":"io/files/#functions","text":"Function Description Returns list(path) List files under this path array of string exists(path) Whether a file by this path exists boolean isExecutable(path) Whether the file by this path is executable boolean isReadable(path) Whether the file by this path is readable boolean isWritable(path) Whether the file by this path is writable boolean isHidden(path) Whether the file by this path is hidden boolean isDirectory(path) Whether the file by this path is directory boolean isFile(path) Whether the file by this path is file boolean isSameFile(path1, path2) Whether the files by these path1 and path2 are pointing to the same file boolean getCanonicalPath(path) Returns the canonical path of the file by this path string getName(path) Returns the name of the file by this path string getParentPath(path) Returns the parent's path of the file by this path string readBytes(path) Returns the content of the given file as byte array array of bytes readBytesNative(path) Returns the content of the given file as array of Java bytes array of Java bytes readText(path) Returns the content of the given file as string string writeBytes(path, bytes) Writes the given byte array content to the file - writeBytesNative(path, bytes) Writes the given array of Java bytes content to the file - writeText(path, text) Writes the given text content to the file - getLastModified(path) Returns the last modification date of the file by this path Date setLastModified(path, date) Sets the last modification date of the file by this path - getOwner(path) Returns the owner of the file by this path string setOwner(path, owner) Sets the owner of the file by this path - getPermissions(path) Returns the POSIX permissions of the file by this path string setPermissions(path, owner) Sets the POSIX permissions of the file by this path - size(path) Returns the size of the file by this path long createFile(path) Creates a new file by the given path - createDirectory(path) Creates a new directory by the given path - copy(source, target) Copies a source file to a target - move(source, target) Moves a source file to a target - deleteFile(path) Deletes the file by the given path - deleteDirectory(path) Deletes the directory by the given path - createTempFile(prefix, suffix) Creates a new temporary file by the given prefix and suffix - createTempDirectory(prefix) Creates a new temporary directory by the given prefix - createInputStream(path) Creates an InputStream pointing to a file by the given path streams.InputStream createOutputStream(path) Creates an OutputStream pointing to a file by the given path streams.OutputStream","title":"Functions"},{"location":"io/ftp/","text":"FTP Client FTP Client API provides utility functions for working with FTP servers. Overview Module: io/ftp Definition: n/a Source: /io/ftp.js Status: stable Group: core Basic Usage ECMA6 import { ftp } from \"sdk/io\" ; import { response } from \"sdk/http\" ; const host = \"test.rebex.net\" ; const port = 21 ; const userName = \"demo\" ; const password = \"password\" ; let ftpClient = ftp . getClient ( host , port , userName , password ); let file = ftpClient . getFileText ( \"/\" , \"readme.txt\" ); response . println ( file ); Functions Function Description Returns getClient(host, port, userName, password) Returns a FTP Client instance FTPClient Objects FTPClient Function Description Returns getRootFolder() Gets the root folder FTPFolder getFile(path, fileName) Gets the file content as an input stream InputStream getFileBinary(path, fileName) Gets the file content as byte array byte array getFileText(path, fileName) Gets the file content as string string getFolder(path, folderName) Gets the folder FTPFolder createFile(path, fileName, inputStream) Creates file from InputStream and return true if the file was created successfully boolean createFileBinary(path, fileName, bytes) Creates file from byte array and return true if the file was created successfully boolean createFileText(path, fileName, text) Creates file from string and return true if the file was created successfully boolean appendFile(path, fileName, inputStream) Appends InputStream to file and return true if the file was created successfully boolean appendFileBinary(path, fileName, bytes) Appends byte array to file and return true if the file was created successfully boolean appendFileText(path, fileName, text) Appends string to file and return true if the file was created successfully boolean createFolder(path, folderName) Creates folder FTPFolder deleteFile(path, fileName) Deletes file boolean deleteFolder(path, folderName) Deletes folder boolean close() Closes the FPT client - FTPFolder Function Description Returns getPath() Gets the folder path string getName() Gets the folder name string getFile(fileName) Gets FTPFile by fileName FTPFile getFolder(folderName) Gets FTPFolder by folderName FTPFolder list() Gets array of FTPObjects FTPObject array listFiles() Gets array of FTPFiles FTPFile array listFolders() Gets array of FTPFolder FTPFolder array createFile(fileName, inputStream) Creates file from InputStream and return true if the file was created successfully boolean createFileBinary(fileName, bytes) Creates file from byte array and return true if the file was created successfully boolean createFileText(fileName, text) Creates file from string and return true if the file was created successfully boolean createFolder(folder) Creates FTPFolder FTPFolder delete() Deletes the current folder boolean deleteFile(fileName) Deletes FTPFile boolean deleteFolder(folderName) Deletes FTPFolder boolean FTPFile Function Description Returns getPath() Gets the folder path string getName() Gets the folder name string getContent() Gets the file content InputStream getContentBinary() Gets the file content byte array getContentText() Gets the file content string setContent(inputStream) Sets the file content from an InputStream boolean setContentBinary(bytes) Sets the file content from byte array boolean setContentText(text) Sets the file content from string boolean appendContent(inputStream) Appends file content from an InputStream boolean appendContentBinary(bytes) Appends file content from an byte array boolean appendContentText(text) Appends file content from string boolean delete() Deletes the file boolean FTPObject Function Description Returns getPath() Gets the object path string getName() Gets the object name string isFile() Returns true if the object is file boolean isFolder() Returns true if the object is folder boolean getFile() Gets object as FTPFile FTPFile getFolder() Gets object as FTPFolder FTPFolder","title":"FTP Client"},{"location":"io/ftp/#ftp-client","text":"FTP Client API provides utility functions for working with FTP servers. Overview Module: io/ftp Definition: n/a Source: /io/ftp.js Status: stable Group: core","title":"FTP Client"},{"location":"io/ftp/#basic-usage","text":"ECMA6 import { ftp } from \"sdk/io\" ; import { response } from \"sdk/http\" ; const host = \"test.rebex.net\" ; const port = 21 ; const userName = \"demo\" ; const password = \"password\" ; let ftpClient = ftp . getClient ( host , port , userName , password ); let file = ftpClient . getFileText ( \"/\" , \"readme.txt\" ); response . println ( file );","title":"Basic Usage"},{"location":"io/ftp/#functions","text":"Function Description Returns getClient(host, port, userName, password) Returns a FTP Client instance FTPClient","title":"Functions"},{"location":"io/ftp/#objects","text":"","title":"Objects"},{"location":"io/ftp/#ftpclient","text":"Function Description Returns getRootFolder() Gets the root folder FTPFolder getFile(path, fileName) Gets the file content as an input stream InputStream getFileBinary(path, fileName) Gets the file content as byte array byte array getFileText(path, fileName) Gets the file content as string string getFolder(path, folderName) Gets the folder FTPFolder createFile(path, fileName, inputStream) Creates file from InputStream and return true if the file was created successfully boolean createFileBinary(path, fileName, bytes) Creates file from byte array and return true if the file was created successfully boolean createFileText(path, fileName, text) Creates file from string and return true if the file was created successfully boolean appendFile(path, fileName, inputStream) Appends InputStream to file and return true if the file was created successfully boolean appendFileBinary(path, fileName, bytes) Appends byte array to file and return true if the file was created successfully boolean appendFileText(path, fileName, text) Appends string to file and return true if the file was created successfully boolean createFolder(path, folderName) Creates folder FTPFolder deleteFile(path, fileName) Deletes file boolean deleteFolder(path, folderName) Deletes folder boolean close() Closes the FPT client -","title":"FTPClient"},{"location":"io/ftp/#ftpfolder","text":"Function Description Returns getPath() Gets the folder path string getName() Gets the folder name string getFile(fileName) Gets FTPFile by fileName FTPFile getFolder(folderName) Gets FTPFolder by folderName FTPFolder list() Gets array of FTPObjects FTPObject array listFiles() Gets array of FTPFiles FTPFile array listFolders() Gets array of FTPFolder FTPFolder array createFile(fileName, inputStream) Creates file from InputStream and return true if the file was created successfully boolean createFileBinary(fileName, bytes) Creates file from byte array and return true if the file was created successfully boolean createFileText(fileName, text) Creates file from string and return true if the file was created successfully boolean createFolder(folder) Creates FTPFolder FTPFolder delete() Deletes the current folder boolean deleteFile(fileName) Deletes FTPFile boolean deleteFolder(folderName) Deletes FTPFolder boolean","title":"FTPFolder"},{"location":"io/ftp/#ftpfile","text":"Function Description Returns getPath() Gets the folder path string getName() Gets the folder name string getContent() Gets the file content InputStream getContentBinary() Gets the file content byte array getContentText() Gets the file content string setContent(inputStream) Sets the file content from an InputStream boolean setContentBinary(bytes) Sets the file content from byte array boolean setContentText(text) Sets the file content from string boolean appendContent(inputStream) Appends file content from an InputStream boolean appendContentBinary(bytes) Appends file content from an byte array boolean appendContentText(text) Appends file content from string boolean delete() Deletes the file boolean","title":"FTPFile"},{"location":"io/ftp/#ftpobject","text":"Function Description Returns getPath() Gets the object path string getName() Gets the object name string isFile() Returns true if the object is file boolean isFolder() Returns true if the object is folder boolean getFile() Gets object as FTPFile FTPFile getFolder() Gets object as FTPFolder FTPFolder","title":"FTPObject"},{"location":"io/image/","text":"Image Image API provides utility functionlity for working with images. Overview Module: io/image Definition: n/a Source: /io/image.js Status: stable Group: core Basic Usage ECMA6 TODO Functions Function Description Returns resize(original, type, width, height) Resize an image to the given boundaries. InputStream","title":"Image"},{"location":"io/image/#image","text":"Image API provides utility functionlity for working with images. Overview Module: io/image Definition: n/a Source: /io/image.js Status: stable Group: core","title":"Image"},{"location":"io/image/#basic-usage","text":"ECMA6 TODO","title":"Basic Usage"},{"location":"io/image/#functions","text":"Function Description Returns resize(original, type, width, height) Resize an image to the given boundaries. InputStream","title":"Functions"},{"location":"io/streams/","text":"Streams Streams module provides classes and utilities for working with streams. Overview Module: io/streams Definition: https://github.com/eclipse/dirigible/issues/51 Source: /io/streams.js Status: stable Group: core Basic Usage ECMA6 import { streams } from \"sdk/io\" ; import { response } from \"sdk/http\" ; let outputStream = streams . createByteArrayOutputStream (); outputStream . writeText ( \"Some text content\" ); let bytes = outputStream . getBytes (); response . println ( \"[Stream Content as Bytes]: \" + bytes ); let text = String . fromCharCode . apply ( String , bytes ); response . println ( \"[Stream Content as Text]: \" + text ); let inputStream = streams . createByteArrayInputStream ( bytes ); let outputStreamCopy = streams . createByteArrayOutputStream (); streams . copy ( inputStream , outputStreamCopy ); let copiedBytes = outputStreamCopy . getBytes (); let copiedText = String . fromCharCode . apply ( String , copiedBytes ); response . println ( \"[Stream Copied Content as Text]: \" + copiedText ); response . flush (); response . close (); Functions Function Description Returns copy(inputStream, outputStream) Copies an InputStream to an OutputStream - createByteArrayInputStream(bytes) Creates an ByteArrayInputStream from the array of bytes ByteArrayInputStream createByteArrayOutputStream() Creates an ByteArrayOutputStream ByteArrayOutputStream Objects InputStream Function Description Returns readByte() Reads a single byte from this InputStream byte readBytes() Returns the array of bytes contained in this InputStream array of byte readText() Returns a string representation of the array of bytes contained in this InputStream string close() Closes this InputStream to release the resources - OutputStream Function Description Returns writeByte(byte) Writes a single byte to this OutputStream - writeBytes(bytes) Writes the array of bytes to this OutputStream array of byte readText() Returns a string representation of the array of bytes contained in this InputStream string close() Closes this OutputStream to release the resources - ByteArrayInputStream inherited from InputStream ByteArrayOutputStream inherited from OutputStream and: Function Description Returns getBytes() Returns the array of bytes contained in this ByteArrayOutputStream array of byte getText() Returns a string representation of the array of bytes contained in this ByteArrayOutputStream string","title":"Streams"},{"location":"io/streams/#streams","text":"Streams module provides classes and utilities for working with streams. Overview Module: io/streams Definition: https://github.com/eclipse/dirigible/issues/51 Source: /io/streams.js Status: stable Group: core","title":"Streams"},{"location":"io/streams/#basic-usage","text":"ECMA6 import { streams } from \"sdk/io\" ; import { response } from \"sdk/http\" ; let outputStream = streams . createByteArrayOutputStream (); outputStream . writeText ( \"Some text content\" ); let bytes = outputStream . getBytes (); response . println ( \"[Stream Content as Bytes]: \" + bytes ); let text = String . fromCharCode . apply ( String , bytes ); response . println ( \"[Stream Content as Text]: \" + text ); let inputStream = streams . createByteArrayInputStream ( bytes ); let outputStreamCopy = streams . createByteArrayOutputStream (); streams . copy ( inputStream , outputStreamCopy ); let copiedBytes = outputStreamCopy . getBytes (); let copiedText = String . fromCharCode . apply ( String , copiedBytes ); response . println ( \"[Stream Copied Content as Text]: \" + copiedText ); response . flush (); response . close ();","title":"Basic Usage"},{"location":"io/streams/#functions","text":"Function Description Returns copy(inputStream, outputStream) Copies an InputStream to an OutputStream - createByteArrayInputStream(bytes) Creates an ByteArrayInputStream from the array of bytes ByteArrayInputStream createByteArrayOutputStream() Creates an ByteArrayOutputStream ByteArrayOutputStream","title":"Functions"},{"location":"io/streams/#objects","text":"","title":"Objects"},{"location":"io/streams/#inputstream","text":"Function Description Returns readByte() Reads a single byte from this InputStream byte readBytes() Returns the array of bytes contained in this InputStream array of byte readText() Returns a string representation of the array of bytes contained in this InputStream string close() Closes this InputStream to release the resources -","title":"InputStream"},{"location":"io/streams/#outputstream","text":"Function Description Returns writeByte(byte) Writes a single byte to this OutputStream - writeBytes(bytes) Writes the array of bytes to this OutputStream array of byte readText() Returns a string representation of the array of bytes contained in this InputStream string close() Closes this OutputStream to release the resources -","title":"OutputStream"},{"location":"io/streams/#bytearrayinputstream","text":"inherited from InputStream","title":"ByteArrayInputStream"},{"location":"io/streams/#bytearrayoutputstream","text":"inherited from OutputStream and: Function Description Returns getBytes() Returns the array of bytes contained in this ByteArrayOutputStream array of byte getText() Returns a string representation of the array of bytes contained in this ByteArrayOutputStream string","title":"ByteArrayOutputStream"},{"location":"io/zip/","text":"Zip Zip modules provides functionality for creating zip archive from files. Overview Module: io/zip Definition: https://github.com/eclipse/dirigible/issues/20 Source: /io/zip.js Status: stable Group: core Basic Usage To test the API first create a zip file using the following snippet: ECMA6 import { zip , files } from \"sdk/io\" ; let outputStream = files . createOutputStream ( \"test.zip\" ); let zipOutputStream = zip . createZipOutputStream ( outputStream ); if ( outputStream . isValid ()) { try { zipOutputStream . createZipEntry ( \"test1.txt\" ); zipOutputStream . writeText ( \"some text\" ); zipOutputStream . createZipEntry ( \"test2.bin\" ); zipOutputStream . write ([ 60 , 61 , 62 , 63 ]); } finally { zipOutputStream . close (); } } Then you can read the contents of the zip file: ECMA6 CommonJS import { zip , files } from \"sdk/io\" ; let inputStream = files . createInputStream ( \"test.zip\" ); let zipInputStream = zip . createZipInputStream ( inputStream ); if ( inputStream . isValid ()) { try { let zipEntry = zipInputStream . getNextEntry (); while ( zipEntry . isValid ()) { console . log ( zipEntry . getName ()); console . log ( zipInputStream . read ()); zipEntry = zipInputStream . getNextEntry (); } } finally { zipInputStream . close (); } } else { console . log ( 'No such file' ); } const zip = require ( \"io/zip\" ); const files = require ( \"io/files\" ); let inputStream = files . createInputStream ( \"test.zip\" ); if ( inputStream . isValid ()) { try { let zipInputStream = zip . createZipInputStream ( inputStream ); let zipEntry = zipInputStream . getNextEntry (); while ( zipEntry . isValid ()) { console . log ( zipEntry . getName ()); console . log ( zipInputStream . read ()); zipEntry = zipInputStream . getNextEntry (); } } finally { zipInputStream . close (); } } else { console . log ( 'No such file' ); } Functions Function Description Returns createZipInputStream(inputStream) Returns the Zip archive reader object ZipInputStream createZipOutputStream(outputStream) Returns the Zip archive writer object ZipOutputStream Objects ZipInputStream Function Description Returns getNextEntry() Returns the next entry from the archive or null if no more entries found ZipEntry read() Reads from the zip input stream at the current entry point and returns the result as array of bytes array of bytes readNative() Reads from the zip input stream at the current entry point and returns the result as array of Java bytes array of Java bytes readText() Reads from the zip input stream at the current entry point and returns the result as text string close() Closes the zip input stream - ZipOutputStream Function Description Returns createZipEntry() Returns a new entry for the archive ZipEntry write(bytes) Writes an array of bytes to the zip output stream at the current entry point - writeNative(bytes) Writes an array of Java bytes to the zip output stream at the current entry point - writeText(text) Writes a text to the zip output stream at the current entry point - closeEntry() Closes the current entry (optional) - close() Finishes, flushes and closes the zip output stream - ZipEntry Function Description Returns getName() Returns the name of the entry string getSize() Returns the size of the entry integer getCompressedSize() Returns the compressed size of the entry integer getTime() Returns the time stamp of the entry integer getCrc() Returns the CRC sum of the entry integer getComment() Returns the comment text of the entry integer isDirectory() Returns true if the entry represents a directory and false otherwise integer isValid() Returns true if the entry is a valid one and false otherwise (after last) boolean","title":"Zip"},{"location":"io/zip/#zip","text":"Zip modules provides functionality for creating zip archive from files. Overview Module: io/zip Definition: https://github.com/eclipse/dirigible/issues/20 Source: /io/zip.js Status: stable Group: core","title":"Zip"},{"location":"io/zip/#basic-usage","text":"To test the API first create a zip file using the following snippet: ECMA6 import { zip , files } from \"sdk/io\" ; let outputStream = files . createOutputStream ( \"test.zip\" ); let zipOutputStream = zip . createZipOutputStream ( outputStream ); if ( outputStream . isValid ()) { try { zipOutputStream . createZipEntry ( \"test1.txt\" ); zipOutputStream . writeText ( \"some text\" ); zipOutputStream . createZipEntry ( \"test2.bin\" ); zipOutputStream . write ([ 60 , 61 , 62 , 63 ]); } finally { zipOutputStream . close (); } } Then you can read the contents of the zip file: ECMA6 CommonJS import { zip , files } from \"sdk/io\" ; let inputStream = files . createInputStream ( \"test.zip\" ); let zipInputStream = zip . createZipInputStream ( inputStream ); if ( inputStream . isValid ()) { try { let zipEntry = zipInputStream . getNextEntry (); while ( zipEntry . isValid ()) { console . log ( zipEntry . getName ()); console . log ( zipInputStream . read ()); zipEntry = zipInputStream . getNextEntry (); } } finally { zipInputStream . close (); } } else { console . log ( 'No such file' ); } const zip = require ( \"io/zip\" ); const files = require ( \"io/files\" ); let inputStream = files . createInputStream ( \"test.zip\" ); if ( inputStream . isValid ()) { try { let zipInputStream = zip . createZipInputStream ( inputStream ); let zipEntry = zipInputStream . getNextEntry (); while ( zipEntry . isValid ()) { console . log ( zipEntry . getName ()); console . log ( zipInputStream . read ()); zipEntry = zipInputStream . getNextEntry (); } } finally { zipInputStream . close (); } } else { console . log ( 'No such file' ); }","title":"Basic Usage"},{"location":"io/zip/#functions","text":"Function Description Returns createZipInputStream(inputStream) Returns the Zip archive reader object ZipInputStream createZipOutputStream(outputStream) Returns the Zip archive writer object ZipOutputStream","title":"Functions"},{"location":"io/zip/#objects","text":"","title":"Objects"},{"location":"io/zip/#zipinputstream","text":"Function Description Returns getNextEntry() Returns the next entry from the archive or null if no more entries found ZipEntry read() Reads from the zip input stream at the current entry point and returns the result as array of bytes array of bytes readNative() Reads from the zip input stream at the current entry point and returns the result as array of Java bytes array of Java bytes readText() Reads from the zip input stream at the current entry point and returns the result as text string close() Closes the zip input stream -","title":"ZipInputStream"},{"location":"io/zip/#zipoutputstream","text":"Function Description Returns createZipEntry() Returns a new entry for the archive ZipEntry write(bytes) Writes an array of bytes to the zip output stream at the current entry point - writeNative(bytes) Writes an array of Java bytes to the zip output stream at the current entry point - writeText(text) Writes a text to the zip output stream at the current entry point - closeEntry() Closes the current entry (optional) - close() Finishes, flushes and closes the zip output stream -","title":"ZipOutputStream"},{"location":"io/zip/#zipentry","text":"Function Description Returns getName() Returns the name of the entry string getSize() Returns the size of the entry integer getCompressedSize() Returns the compressed size of the entry integer getTime() Returns the time stamp of the entry integer getCrc() Returns the CRC sum of the entry integer getComment() Returns the comment text of the entry integer isDirectory() Returns true if the entry represents a directory and false otherwise integer isValid() Returns true if the entry is a valid one and false otherwise (after last) boolean","title":"ZipEntry"},{"location":"job/scheduler/","text":"Job Scheduler Job Scheduler provides convenient API for managing Job state and execution. Overview Module: job/scheduler Source: /job/scheduler.js Status: stable Group: platform Basic Usage ECMA6 import { scheduler } from \"sdk/job\" ; let job = scheduler . getJob ( \"/sample-job/myjob.job\" ); let param = job . getParameter ( \"myParam\" ); console . log ( 'Param is: ' + param ); Functions Function Description Returns getJobs() Returns the list of all the registered user jobs Job array getJob(name) Gets a Job object by its name Job enable(name) Enables the Job regular execution - disable(name) Disables the Job regular execution - trigger(name, parameters) Triggers the Job regular execution with parameters - log(name, message) Logs a message with normal severity - error(name, message) Logs a message with error severity - warn(name, message) Logs a message with warn severity - info(name, message) Logs a message with info severity - Objects Job Function Description Returns getName() Returns the name of the Job string getGroup() Returns the group of the Job string getClazz() Returns the clazz of the Job string getDescription() Returns the description of the Job string getExpression() Returns the expression of the Job string getHandler() Returns the handler of the Job string getEngine() Returns the engine of the Job string getSingleton() Returns the singleton flag of the Job string getEnabled() Returns the enabled state of the Job string getCreatedBy() Returns the created by user of the Job string getCreatedAt() Returns the created at timestamp of the Job string getParameters() Returns the parameters object of the Job JobParameters getParameter(name) Returns the value of the parameter of the Job string enable() Enables the Job - disable() Disables the Job - trigger() Triggers the Job - log(message) Logs a message with normal severity - error(message) Logs a message with error severity - warn(message) Logs a message with warn severity - info(message) Logs a message with info severity - JobParameters Function Description Returns get(i) Returns the parameter by the index JobParameter count() Returns the number of the parameters number JobParameter Function Description Returns getName() Returns the name of the Parameter string getDescription() Returns the description of the Parameter string getType() Returns the type of the Parameter string getDefaultValue() Returns the default value of the Parameter string getChoices() Returns the choices of the Parameter string","title":"Job Scheduler"},{"location":"job/scheduler/#job-scheduler","text":"Job Scheduler provides convenient API for managing Job state and execution. Overview Module: job/scheduler Source: /job/scheduler.js Status: stable Group: platform","title":"Job Scheduler"},{"location":"job/scheduler/#basic-usage","text":"ECMA6 import { scheduler } from \"sdk/job\" ; let job = scheduler . getJob ( \"/sample-job/myjob.job\" ); let param = job . getParameter ( \"myParam\" ); console . log ( 'Param is: ' + param );","title":"Basic Usage"},{"location":"job/scheduler/#functions","text":"Function Description Returns getJobs() Returns the list of all the registered user jobs Job array getJob(name) Gets a Job object by its name Job enable(name) Enables the Job regular execution - disable(name) Disables the Job regular execution - trigger(name, parameters) Triggers the Job regular execution with parameters - log(name, message) Logs a message with normal severity - error(name, message) Logs a message with error severity - warn(name, message) Logs a message with warn severity - info(name, message) Logs a message with info severity -","title":"Functions"},{"location":"job/scheduler/#objects","text":"","title":"Objects"},{"location":"job/scheduler/#job","text":"Function Description Returns getName() Returns the name of the Job string getGroup() Returns the group of the Job string getClazz() Returns the clazz of the Job string getDescription() Returns the description of the Job string getExpression() Returns the expression of the Job string getHandler() Returns the handler of the Job string getEngine() Returns the engine of the Job string getSingleton() Returns the singleton flag of the Job string getEnabled() Returns the enabled state of the Job string getCreatedBy() Returns the created by user of the Job string getCreatedAt() Returns the created at timestamp of the Job string getParameters() Returns the parameters object of the Job JobParameters getParameter(name) Returns the value of the parameter of the Job string enable() Enables the Job - disable() Disables the Job - trigger() Triggers the Job - log(message) Logs a message with normal severity - error(message) Logs a message with error severity - warn(message) Logs a message with warn severity - info(message) Logs a message with info severity -","title":"Job"},{"location":"job/scheduler/#jobparameters","text":"Function Description Returns get(i) Returns the parameter by the index JobParameter count() Returns the number of the parameters number","title":"JobParameters"},{"location":"job/scheduler/#jobparameter","text":"Function Description Returns getName() Returns the name of the Parameter string getDescription() Returns the description of the Parameter string getType() Returns the type of the Parameter string getDefaultValue() Returns the default value of the Parameter string getChoices() Returns the choices of the Parameter string","title":"JobParameter"},{"location":"kafka/consumer/","text":"Kafka Consumer The Kafka Consumer is listening on a Topic destination to a Kafka messaging server. Overview Module: kafka/consumer Alias: kafka/consumer Definition: https://github.com/eclipse/dirigible/issues/641 Source: /kafka/consumer.js Facade: KafkaFacade Status: beta Group: ext Basic Usage Start listening on a topic ECMA6 import { consumer } from \"sdk/kafka\" ; consumer . topic ( \"topic1\" , \"{}\" ). startListening ( \"<kafka-project>/<kafka-handler>\" , 1000 ); File: <kafka-project>/<kafka-handler.js> exports . onMessage = function ( message ) { console . log ( \"Hello from My Kafka Listener! Message: \" + message ); }; exports . onError = function ( error ) { console . error ( \"Error from My Kafka Listener! Error: \" + error ); }; Stop listening on a topic ECMA6 import { consumer } from \"sdk/kafka\" ; consumer . topic ( \"topic1\" , \"{}\" ). stopListening (); Functions Function Description Returns topic(destination, configuration) Returns an object representing a Kafka Topic Topic Configuration object key-value pairs can be taken from https://kafka.apache.org/documentation/#consumerconfigs Objects Topic Function Description Returns startListening(handler, timeout) Receives a message from this Kafka Topic if any with the given handler and timeout in milliseconds - stopListening() Stops listening for new messages -","title":"Kafka Consumer"},{"location":"kafka/consumer/#kafka-consumer","text":"The Kafka Consumer is listening on a Topic destination to a Kafka messaging server. Overview Module: kafka/consumer Alias: kafka/consumer Definition: https://github.com/eclipse/dirigible/issues/641 Source: /kafka/consumer.js Facade: KafkaFacade Status: beta Group: ext","title":"Kafka Consumer"},{"location":"kafka/consumer/#basic-usage","text":"","title":"Basic Usage"},{"location":"kafka/consumer/#start-listening-on-a-topic","text":"ECMA6 import { consumer } from \"sdk/kafka\" ; consumer . topic ( \"topic1\" , \"{}\" ). startListening ( \"<kafka-project>/<kafka-handler>\" , 1000 ); File: <kafka-project>/<kafka-handler.js> exports . onMessage = function ( message ) { console . log ( \"Hello from My Kafka Listener! Message: \" + message ); }; exports . onError = function ( error ) { console . error ( \"Error from My Kafka Listener! Error: \" + error ); };","title":"Start listening on a topic"},{"location":"kafka/consumer/#stop-listening-on-a-topic","text":"ECMA6 import { consumer } from \"sdk/kafka\" ; consumer . topic ( \"topic1\" , \"{}\" ). stopListening ();","title":"Stop listening on a topic"},{"location":"kafka/consumer/#functions","text":"Function Description Returns topic(destination, configuration) Returns an object representing a Kafka Topic Topic Configuration object key-value pairs can be taken from https://kafka.apache.org/documentation/#consumerconfigs","title":"Functions"},{"location":"kafka/consumer/#objects","text":"","title":"Objects"},{"location":"kafka/consumer/#topic","text":"Function Description Returns startListening(handler, timeout) Receives a message from this Kafka Topic if any with the given handler and timeout in milliseconds - stopListening() Stops listening for new messages -","title":"Topic"},{"location":"kafka/producer/","text":"Kafka Producer The Kafka Producer is sending message records to a Topic destination to a Kafka messaging server. Overview Module: kafka/producer Alias: kafka/producer Definition: https://github.com/eclipse/dirigible/issues/640 Source: /kafka/producer.js Facade: KafkaFacade Status: beta Group: ext Basic Usage Send record to a given topic (implicitly create producer if needed) : ECMA6 import { producer } from \"sdk/producer\" ; producer . topic ( \"topic1\" , \"{}\" ). send ( \"key1\" , \"value1\" ); Close the producer: ECMA6 import { producer } from \"sdk/producer\" ; producer . close ( \"{}\" ); Functions Function Description Returns topic(destination, configuration) Returns an object representing a Kafka Topic Topic close(configuration) Closes the Producer - Configuration object key-value pairs can be taken from https://kafka.apache.org/documentation/#producerconfigs Objects Topic Function Description Returns send(key, value) Send a message record by a key and value to a Kafka Topic -","title":"Kafka Producer"},{"location":"kafka/producer/#kafka-producer","text":"The Kafka Producer is sending message records to a Topic destination to a Kafka messaging server. Overview Module: kafka/producer Alias: kafka/producer Definition: https://github.com/eclipse/dirigible/issues/640 Source: /kafka/producer.js Facade: KafkaFacade Status: beta Group: ext","title":"Kafka Producer"},{"location":"kafka/producer/#basic-usage","text":"Send record to a given topic (implicitly create producer if needed) : ECMA6 import { producer } from \"sdk/producer\" ; producer . topic ( \"topic1\" , \"{}\" ). send ( \"key1\" , \"value1\" ); Close the producer: ECMA6 import { producer } from \"sdk/producer\" ; producer . close ( \"{}\" );","title":"Basic Usage"},{"location":"kafka/producer/#functions","text":"Function Description Returns topic(destination, configuration) Returns an object representing a Kafka Topic Topic close(configuration) Closes the Producer - Configuration object key-value pairs can be taken from https://kafka.apache.org/documentation/#producerconfigs","title":"Functions"},{"location":"kafka/producer/#objects","text":"","title":"Objects"},{"location":"kafka/producer/#topic","text":"Function Description Returns send(key, value) Send a message record by a key and value to a Kafka Topic -","title":"Topic"},{"location":"loader/","text":"Loader The loader is a system service that aggregates javascript and css files togeter by groups and returns a bundle to the client. Overview Module: platform-core Source: platform-core/services/loader.js Service Link: /services/js/platform-core/services/loader.js Status: stable Group: platform Bundles Bundle name Description view-js view-css Everything needed to create a Dirigible view. editor-js Same as the view but with the workspace and repository services and hubs included. perspective-js perspective-css Everything needed to create a Dirigible perspective. shell-js shell-css Everything needed to create a Dirigible shell. file-upload-js angular-file-upload module. split-js split-css Split.js library and <split> directive. code-editor-js code-editor-css Embeddable monaco editor in the form of a <code-editor> directive. cookies AngularJS cookie module. Note You cannot mix -css and -js bundles in one request. Example Requesting the view bundle: < script type = \"text/javascript\" src = \"/services/js/platform-core/services/loader.js?id=view-js\" ></ script > < link type = \"text/css\" rel = \"stylesheet\" href = \"/services/js/platform-core/services/loader.js?id=view-css\" /> Requesting the view bundle with the embeddable editor: < script type = \"text/javascript\" src = \"/services/js/platform-core/services/loader.js?ids=view-js,code-editor-js\" ></ script > < link type = \"text/css\" rel = \"stylesheet\" href = \"/services/js/platform-core/services/loader.js?ids=view-css,code-editor-css\" />","title":"Loader"},{"location":"loader/#loader","text":"The loader is a system service that aggregates javascript and css files togeter by groups and returns a bundle to the client. Overview Module: platform-core Source: platform-core/services/loader.js Service Link: /services/js/platform-core/services/loader.js Status: stable Group: platform","title":"Loader"},{"location":"loader/#bundles","text":"Bundle name Description view-js view-css Everything needed to create a Dirigible view. editor-js Same as the view but with the workspace and repository services and hubs included. perspective-js perspective-css Everything needed to create a Dirigible perspective. shell-js shell-css Everything needed to create a Dirigible shell. file-upload-js angular-file-upload module. split-js split-css Split.js library and <split> directive. code-editor-js code-editor-css Embeddable monaco editor in the form of a <code-editor> directive. cookies AngularJS cookie module. Note You cannot mix -css and -js bundles in one request.","title":"Bundles"},{"location":"loader/#example","text":"Requesting the view bundle: < script type = \"text/javascript\" src = \"/services/js/platform-core/services/loader.js?id=view-js\" ></ script > < link type = \"text/css\" rel = \"stylesheet\" href = \"/services/js/platform-core/services/loader.js?id=view-css\" /> Requesting the view bundle with the embeddable editor: < script type = \"text/javascript\" src = \"/services/js/platform-core/services/loader.js?ids=view-js,code-editor-js\" ></ script > < link type = \"text/css\" rel = \"stylesheet\" href = \"/services/js/platform-core/services/loader.js?ids=view-css,code-editor-css\" />","title":"Example"},{"location":"log/logging/","text":"Logging Logging API using high-performance underlying framework - logback . Overview Module: log/logging Definition: https://github.com/eclipse/dirigible/issues/121 Source: /log/logging.js Status: stable Group: core Basic Usage ECMA6 import { logging } from \"sdk/log\" ; let logger = logging . getLogger ( \"org.eclipse.dirigible.mylogger\" ); logger . debug ( \"Hello from {} {}!\" , \"MyLogger\" ); logger . error ( \"Oops\" , new Error ( \"Something wrong happened\" )); Functions Function Description Returns getLogger(name) Returns the Logger object by this name Logger Objects Logger Function Description Returns info(message, args?) Logs the message with the INFO log level - warn(message, args?) Logs the message with the WARN log level - error(message, args?) Logs the message with the ERROR log level - debug(message, args?) Logs the message with the DEBUG log level - trace(message, args?) Logs the message with the TRACE log level - log(message, level, args?) Logs the message with the provided log level and optional message parameters - infoError(message, error) Logs the error with the stack trace with the INFO log level - warnError(message, error) Logs the error with the stack trace with the WARN log level - errorError(message, error) Logs the error with the stack trace with the ERROR log level - debugError(message, error) Logs the error with the stack trace with the DEBUG log level - traceError(message, error) Logs the error with the stack trace with the TRACE log level - setLevel(level) Sets the log level ('INFO', 'WARN', 'ERROR', 'DEBUG', 'TRACE') -","title":"Logging"},{"location":"log/logging/#logging","text":"Logging API using high-performance underlying framework - logback . Overview Module: log/logging Definition: https://github.com/eclipse/dirigible/issues/121 Source: /log/logging.js Status: stable Group: core","title":"Logging"},{"location":"log/logging/#basic-usage","text":"ECMA6 import { logging } from \"sdk/log\" ; let logger = logging . getLogger ( \"org.eclipse.dirigible.mylogger\" ); logger . debug ( \"Hello from {} {}!\" , \"MyLogger\" ); logger . error ( \"Oops\" , new Error ( \"Something wrong happened\" ));","title":"Basic Usage"},{"location":"log/logging/#functions","text":"Function Description Returns getLogger(name) Returns the Logger object by this name Logger","title":"Functions"},{"location":"log/logging/#objects","text":"","title":"Objects"},{"location":"log/logging/#logger","text":"Function Description Returns info(message, args?) Logs the message with the INFO log level - warn(message, args?) Logs the message with the WARN log level - error(message, args?) Logs the message with the ERROR log level - debug(message, args?) Logs the message with the DEBUG log level - trace(message, args?) Logs the message with the TRACE log level - log(message, level, args?) Logs the message with the provided log level and optional message parameters - infoError(message, error) Logs the error with the stack trace with the INFO log level - warnError(message, error) Logs the error with the stack trace with the WARN log level - errorError(message, error) Logs the error with the stack trace with the ERROR log level - debugError(message, error) Logs the error with the stack trace with the DEBUG log level - traceError(message, error) Logs the error with the stack trace with the TRACE log level - setLevel(level) Sets the log level ('INFO', 'WARN', 'ERROR', 'DEBUG', 'TRACE') -","title":"Logger"},{"location":"mail/client/","text":"Mail Mail object is used to send e-mails through the mail service. Overview Module: mail/client Definition: https://github.com/eclipse/dirigible/issues/108 Source: /mail/client.js Status: stable Group: platform Basic Usage ECMA6 import { client } from \"sdk/mail\" ; import { response } from \"sdk/http\" ; const sender = \"dirigible@eclipse.org\" ; const to = \"example@gmail.com\" ; const subject = \"Subject\" ; const content = \"<h1>Content<h1>\" ; const subType = \"html\" ; client . send ( sender , to , subject , content , subType ); response . println ( \"Mail sent\" ); Advance Usage ECMA6 import { client } from \"sdk/mail\" ; import { response } from \"sdk/http\" ; let mailConfig = { \"mail.user\" : \"<your-user>\" , \"mail.password\" : \"<your-password>\" , \"mail.transport.protocol\" : \"smtps\" , \"mail.smtps.host\" : \"smtp.gmail.com\" , \"mail.smtps.port\" : \"465\" , \"mail.smtps.auth\" : \"true\" }; let mailClient = client . getClient ( mailConfig ); let sender = \"dirigible@gmail.com\" ; let recipients = { to : \"example@gmail.com\" , cc : [ \"example1@gmail.com\" , \"example2@sap.com\" ], bcc : \"example3@sap.com\" }; let subject = \"Subject\" ; let content = \"<h1>Content</h1>\" ; let subType = \"html\" ; mailClient . send ( sender , recipients , subject , content , subType ); response . println ( \"Mail sent\" ); Functions Function Description Returns getClient(options) Get mail client with the provided MailClientOptions , if no options are provided, the default mail client configuration will be used MailClient send(from, recipients, subject, text, subType) Send mail using the default mail client configuration to MailRecipients - Objects MailClient Property Description Type send(from, recipients, subject, text, subType) Send mail to MailRecipients MailClient function MailClientOptions Property Description Type mail.user The mailbox user string mail.password The mailbox password string mail.transport.protocol (optional) The mail transport protocol, default is smtps string mail.smtps.host The mail SMPTPS host string mail.smtps.port The mail SMPTPS port number as string mail.smtps.auth Enable/Disable mail SMPTPS authentication boolean as string mail.smtp.host The mail SMPTP host string mail.smtp.port The mail SMPTP port number as string mail.smtp.auth Enable/Disable mail SMPTP authentication boolean as string Addition mail client options can be found here: - SMTP/SMTPS - IMAP - POP3 MailRecipients Property Description Type to The to recipient(s) string or Array of strings cc The cc recipient(s) string or Array of strings bcc The bcc recipient(s) string or Array of strings","title":"Mail"},{"location":"mail/client/#mail","text":"Mail object is used to send e-mails through the mail service. Overview Module: mail/client Definition: https://github.com/eclipse/dirigible/issues/108 Source: /mail/client.js Status: stable Group: platform","title":"Mail"},{"location":"mail/client/#basic-usage","text":"ECMA6 import { client } from \"sdk/mail\" ; import { response } from \"sdk/http\" ; const sender = \"dirigible@eclipse.org\" ; const to = \"example@gmail.com\" ; const subject = \"Subject\" ; const content = \"<h1>Content<h1>\" ; const subType = \"html\" ; client . send ( sender , to , subject , content , subType ); response . println ( \"Mail sent\" );","title":"Basic Usage"},{"location":"mail/client/#advance-usage","text":"ECMA6 import { client } from \"sdk/mail\" ; import { response } from \"sdk/http\" ; let mailConfig = { \"mail.user\" : \"<your-user>\" , \"mail.password\" : \"<your-password>\" , \"mail.transport.protocol\" : \"smtps\" , \"mail.smtps.host\" : \"smtp.gmail.com\" , \"mail.smtps.port\" : \"465\" , \"mail.smtps.auth\" : \"true\" }; let mailClient = client . getClient ( mailConfig ); let sender = \"dirigible@gmail.com\" ; let recipients = { to : \"example@gmail.com\" , cc : [ \"example1@gmail.com\" , \"example2@sap.com\" ], bcc : \"example3@sap.com\" }; let subject = \"Subject\" ; let content = \"<h1>Content</h1>\" ; let subType = \"html\" ; mailClient . send ( sender , recipients , subject , content , subType ); response . println ( \"Mail sent\" );","title":"Advance Usage"},{"location":"mail/client/#functions","text":"Function Description Returns getClient(options) Get mail client with the provided MailClientOptions , if no options are provided, the default mail client configuration will be used MailClient send(from, recipients, subject, text, subType) Send mail using the default mail client configuration to MailRecipients -","title":"Functions"},{"location":"mail/client/#objects","text":"","title":"Objects"},{"location":"mail/client/#mailclient","text":"Property Description Type send(from, recipients, subject, text, subType) Send mail to MailRecipients MailClient function","title":"MailClient"},{"location":"mail/client/#mailclientoptions","text":"Property Description Type mail.user The mailbox user string mail.password The mailbox password string mail.transport.protocol (optional) The mail transport protocol, default is smtps string mail.smtps.host The mail SMPTPS host string mail.smtps.port The mail SMPTPS port number as string mail.smtps.auth Enable/Disable mail SMPTPS authentication boolean as string mail.smtp.host The mail SMPTP host string mail.smtp.port The mail SMPTP port number as string mail.smtp.auth Enable/Disable mail SMPTP authentication boolean as string Addition mail client options can be found here: - SMTP/SMTPS - IMAP - POP3","title":"MailClientOptions"},{"location":"mail/client/#mailrecipients","text":"Property Description Type to The to recipient(s) string or Array of strings cc The cc recipient(s) string or Array of strings bcc The bcc recipient(s) string or Array of strings","title":"MailRecipients"},{"location":"messaging/consumer/","text":"Message Consumer The Messaging Consumer is an object which can send text messages to a Queue or Topic destination in the built-in Message Broker. This version is backed by the full fledged messaging broker Apache ActiveMQ . Overview Module: messaging/consumer Definition: https://github.com/eclipse/dirigible/issues/92 Source: /messaging/consumer.js Status: stable Group: platform Basic Usage ECMA6 import { consumer } from \"sdk/messaging\" ; let message = consumer . queue ( \"queue1\" ). receive ( 1000 ); console . log ( message ) Functions Function Description Returns queue() Returns an object representing a Message Queue Queue topic() Returns an object representing a Message Topic Topic Objects Queue Function Description Returns receive(timeout) Receives a message from this Message Queue if any or null with the given timeout in milliseconds string Topic Function Description Returns receive(timeout) Receives a message from this Message Topic if any or null with the given timeout in milliseconds string","title":"Message Consumer"},{"location":"messaging/consumer/#message-consumer","text":"The Messaging Consumer is an object which can send text messages to a Queue or Topic destination in the built-in Message Broker. This version is backed by the full fledged messaging broker Apache ActiveMQ . Overview Module: messaging/consumer Definition: https://github.com/eclipse/dirigible/issues/92 Source: /messaging/consumer.js Status: stable Group: platform","title":"Message Consumer"},{"location":"messaging/consumer/#basic-usage","text":"ECMA6 import { consumer } from \"sdk/messaging\" ; let message = consumer . queue ( \"queue1\" ). receive ( 1000 ); console . log ( message )","title":"Basic Usage"},{"location":"messaging/consumer/#functions","text":"Function Description Returns queue() Returns an object representing a Message Queue Queue topic() Returns an object representing a Message Topic Topic","title":"Functions"},{"location":"messaging/consumer/#objects","text":"","title":"Objects"},{"location":"messaging/consumer/#queue","text":"Function Description Returns receive(timeout) Receives a message from this Message Queue if any or null with the given timeout in milliseconds string","title":"Queue"},{"location":"messaging/consumer/#topic","text":"Function Description Returns receive(timeout) Receives a message from this Message Topic if any or null with the given timeout in milliseconds string","title":"Topic"},{"location":"messaging/producer/","text":"Message Producer The Messaging Producer is an object which can send text messages to a Queue or Topic destination in the built-in Message Broker. This version is backed by the full fledged messaging broker Apache ActiveMQ . Overview Module: messaging/producer Definition: https://github.com/eclipse/dirigible/issues/91 Source: /messaging/producer.js Status: stable Group: platform Basic Usage ECMA6 import { producer } from \"sdk/messaging\" producer . queue ( \"queue1\" ). send ( \"Text Message\" ); Functions Function Description Returns queue() Returns an object representing a Message Queue Queue topic() Returns an object representing a Message Topic Topic Objects Queue Function Description Returns send(message) Send a message to this Message Queue - Topic Function Description Returns send(message) Send a message to this Message Topic -","title":"Message Producer"},{"location":"messaging/producer/#message-producer","text":"The Messaging Producer is an object which can send text messages to a Queue or Topic destination in the built-in Message Broker. This version is backed by the full fledged messaging broker Apache ActiveMQ . Overview Module: messaging/producer Definition: https://github.com/eclipse/dirigible/issues/91 Source: /messaging/producer.js Status: stable Group: platform","title":"Message Producer"},{"location":"messaging/producer/#basic-usage","text":"ECMA6 import { producer } from \"sdk/messaging\" producer . queue ( \"queue1\" ). send ( \"Text Message\" );","title":"Basic Usage"},{"location":"messaging/producer/#functions","text":"Function Description Returns queue() Returns an object representing a Message Queue Queue topic() Returns an object representing a Message Topic Topic","title":"Functions"},{"location":"messaging/producer/#objects","text":"","title":"Objects"},{"location":"messaging/producer/#queue","text":"Function Description Returns send(message) Send a message to this Message Queue -","title":"Queue"},{"location":"messaging/producer/#topic","text":"Function Description Returns send(message) Send a message to this Message Topic -","title":"Topic"},{"location":"mongodb/client/","text":"MongoDB Client The MongoDB Client is giving an access to a MongoDB noSQL server. Overview Module: mongodb/client Definition: https://github.com/eclipse/dirigible/issues/668 Source: /mongodb/client.js Status: stable Group: ext Basic Usage Start your MongoDB server with default settings and use the following example: ECMA6 import { client } from \"sdk/mongodb\" ; import { response } from \"sdk/http\" ; let mongoClient = client . getClient (); let collection = mongoClient . getDB ( \"db\" ). getCollection ( \"people\" ); let person = client . createBasicDBObject () . append ( \"_id\" , \"jo\" ) . append ( \"name\" , \"Jo Bloggs\" ); // or directly create an Object: // const person = {\"_id\": \"jo\", \"name\": \"Jo Bloggs\"}; collection . insert ( person ); let query = client . createBasicDBObject (). append ( \"_id\" , \"jo\" ); let cursor = collection . find ( query ) let result = cursor . one (); response . println ( \"Result: \" + result . _id ); response . flush (); response . close (); Functions Function Description Returns getClient() Returns an object representing a MongoDB Client Client createBasicDBObject() Creates an empty DBObject DBObject Objects Client Function Description Returns getDB(name) Returns an object representing a MongoDB Database DB DB Function Description Returns getCollection(name) Returns an object representing a MongoDB Collection DBCollection DBCollection Function Description Returns insert(dbObject) Inserts a DBObject to a Collection - find(query, projection) Returns a DBCursor based on the optional DBObjects parameters DBCursor findOne(query, projection, sort) Returns a single DBObject based on the optional DBObjects parameters and sort DBObject findOneById(id, projection) Returns a single DBObject by id and the optional DBObject projection parameter DBObject count(query) Returns the count of matching DBObjects by the optional DBObject query parameter integer createIndex(keys, options) Creates an index by keys and optional DBObject options parameters - createIndexForField(name) Creates an index for field by name - dropIndex(index) Drops the index by the DBObeject parameter - dropIndexByName(name) Drops the index by the name parameter - dropIndexes() Drops all the indexes - remove(query) Removes the objects matching the query DBObject parameter - rename(newName) Renames the collection by the newName parameter - save(dbObject) Saves a DBObject to a Collection depends on whether _id of the object is provided or not - update(query, update, upsert, multi) Updates the matching objects by query parameter with update value and optional upsert and multi flags - updateMulti(query, update) Updates the matching objects by query parameter with update value - getNextId() Calculate the next id for this collection in case of integer sequence is used integer generateUUID() Generate UUID to be used as id string DBCursor Function Description Returns one() Returns a single DBObject DBObject batchSize(numberOfElements) Sets the batch size - getBatchSize() Gets the batch size integer getCollection() Gets the corresponding DBCollection DBCollection getCursorId() Gets the cursor id integer getKeysWanted() Returns as a keys DBObject DBObject getLimit() Gets the results limit integer close() Closes the cursor - hasNext() Returns true if there is more objects boolean next() Returns the next single DBObject DBObject getQuery() Returns as a query DBObject DBObject length() Returns the length of the results integer limit(limit) Sets the results limit ** min(min) Sets the min results ** max(max) Sets the max results ** maxTime(maxTime) Sets the maxTime timeout in ms ** size() Gets the results size integer sort(orderBy) Sort the result by the orderBy parameter - skip(numberOfElements) Skips the next numberOfElements - DBObject Function Description Returns append(key, value) Adds a pair by key and value parameters DBObject (this) toJson() Renders the DBObject as a JSON string isPartialObject() Only matters if you are going to upsert and do not want to risk losing fields - containsField(key) Whether contans a given field by key parameter boolean get(key) Returns the value by the key parameter primitive put(key, value) Adds the key - value pair - removeField(key) Removes the field by key parameter -","title":"MongoDB Client"},{"location":"mongodb/client/#mongodb-client","text":"The MongoDB Client is giving an access to a MongoDB noSQL server. Overview Module: mongodb/client Definition: https://github.com/eclipse/dirigible/issues/668 Source: /mongodb/client.js Status: stable Group: ext","title":"MongoDB Client"},{"location":"mongodb/client/#basic-usage","text":"Start your MongoDB server with default settings and use the following example: ECMA6 import { client } from \"sdk/mongodb\" ; import { response } from \"sdk/http\" ; let mongoClient = client . getClient (); let collection = mongoClient . getDB ( \"db\" ). getCollection ( \"people\" ); let person = client . createBasicDBObject () . append ( \"_id\" , \"jo\" ) . append ( \"name\" , \"Jo Bloggs\" ); // or directly create an Object: // const person = {\"_id\": \"jo\", \"name\": \"Jo Bloggs\"}; collection . insert ( person ); let query = client . createBasicDBObject (). append ( \"_id\" , \"jo\" ); let cursor = collection . find ( query ) let result = cursor . one (); response . println ( \"Result: \" + result . _id ); response . flush (); response . close ();","title":"Basic Usage"},{"location":"mongodb/client/#functions","text":"Function Description Returns getClient() Returns an object representing a MongoDB Client Client createBasicDBObject() Creates an empty DBObject DBObject","title":"Functions"},{"location":"mongodb/client/#objects","text":"","title":"Objects"},{"location":"mongodb/client/#client","text":"Function Description Returns getDB(name) Returns an object representing a MongoDB Database DB","title":"Client"},{"location":"mongodb/client/#db","text":"Function Description Returns getCollection(name) Returns an object representing a MongoDB Collection DBCollection","title":"DB"},{"location":"mongodb/client/#dbcollection","text":"Function Description Returns insert(dbObject) Inserts a DBObject to a Collection - find(query, projection) Returns a DBCursor based on the optional DBObjects parameters DBCursor findOne(query, projection, sort) Returns a single DBObject based on the optional DBObjects parameters and sort DBObject findOneById(id, projection) Returns a single DBObject by id and the optional DBObject projection parameter DBObject count(query) Returns the count of matching DBObjects by the optional DBObject query parameter integer createIndex(keys, options) Creates an index by keys and optional DBObject options parameters - createIndexForField(name) Creates an index for field by name - dropIndex(index) Drops the index by the DBObeject parameter - dropIndexByName(name) Drops the index by the name parameter - dropIndexes() Drops all the indexes - remove(query) Removes the objects matching the query DBObject parameter - rename(newName) Renames the collection by the newName parameter - save(dbObject) Saves a DBObject to a Collection depends on whether _id of the object is provided or not - update(query, update, upsert, multi) Updates the matching objects by query parameter with update value and optional upsert and multi flags - updateMulti(query, update) Updates the matching objects by query parameter with update value - getNextId() Calculate the next id for this collection in case of integer sequence is used integer generateUUID() Generate UUID to be used as id string","title":"DBCollection"},{"location":"mongodb/client/#dbcursor","text":"Function Description Returns one() Returns a single DBObject DBObject batchSize(numberOfElements) Sets the batch size - getBatchSize() Gets the batch size integer getCollection() Gets the corresponding DBCollection DBCollection getCursorId() Gets the cursor id integer getKeysWanted() Returns as a keys DBObject DBObject getLimit() Gets the results limit integer close() Closes the cursor - hasNext() Returns true if there is more objects boolean next() Returns the next single DBObject DBObject getQuery() Returns as a query DBObject DBObject length() Returns the length of the results integer limit(limit) Sets the results limit ** min(min) Sets the min results ** max(max) Sets the max results ** maxTime(maxTime) Sets the maxTime timeout in ms ** size() Gets the results size integer sort(orderBy) Sort the result by the orderBy parameter - skip(numberOfElements) Skips the next numberOfElements -","title":"DBCursor"},{"location":"mongodb/client/#dbobject","text":"Function Description Returns append(key, value) Adds a pair by key and value parameters DBObject (this) toJson() Renders the DBObject as a JSON string isPartialObject() Only matters if you are going to upsert and do not want to risk losing fields - containsField(key) Whether contans a given field by key parameter boolean get(key) Returns the value by the key parameter primitive put(key, value) Adds the key - value pair - removeField(key) Removes the field by key parameter -","title":"DBObject"},{"location":"mongodb/dao/","text":"MongoDB DAO The MongoDB DAO simplified database access objects utility. Overview Module: mongodb/dao Definition: https://github.com/eclipse/dirigible/issues/671 Source: /mongodb/dao.js Status: stable Group: ext Basic Usage ECMA6 import { dao } from \"sdk/mongodb\" ; import { response } from \"sdk/http\" ; //create a DAO from configuration let customers = dao . create ({ table : \"CUSTOMERS\" , properties : [{ name : \"id\" , column : \"ID\" , type : \"BIGINT\" , id : true }, { name : \"orgName\" , column : \"ORG_NAME\" , type : \"VARCHAR\" , required : true }, { name : \"employeesNumber\" , column : \"ORG_EMP_NUM\" , type : \"INTEGER\" , required : true }, { name : \"orgDescription\" , column : \"ORG_DESCR\" , type : \"VARCHAR\" , required : false }] }); //Create a new customer entity let customerId = customers . insert ({ orgName : \"ACME\" , employeesNumber : 1000 }); response . println ( \"Id: \" + customerId ); //List all customer entities let customersList = customers . list (); //Get a particular customer entity by its id let customer = customers . find ( customerId ); //Update a customer entity property customer . orgDescription = \"ACME is a company\" ; customers . update ( customer ); //Delete a customer entity customers . remove ( customerId ); Functions Function Description Returns create(oConfiguration, loggerName?) Creates new DAO instances from oConfiguraiton JS object, which can be either standard ORM definition or a standard dirigible table definition DAO Objects DAO Function Description Returns insert(entity) inserts array or entity and returns id (or ids of array of entities was supplied as input) any list(oQuerySettings?) lists entities optionally constrained with the supplied query settings Array find(id, expand?, select?) returns an entity by its id(if any), optionally expanding inline the associations defined in expand and optionally constraining the entitiy properties to those specified in select Object update(entity) updates a persistent entity and returns for its dao chaining DAO remove(?id) delete entity by id, or array of ids, or delete all (if not argument is provided). --- count() returns the number of persisted entities Number","title":"MongoDB DAO"},{"location":"mongodb/dao/#mongodb-dao","text":"The MongoDB DAO simplified database access objects utility. Overview Module: mongodb/dao Definition: https://github.com/eclipse/dirigible/issues/671 Source: /mongodb/dao.js Status: stable Group: ext","title":"MongoDB DAO"},{"location":"mongodb/dao/#basic-usage","text":"ECMA6 import { dao } from \"sdk/mongodb\" ; import { response } from \"sdk/http\" ; //create a DAO from configuration let customers = dao . create ({ table : \"CUSTOMERS\" , properties : [{ name : \"id\" , column : \"ID\" , type : \"BIGINT\" , id : true }, { name : \"orgName\" , column : \"ORG_NAME\" , type : \"VARCHAR\" , required : true }, { name : \"employeesNumber\" , column : \"ORG_EMP_NUM\" , type : \"INTEGER\" , required : true }, { name : \"orgDescription\" , column : \"ORG_DESCR\" , type : \"VARCHAR\" , required : false }] }); //Create a new customer entity let customerId = customers . insert ({ orgName : \"ACME\" , employeesNumber : 1000 }); response . println ( \"Id: \" + customerId ); //List all customer entities let customersList = customers . list (); //Get a particular customer entity by its id let customer = customers . find ( customerId ); //Update a customer entity property customer . orgDescription = \"ACME is a company\" ; customers . update ( customer ); //Delete a customer entity customers . remove ( customerId );","title":"Basic Usage"},{"location":"mongodb/dao/#functions","text":"Function Description Returns create(oConfiguration, loggerName?) Creates new DAO instances from oConfiguraiton JS object, which can be either standard ORM definition or a standard dirigible table definition DAO","title":"Functions"},{"location":"mongodb/dao/#objects","text":"","title":"Objects"},{"location":"mongodb/dao/#dao","text":"Function Description Returns insert(entity) inserts array or entity and returns id (or ids of array of entities was supplied as input) any list(oQuerySettings?) lists entities optionally constrained with the supplied query settings Array find(id, expand?, select?) returns an entity by its id(if any), optionally expanding inline the associations defined in expand and optionally constraining the entitiy properties to those specified in select Object update(entity) updates a persistent entity and returns for its dao chaining DAO remove(?id) delete entity by id, or array of ids, or delete all (if not argument is provided). --- count() returns the number of persisted entities Number","title":"DAO"},{"location":"net/soap/","text":"SOAP SOAP utility exposes web services framework for manipulating SOAP messages, making calls to external end-points and creating simple web services Overview Module: net/soap Definition: https://github.com/eclipse/dirigible/issues/390 Source: /net/soap.js Status: stable Group: platform Basic Usage ECMA6 import { soap } from \"sdk/net\" ; import { response } from \"sdk/http\" ; response . setContentType ( \"text/plain; charset=UTF-8\" ); let requestMessage = soap . createMessage (); let part = requestMessage . getPart (); let envelope = part . getEnvelope (); envelope . addNamespaceDeclaration ( \"ws\" , \"http://ws.cdyne.com/\" ); let body = envelope . getBody (); let resolveIPElement = body . addChildElement ( \"ResolveIP\" , \"ws\" ); let ipAddressElement = resolveIPElement . addChildElement ( \"ipAddress\" , \"ws\" ); ipAddressElement . addTextNode ( \"213.239.203.158\" ); let licenseKeyElement = resolveIPElement . addChildElement ( \"licenseKey\" , \"ws\" ); licenseKeyElement . addTextNode ( \"\" ); let mimeHeaders = requestMessage . getMimeHeaders (); mimeHeaders . addHeader ( \"SOAPAction\" , \"http://ws.cdyne.com/ResolveIP\" ); requestMessage . save (); response . println ( \"Request: \" + requestMessage . getText ()); let responseMessage = soap . call ( requestMessage , \"http://ws.cdyne.com/ip2geo/ip2geo.asmx\" ); response . println ( \"Response: \" + responseMessage . getText ()); response . flush (); response . close (); Functions Function Description Returns createMessage() Creates an empty SOAP Message Message parseMessage(mimeHeaders, inputStream) Creates a message by a given MIME Headers and by parsing of the provided input stream Message parseRequest() Creates a message by parsing the standard Request input and empty headers Message createMimeHeaders() Creates an empty MimeHeaders MimeHeaders call(request, url) Calls an end-point of a SOAP Web Service with a request Message and returns the response Message Message Objects Message Function Description Returns getMimeHeaders() Returns the MimeHeaders object of this Message MimeHeaders getPart() Returns the Part object of this Message Part save() Save the changes made on the Message and its components - getText() Returns a text representation of the Message string MimeHeaders Function Description Returns addHeader(name, value) Creates and add a new MIME header - Part Function Description Returns getEnvelope() Returns the Envelope object of this Part Envelope Envelope Function Description Returns getBody() Returns the Body object of this Envelope Body getHeader() Returns the Header object of this Envelope Header addNamespaceDeclaration(prefix, uri) Creates and add a namespace attribute - createName(localName, prefix, uri) Creates a Name object to be used further Name Body Function Description Returns getChildElements() Returns an array of the child Elements [Element] addChildElement(localName, prefix) Creates and add a child Element Element Header Function Description Returns addHeaderElement(name) Creates and add a Header Element with a Name Element Name Function Description Returns getLocalName() Returns the Local Name of the Name object string getPrefix() Returns the Prefix of the Name object string getQualifiedName() Returns the Qualified Name of the Name object string getURI() Returns the URI of the Name object string Element Function Description Returns getChildElements() Returns an array of the child Elements [Element] getElementName() Returns the name of the Element Name getValue() Returns the value of the Element if any string addChildElement(localName, prefix) Creates and add a child Element Element addTextNode(text) Creates and add a text node Element addAttribute(name, value) Creates and add an attribute Element isSOAPElement() Returns true if the Element is SOAP Element and false otherwise (e.g. CDATA, PDATA, etc.) string","title":"SOAP"},{"location":"net/soap/#soap","text":"SOAP utility exposes web services framework for manipulating SOAP messages, making calls to external end-points and creating simple web services Overview Module: net/soap Definition: https://github.com/eclipse/dirigible/issues/390 Source: /net/soap.js Status: stable Group: platform","title":"SOAP"},{"location":"net/soap/#basic-usage","text":"ECMA6 import { soap } from \"sdk/net\" ; import { response } from \"sdk/http\" ; response . setContentType ( \"text/plain; charset=UTF-8\" ); let requestMessage = soap . createMessage (); let part = requestMessage . getPart (); let envelope = part . getEnvelope (); envelope . addNamespaceDeclaration ( \"ws\" , \"http://ws.cdyne.com/\" ); let body = envelope . getBody (); let resolveIPElement = body . addChildElement ( \"ResolveIP\" , \"ws\" ); let ipAddressElement = resolveIPElement . addChildElement ( \"ipAddress\" , \"ws\" ); ipAddressElement . addTextNode ( \"213.239.203.158\" ); let licenseKeyElement = resolveIPElement . addChildElement ( \"licenseKey\" , \"ws\" ); licenseKeyElement . addTextNode ( \"\" ); let mimeHeaders = requestMessage . getMimeHeaders (); mimeHeaders . addHeader ( \"SOAPAction\" , \"http://ws.cdyne.com/ResolveIP\" ); requestMessage . save (); response . println ( \"Request: \" + requestMessage . getText ()); let responseMessage = soap . call ( requestMessage , \"http://ws.cdyne.com/ip2geo/ip2geo.asmx\" ); response . println ( \"Response: \" + responseMessage . getText ()); response . flush (); response . close ();","title":"Basic Usage"},{"location":"net/soap/#functions","text":"Function Description Returns createMessage() Creates an empty SOAP Message Message parseMessage(mimeHeaders, inputStream) Creates a message by a given MIME Headers and by parsing of the provided input stream Message parseRequest() Creates a message by parsing the standard Request input and empty headers Message createMimeHeaders() Creates an empty MimeHeaders MimeHeaders call(request, url) Calls an end-point of a SOAP Web Service with a request Message and returns the response Message Message","title":"Functions"},{"location":"net/soap/#objects","text":"","title":"Objects"},{"location":"net/soap/#message","text":"Function Description Returns getMimeHeaders() Returns the MimeHeaders object of this Message MimeHeaders getPart() Returns the Part object of this Message Part save() Save the changes made on the Message and its components - getText() Returns a text representation of the Message string","title":"Message"},{"location":"net/soap/#mimeheaders","text":"Function Description Returns addHeader(name, value) Creates and add a new MIME header -","title":"MimeHeaders"},{"location":"net/soap/#part","text":"Function Description Returns getEnvelope() Returns the Envelope object of this Part Envelope","title":"Part"},{"location":"net/soap/#envelope","text":"Function Description Returns getBody() Returns the Body object of this Envelope Body getHeader() Returns the Header object of this Envelope Header addNamespaceDeclaration(prefix, uri) Creates and add a namespace attribute - createName(localName, prefix, uri) Creates a Name object to be used further Name","title":"Envelope"},{"location":"net/soap/#body","text":"Function Description Returns getChildElements() Returns an array of the child Elements [Element] addChildElement(localName, prefix) Creates and add a child Element Element","title":"Body"},{"location":"net/soap/#header","text":"Function Description Returns addHeaderElement(name) Creates and add a Header Element with a Name Element","title":"Header"},{"location":"net/soap/#name","text":"Function Description Returns getLocalName() Returns the Local Name of the Name object string getPrefix() Returns the Prefix of the Name object string getQualifiedName() Returns the Qualified Name of the Name object string getURI() Returns the URI of the Name object string","title":"Name"},{"location":"net/soap/#element","text":"Function Description Returns getChildElements() Returns an array of the child Elements [Element] getElementName() Returns the name of the Element Name getValue() Returns the value of the Element if any string addChildElement(localName, prefix) Creates and add a child Element Element addTextNode(text) Creates and add a text node Element addAttribute(name, value) Creates and add an attribute Element isSOAPElement() Returns true if the Element is SOAP Element and false otherwise (e.g. CDATA, PDATA, etc.) string","title":"Element"},{"location":"net/websocket/","text":"WebSocket WebSocket API provides access to the Session object for management of the bi-directional communication based on Websockets specification. Overview Module: net/websockets Definition: https://github.com/eclipse/dirigible/issues/391 Source: /net/websockets.js Status: stable Group: platform Basic Usage Client ECMA6 import { websockets } from \"sdk/net\" const uri = \"ws://echo.websocket.org:80/\" ; const handler = \"my-project/ws-handler\" function initialize () { console . log ( \"Connect to: \" + uri ); let websocket = websockets . createWebsocket ( uri , handler ); websocket . send ( \"hello\" ); } initialize (); websockets . getClientByHandler ( handler ). close (); Server For example: my-endpoint.websocket is using the same handler from above { \"handler\": \"my-project/ws-handler\", \"endpoint\":\"my-endpoint\", \"description\":\"My Websocket\" } then you can call from a browser: let ws = new WebSocket(\"ws://localhost:8080/websockets/v4/service/my-endpoint\"); ws.send('hello'); Functions Function Description Returns createWebsocket(uri, handler, engine) Creates a WebsocketClient by URI, handler and engine type WebsocketClient getClients() Returns the list of the created WebsocketClients list of WebsocketClient metadata getClient(id) Returns the client by its id, if exists or null otherwise WebsocketClient getClientByHandler(handler) Returns the client by its handler, if exists or null otherwise WebsocketClient getMessage() Returns the message in context of OnMessage handler string getError() Returns the error in context of OnError handler string getMethod() Returns the method type in context of the handler onopen, onmessage, onerror, onclose isOnOpen() Returns true in context of OnOpen handler boolean isOnMessage() Returns true in context of OnMessage handler boolean isOnError() Returns true in context of OnError handler boolean isOnClose() Returns true in context of OnClose handler boolean Objects WebsocketClient Function Description Returns send(message) Sends a text message via the Websocket connection - close() Closes the Websocket connection -","title":"WebSocket"},{"location":"net/websocket/#websocket","text":"WebSocket API provides access to the Session object for management of the bi-directional communication based on Websockets specification. Overview Module: net/websockets Definition: https://github.com/eclipse/dirigible/issues/391 Source: /net/websockets.js Status: stable Group: platform","title":"WebSocket"},{"location":"net/websocket/#basic-usage","text":"","title":"Basic Usage"},{"location":"net/websocket/#client","text":"ECMA6 import { websockets } from \"sdk/net\" const uri = \"ws://echo.websocket.org:80/\" ; const handler = \"my-project/ws-handler\" function initialize () { console . log ( \"Connect to: \" + uri ); let websocket = websockets . createWebsocket ( uri , handler ); websocket . send ( \"hello\" ); } initialize (); websockets . getClientByHandler ( handler ). close ();","title":"Client"},{"location":"net/websocket/#server","text":"For example: my-endpoint.websocket is using the same handler from above { \"handler\": \"my-project/ws-handler\", \"endpoint\":\"my-endpoint\", \"description\":\"My Websocket\" } then you can call from a browser: let ws = new WebSocket(\"ws://localhost:8080/websockets/v4/service/my-endpoint\"); ws.send('hello');","title":"Server"},{"location":"net/websocket/#functions","text":"Function Description Returns createWebsocket(uri, handler, engine) Creates a WebsocketClient by URI, handler and engine type WebsocketClient getClients() Returns the list of the created WebsocketClients list of WebsocketClient metadata getClient(id) Returns the client by its id, if exists or null otherwise WebsocketClient getClientByHandler(handler) Returns the client by its handler, if exists or null otherwise WebsocketClient getMessage() Returns the message in context of OnMessage handler string getError() Returns the error in context of OnError handler string getMethod() Returns the method type in context of the handler onopen, onmessage, onerror, onclose isOnOpen() Returns true in context of OnOpen handler boolean isOnMessage() Returns true in context of OnMessage handler boolean isOnError() Returns true in context of OnError handler boolean isOnClose() Returns true in context of OnClose handler boolean","title":"Functions"},{"location":"net/websocket/#objects","text":"","title":"Objects"},{"location":"net/websocket/#websocketclient","text":"Function Description Returns send(message) Sends a text message via the Websocket connection - close() Closes the Websocket connection -","title":"WebsocketClient"},{"location":"pdf/pdf/","text":"PDF API for generating a PDF files. Overview Module: pdf/pdf Alias: pdf/pdf Definition: https://github.com/eclipse/dirigible/issues/763 Source: /documents/v4/pdf.js Facade: PDFFacade Status: stable Basic Usage ECMA6 import { response } from \"sdk/http\" ; import { pdf } from \"sdk/pdf\" ; const data = { title : \"Lorem Ipsum\" , description : \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus lacinia fermentum magna, sit amet accumsan felis auctor ac.\" , columns : [{ name : \"Id\" , key : \"id\" }, { name : \"First Name\" , key : \"firstName\" , }, { name : \"Last Name\" , key : \"lastName\" }, { name : \"Age\" , key : \"age\" }], rows : [{ id : 1001 , firstName : \"John\" , lastName : \"Doe\" , age : 29 }, { id : 1002 , firstName : \"Jane\" , lastName : \"Doe\" , age : 26 }, { id : 1003 , firstName : \"Joe\" , lastName : \"Doe\" , age : 44 }, { id : 1004 , firstName : \"Jill\" , lastName : \"Doe\" , age : 40 }] }; let document = pdf . generateTable ( data ); response . setContentType ( \"application/pdf\" ); response . setHeader ( 'Content-Disposition' , 'filename=\"data.pdf\"' ); response . write ( document ); response . flush (); response . close (); Functions Function Description Returns generate(templatePath, data) Generates PDF file from a given template and data byte array generateTable(data, config) Generates PDF file with table data and config byte array Objects TableData Property Description Type title (Optional) Title of the PDF document. string description (Optional) Description of the PDF document. string columns The table columns. array of TableDataColumns rows The table data. array of TableDataRows TableDataColumns Property Description Type name The displayed column name. string key The property key in the rows object. string TableDataRows Property Description Type arbitrary-number-of-properties The row data. any highlight (Optional) Whether to highlight the row. boolean breakAfter (Optional) Whether to bold the row. boolean TableConfig Property Description Type Default size (Optional) The PDF document size. string A4 alignColumns (Optional) The column alignmnet property. start, center, end center alignRows (Optional) The rows alignmnet property. start, center, end center Sample TableConfig : let config = { size : \"A3\" , alignColumns : \"start\" alignRows : \"end\" };","title":"PDF"},{"location":"pdf/pdf/#pdf","text":"API for generating a PDF files. Overview Module: pdf/pdf Alias: pdf/pdf Definition: https://github.com/eclipse/dirigible/issues/763 Source: /documents/v4/pdf.js Facade: PDFFacade Status: stable","title":"PDF"},{"location":"pdf/pdf/#basic-usage","text":"ECMA6 import { response } from \"sdk/http\" ; import { pdf } from \"sdk/pdf\" ; const data = { title : \"Lorem Ipsum\" , description : \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus lacinia fermentum magna, sit amet accumsan felis auctor ac.\" , columns : [{ name : \"Id\" , key : \"id\" }, { name : \"First Name\" , key : \"firstName\" , }, { name : \"Last Name\" , key : \"lastName\" }, { name : \"Age\" , key : \"age\" }], rows : [{ id : 1001 , firstName : \"John\" , lastName : \"Doe\" , age : 29 }, { id : 1002 , firstName : \"Jane\" , lastName : \"Doe\" , age : 26 }, { id : 1003 , firstName : \"Joe\" , lastName : \"Doe\" , age : 44 }, { id : 1004 , firstName : \"Jill\" , lastName : \"Doe\" , age : 40 }] }; let document = pdf . generateTable ( data ); response . setContentType ( \"application/pdf\" ); response . setHeader ( 'Content-Disposition' , 'filename=\"data.pdf\"' ); response . write ( document ); response . flush (); response . close ();","title":"Basic Usage"},{"location":"pdf/pdf/#functions","text":"Function Description Returns generate(templatePath, data) Generates PDF file from a given template and data byte array generateTable(data, config) Generates PDF file with table data and config byte array","title":"Functions"},{"location":"pdf/pdf/#objects","text":"","title":"Objects"},{"location":"pdf/pdf/#tabledata","text":"Property Description Type title (Optional) Title of the PDF document. string description (Optional) Description of the PDF document. string columns The table columns. array of TableDataColumns rows The table data. array of TableDataRows","title":"TableData"},{"location":"pdf/pdf/#tabledatacolumns","text":"Property Description Type name The displayed column name. string key The property key in the rows object. string","title":"TableDataColumns"},{"location":"pdf/pdf/#tabledatarows","text":"Property Description Type arbitrary-number-of-properties The row data. any highlight (Optional) Whether to highlight the row. boolean breakAfter (Optional) Whether to bold the row. boolean","title":"TableDataRows"},{"location":"pdf/pdf/#tableconfig","text":"Property Description Type Default size (Optional) The PDF document size. string A4 alignColumns (Optional) The column alignmnet property. start, center, end center alignRows (Optional) The rows alignmnet property. start, center, end center Sample TableConfig : let config = { size : \"A3\" , alignColumns : \"start\" alignRows : \"end\" };","title":"TableConfig"},{"location":"platform/command/","text":"Command Command object is used to execute shell commands. Overview Module: platform/command Source: /platform/command.js Status: stable Group: platform Basic Usage ECMA6 import { command } from \"sdk/platform\" ; import { response } from \"sdk/http\" ; let result = command . execute ( \"echo 'hello dirigible!'\" ); response . println ( \"[Result]: \" + result ); response . flush (); response . close (); Functions Function Description Returns execute(command, add, remove) Executes the command string and returns the result from the execution or exception message. Passing an object as add parameter sets the corresponding variables. remove parameter is used to unset the variables string","title":"Command"},{"location":"platform/command/#command","text":"Command object is used to execute shell commands. Overview Module: platform/command Source: /platform/command.js Status: stable Group: platform","title":"Command"},{"location":"platform/command/#basic-usage","text":"ECMA6 import { command } from \"sdk/platform\" ; import { response } from \"sdk/http\" ; let result = command . execute ( \"echo 'hello dirigible!'\" ); response . println ( \"[Result]: \" + result ); response . flush (); response . close ();","title":"Basic Usage"},{"location":"platform/command/#functions","text":"Function Description Returns execute(command, add, remove) Executes the command string and returns the result from the execution or exception message. Passing an object as add parameter sets the corresponding variables. remove parameter is used to unset the variables string","title":"Functions"},{"location":"platform/engines/","text":"Engines Engines object is used for executing a scripting service programmatically. Overview Module: platform/engines Definition: https://github.com/eclipse/dirigible/issues/234 Source: /platform/engines.js Status: stable Group: platform Basic Usage ECMA6 import { Engine } from \"sdk/platform\" ; import { response } from \"sdk/http\" ; let result = new Engine ( \"javascript\" ). execute ( \"project1\" , \"hello.js\" , \"\" , {}); response . println ( JSON . stringify ( result )); response . flush (); response . close (); Functions Function Description Returns getEngine(type) Returns the engine object per type provided Engine getTypes() Returns the list of the registered engine types array of strings Objects Engine Function Description Returns execute(module, context) Executes a given module with a given context object executeCode(source, context) Executes a given source code with a given context object","title":"Engines"},{"location":"platform/engines/#engines","text":"Engines object is used for executing a scripting service programmatically. Overview Module: platform/engines Definition: https://github.com/eclipse/dirigible/issues/234 Source: /platform/engines.js Status: stable Group: platform","title":"Engines"},{"location":"platform/engines/#basic-usage","text":"ECMA6 import { Engine } from \"sdk/platform\" ; import { response } from \"sdk/http\" ; let result = new Engine ( \"javascript\" ). execute ( \"project1\" , \"hello.js\" , \"\" , {}); response . println ( JSON . stringify ( result )); response . flush (); response . close ();","title":"Basic Usage"},{"location":"platform/engines/#functions","text":"Function Description Returns getEngine(type) Returns the engine object per type provided Engine getTypes() Returns the list of the registered engine types array of strings","title":"Functions"},{"location":"platform/engines/#objects","text":"","title":"Objects"},{"location":"platform/engines/#engine","text":"Function Description Returns execute(module, context) Executes a given module with a given context object executeCode(source, context) Executes a given source code with a given context object","title":"Engine"},{"location":"platform/lifecycle/","text":"Lifecycle Lifecycle module provides utility functions for managing the lifecycle of the projects in the system Overview Module: platform/lifecycle Definition: https://github.com/eclipse/dirigible/issues/233 Source: /platform/lifecycle.js Status: stable Group: platform Basic Usage ECMA6 import { bytes } from \"sdk/io\" ; import { user } from \"sdk/security\" ; import { workspace , lifecycle } from \"sdk/platform\" ; import { response } from \"sdk/http\" ; const currentUser = user . getName (); const workspaceName = \"workspace\" ; const projectName = \"project\" ; let myWorkspace = workspace . createWorkspace ( workspaceName ); let myProject = myWorkspace . createProject ( projectName ); let myFile = myProject . createFile ( \"file.js\" ); myFile . setContent ( bytes . textToByteArray ( \"console.log('Hello World!');\" )); let publishResult = lifecycle . publish ( currentUser , workspaceName , projectName ); response . println ( \"publishResult: \" + publishResult ) Functions Function Description Returns publish(user, workspace, project) Publish project from the workspace, the project parameter is optional boolean unpublish(user, workspace, project) Unpublish project from the workspace, the project parameter is optional boolean","title":"Lifecycle"},{"location":"platform/lifecycle/#lifecycle","text":"Lifecycle module provides utility functions for managing the lifecycle of the projects in the system Overview Module: platform/lifecycle Definition: https://github.com/eclipse/dirigible/issues/233 Source: /platform/lifecycle.js Status: stable Group: platform","title":"Lifecycle"},{"location":"platform/lifecycle/#basic-usage","text":"ECMA6 import { bytes } from \"sdk/io\" ; import { user } from \"sdk/security\" ; import { workspace , lifecycle } from \"sdk/platform\" ; import { response } from \"sdk/http\" ; const currentUser = user . getName (); const workspaceName = \"workspace\" ; const projectName = \"project\" ; let myWorkspace = workspace . createWorkspace ( workspaceName ); let myProject = myWorkspace . createProject ( projectName ); let myFile = myProject . createFile ( \"file.js\" ); myFile . setContent ( bytes . textToByteArray ( \"console.log('Hello World!');\" )); let publishResult = lifecycle . publish ( currentUser , workspaceName , projectName ); response . println ( \"publishResult: \" + publishResult )","title":"Basic Usage"},{"location":"platform/lifecycle/#functions","text":"Function Description Returns publish(user, workspace, project) Publish project from the workspace, the project parameter is optional boolean unpublish(user, workspace, project) Unpublish project from the workspace, the project parameter is optional boolean","title":"Functions"},{"location":"platform/os/","text":"OS OS object is used to get OS details. Overview Module: platform/os Source: /platform/os.ts Status: stable Group: platform Basic Usage ECMA6 import { OS } from \"sdk/platform\" ; if ( OS . isWindows ()) { // Windows logic here } if ( OS . isUnix ()) { // Unix logic here } const osName = OS . OS_NAME ; console . log ( \"OS is: \" + osName ); Constants Constant Description Returns name The name of the current OS which corresponds to the os.name system property string Functions Function Description Returns isWindows() Check whether current OS is Windows boolean isUnix() Check whether current OS is Unix boolean","title":"OS"},{"location":"platform/os/#os","text":"OS object is used to get OS details. Overview Module: platform/os Source: /platform/os.ts Status: stable Group: platform","title":"OS"},{"location":"platform/os/#basic-usage","text":"ECMA6 import { OS } from \"sdk/platform\" ; if ( OS . isWindows ()) { // Windows logic here } if ( OS . isUnix ()) { // Unix logic here } const osName = OS . OS_NAME ; console . log ( \"OS is: \" + osName );","title":"Basic Usage"},{"location":"platform/os/#constants","text":"Constant Description Returns name The name of the current OS which corresponds to the os.name system property string","title":"Constants"},{"location":"platform/os/#functions","text":"Function Description Returns isWindows() Check whether current OS is Windows boolean isUnix() Check whether current OS is Unix boolean","title":"Functions"},{"location":"platform/problems/","text":"Problems Problems module provides utility functions for managing and logging problems/issues in the Problems perspective Overview Module: platform/problems Definition: https://github.com/eclipse/dirigible/issues/1021 Source: /platform/problems.js Status: stable Group: platform Basic Usage ECMA6 import { Problems } from \"sdk/platform\" ; import { response } from \"sdk/http\" ; problems . save ( \"/my-project/my-file\" , Problems . ACTIVE , \"line: 4\" , \"row: 10\" , \"\" , \"Some problem / at line 4\" , \"Expected end of line ;\" , \"ProblemsModule\" , \"my-file.mjs\" , \"my-file.mjs\" ); const myProblems = Problems . fetchAllProblems (); response . println ( JSON . stringify ( myProblems )); Problems . clearAllProblems (); Functions Function Description Returns save(location, type, line, column, cause, expected, category, module, source, program) Save a problem findProblem(id) Find a problem by given id string fetchAllProblems() Fetch all problems string fetchProblemsBatch(condition, limit) Fetch problems by batch string deleteProblem(id) Delete problem by given id deleteMultipleProblemsById(ids[]) Delete multiple problems by given list of ids string clearAllProblems() Clear all problems updateStatus(id, status) Update status of a problem - ACTIVE, SOLVED, IGNORED updateStatusMultiple(ids[], status) Update status of multiple problems","title":"Problems"},{"location":"platform/problems/#problems","text":"Problems module provides utility functions for managing and logging problems/issues in the Problems perspective Overview Module: platform/problems Definition: https://github.com/eclipse/dirigible/issues/1021 Source: /platform/problems.js Status: stable Group: platform","title":"Problems"},{"location":"platform/problems/#basic-usage","text":"ECMA6 import { Problems } from \"sdk/platform\" ; import { response } from \"sdk/http\" ; problems . save ( \"/my-project/my-file\" , Problems . ACTIVE , \"line: 4\" , \"row: 10\" , \"\" , \"Some problem / at line 4\" , \"Expected end of line ;\" , \"ProblemsModule\" , \"my-file.mjs\" , \"my-file.mjs\" ); const myProblems = Problems . fetchAllProblems (); response . println ( JSON . stringify ( myProblems )); Problems . clearAllProblems ();","title":"Basic Usage"},{"location":"platform/problems/#functions","text":"Function Description Returns save(location, type, line, column, cause, expected, category, module, source, program) Save a problem findProblem(id) Find a problem by given id string fetchAllProblems() Fetch all problems string fetchProblemsBatch(condition, limit) Fetch problems by batch string deleteProblem(id) Delete problem by given id deleteMultipleProblemsById(ids[]) Delete multiple problems by given list of ids string clearAllProblems() Clear all problems updateStatus(id, status) Update status of a problem - ACTIVE, SOLVED, IGNORED updateStatusMultiple(ids[], status) Update status of multiple problems","title":"Functions"},{"location":"platform/registry/","text":"Registry Registry object gives access to the content in the repository and also the pre-delivered content Overview Module: platform/registry Definition: https://github.com/eclipse/dirigible/issues/508 Source: /platform/registry.js Status: stable Group: platform Basic Usage ECMA6 import { registry } from \"sdk/platform\" ; import { response } from \"sdk/http\" ; let text = registry . getText ( \"modules/src/platform/registry.ts\" ); response . println ( text ); response . flush (); response . close (); Functions Function Description Returns getContent(path) Gets the content of resource by path, as byte array array of bytes getContentNative(path) Gets the content of resource by path, as array of Java bytes array of Java bytes getText(path) Gets the content of resource by path, as text string find(path, pattern) Find resources under certain path (e.g. /) by pattern (e.g. *.js) array of strings","title":"Registry"},{"location":"platform/registry/#registry","text":"Registry object gives access to the content in the repository and also the pre-delivered content Overview Module: platform/registry Definition: https://github.com/eclipse/dirigible/issues/508 Source: /platform/registry.js Status: stable Group: platform","title":"Registry"},{"location":"platform/registry/#basic-usage","text":"ECMA6 import { registry } from \"sdk/platform\" ; import { response } from \"sdk/http\" ; let text = registry . getText ( \"modules/src/platform/registry.ts\" ); response . println ( text ); response . flush (); response . close ();","title":"Basic Usage"},{"location":"platform/registry/#functions","text":"Function Description Returns getContent(path) Gets the content of resource by path, as byte array array of bytes getContentNative(path) Gets the content of resource by path, as array of Java bytes array of Java bytes getText(path) Gets the content of resource by path, as text string find(path, pattern) Find resources under certain path (e.g. /) by pattern (e.g. *.js) array of strings","title":"Functions"},{"location":"platform/repository-client/","text":"Repository client service The repository client service is used to communicate with the back-end API. You may also want to check out the RepositoryHub . Overview Module: platform-core Source: service-repository/repository.js Web Link: /services/web/service-repository/repository.js Status: stable Group: platform Basic Usage Include the service using the web link above. If you are making a standard Dirigible editor , the repository service is already included. Add it to your app module and controller: const exampleView = angular . module ( 'example' , [ ... 'RepositoryService' , ]); exampleView . controller ( 'ExampleViewController' , ( $scope , RepositoryService ) => {...}); Functions Function Description Returns getMetadata(resourceUrl) Return file metadata. Promise loadRepository(resourcePath) Lists the content of the repository. Promise createCollection(path, name) Creates a folder. Promise createResource(path, name) Creates a file. Promise remove(resourcePath) Remove a file/folder. Promise","title":"Repository (Client)"},{"location":"platform/repository-client/#repository-client-service","text":"The repository client service is used to communicate with the back-end API. You may also want to check out the RepositoryHub . Overview Module: platform-core Source: service-repository/repository.js Web Link: /services/web/service-repository/repository.js Status: stable Group: platform","title":"Repository client service"},{"location":"platform/repository-client/#basic-usage","text":"Include the service using the web link above. If you are making a standard Dirigible editor , the repository service is already included. Add it to your app module and controller: const exampleView = angular . module ( 'example' , [ ... 'RepositoryService' , ]); exampleView . controller ( 'ExampleViewController' , ( $scope , RepositoryService ) => {...});","title":"Basic Usage"},{"location":"platform/repository-client/#functions","text":"Function Description Returns getMetadata(resourceUrl) Return file metadata. Promise loadRepository(resourcePath) Lists the content of the repository. Promise createCollection(path, name) Creates a folder. Promise createResource(path, name) Creates a file. Promise remove(resourcePath) Remove a file/folder. Promise","title":"Functions"},{"location":"platform/repository-hub/","text":"Repository Hub The repository hub is used to send and receive events on the client, regarding workspace operations. Extends MessageHub . Overview Module: platform-core Source: service-repository/repository-hub.js Web Link: /services/web/service-repository/repository-hub.js Status: stable Group: platform Basic Usage Include the hub using the web link above. If you are making a standard Dirigible editor , the repository hub is already included. < script type = \"text/javascript\" src = \"/services/web/service-repository/repository-hub.js\" ></ script > exampleView . controller ( 'ExampleViewController' , ( $scope ) => { const repositoryHub = new RepositoryHub (); }); Functions Function Description Returns announceRepositoryModified(DataParams) Sends a message containing information on which workspace has been changed. - onWorkspaceChanged(handlerFunc) Triggered when a workspace has been changed. function Param definitions Typedefs DataParams : Object Note Params in square brackets are optional. Params : Object Param Type Description data Object.<any, any> Sends a message containing information on what has changed. Example repositoryHub . announceRepositoryModified ({ data : { folderAdded : true ; } }); const modifiedListener = repositoryHub . onFileSelected (( data ) => { if ( data . folderAdded ) console . log ( 'Folder has been added.' ); });","title":"Repository Hub"},{"location":"platform/repository-hub/#repository-hub","text":"The repository hub is used to send and receive events on the client, regarding workspace operations. Extends MessageHub . Overview Module: platform-core Source: service-repository/repository-hub.js Web Link: /services/web/service-repository/repository-hub.js Status: stable Group: platform","title":"Repository Hub"},{"location":"platform/repository-hub/#basic-usage","text":"Include the hub using the web link above. If you are making a standard Dirigible editor , the repository hub is already included. < script type = \"text/javascript\" src = \"/services/web/service-repository/repository-hub.js\" ></ script > exampleView . controller ( 'ExampleViewController' , ( $scope ) => { const repositoryHub = new RepositoryHub (); });","title":"Basic Usage"},{"location":"platform/repository-hub/#functions","text":"Function Description Returns announceRepositoryModified(DataParams) Sends a message containing information on which workspace has been changed. - onWorkspaceChanged(handlerFunc) Triggered when a workspace has been changed. function","title":"Functions"},{"location":"platform/repository-hub/#param-definitions","text":"","title":"Param definitions"},{"location":"platform/repository-hub/#typedefs","text":"DataParams : Object Note Params in square brackets are optional.","title":"Typedefs"},{"location":"platform/repository-hub/#params-object","text":"Param Type Description data Object.<any, any> Sends a message containing information on what has changed.","title":"Params : Object"},{"location":"platform/repository-hub/#example","text":"repositoryHub . announceRepositoryModified ({ data : { folderAdded : true ; } }); const modifiedListener = repositoryHub . onFileSelected (( data ) => { if ( data . folderAdded ) console . log ( 'Folder has been added.' ); });","title":"Example"},{"location":"platform/repository-server/","text":"Repository (Server) Repository object gives access to the repository. It can be used for creating artifacts such as services and web pages programmatically. Overview Module: platform/repository Definition: https://github.com/eclipse/dirigible/issues/377 Source: /platform/repository.js Status: stable Group: platform Basic Usage The service which list the available workspaces: ECMA6 import { repository } from \"sdk/platform\" ; import { response } from \"sdk/http\" ; let resource = repository . getResource ( \"/registry/public/modules/src/platform/repository.ts\" ); response . println ( \"Exists: \" + resource . exists ()); response . flush (); response . close (); Functions Function Description Returns getResource(path) Get Resource by path Resource createResource(path, content, contentType) Creates Resource programmatically Resource createResourceNative(path, content, contentType) Creates Resource programmatically, with array of Java bytes Resource updateResource(path, content) Updates Resource content Resource updateResourceNative(path, content) Updates Resource content, with array of Java bytes Resource deleteResource(path) Delete Resource by path - getCollection(path) Get Collection by path Collection createCollection(path) Creates Collection programmatically Collection deleteCollection(path) Delete Collection by path - find(path, pattern) Find resources under certain path (e.g. /) by pattern (e.g. *.js) array of strings Objects Resource Function Description Returns getName() Gets the Resource name string getPath() Gets the Resource path string getParent() Gets the Resource parent Collection Collection getInformation() Get the Resource information EntityInformation create() Create new Resource - delete() Delete the Resource - renameTo(name) Rename the Resource - moveTo(path) Moves the Resource to a new location - copyTo(path) Copy the Resource to a new location - exists() Returns true if the Resource exists boolean isEmpty() Returns true if the Resource is empty boolean getText() Returns the content of the Resource as text string getContent() Returns the content of the Resource byte array getContentNative() Returns the content of the Resource array of Java bytes setText(text) Sets the Resource content as text - setContent(content) Sets the Resource content - setContentNative(content) Sets the Resource content as array of Java bytes - isBinary() Returns true if the Resource content is binary boolean getContentType() Returns the content type of the Resource string Collection Function Description Returns getName() Gets the Collection name string getPath() Gets the Collection path string getParent() Gets the Collection parent Collection Collection getInformation() Get the Collection information EntityInformation create() Create new Collection - delete() Delete the Collection - renameTo(name) Rename the Collection - moveTo(path) Moves the Collection to a new location - copyTo(path) Copy the Collection to a new location - exists() Returns true if the Collection exists boolean isEmpty() Returns true if the Collection is empty boolean getCollectionsNames() Gets the names of the Collections in this Collection array of strings createCollection(name) Create new Collection Collection getCollection(name) Get Collection by name Collection removeCollection(name) Remove Collection by name - getResourcesNames() Gets the names of the Resources in this Collection array of strings getResource(name) Get Resource by name Resource removeResource(name) Remove Resource by name - createResource(name, content) Create new Resource Resource EntityInformation Function Description Returns getName() Gets the entity name string getPath() Gets the entity path string getPermissions() Gets the entity permissions string getSize() Gets the entity size string getCreatedBy() Gets the entity createdBy string getCreatedAt() Gets the entity createdAt string getModifiedBy() Gets the entity modifiedBy string getModifiedAt() Gets the entity modifiedAt string","title":"Repository (Server)"},{"location":"platform/repository-server/#repository-server","text":"Repository object gives access to the repository. It can be used for creating artifacts such as services and web pages programmatically. Overview Module: platform/repository Definition: https://github.com/eclipse/dirigible/issues/377 Source: /platform/repository.js Status: stable Group: platform","title":"Repository (Server)"},{"location":"platform/repository-server/#basic-usage","text":"The service which list the available workspaces: ECMA6 import { repository } from \"sdk/platform\" ; import { response } from \"sdk/http\" ; let resource = repository . getResource ( \"/registry/public/modules/src/platform/repository.ts\" ); response . println ( \"Exists: \" + resource . exists ()); response . flush (); response . close ();","title":"Basic Usage"},{"location":"platform/repository-server/#functions","text":"Function Description Returns getResource(path) Get Resource by path Resource createResource(path, content, contentType) Creates Resource programmatically Resource createResourceNative(path, content, contentType) Creates Resource programmatically, with array of Java bytes Resource updateResource(path, content) Updates Resource content Resource updateResourceNative(path, content) Updates Resource content, with array of Java bytes Resource deleteResource(path) Delete Resource by path - getCollection(path) Get Collection by path Collection createCollection(path) Creates Collection programmatically Collection deleteCollection(path) Delete Collection by path - find(path, pattern) Find resources under certain path (e.g. /) by pattern (e.g. *.js) array of strings","title":"Functions"},{"location":"platform/repository-server/#objects","text":"","title":"Objects"},{"location":"platform/repository-server/#resource","text":"Function Description Returns getName() Gets the Resource name string getPath() Gets the Resource path string getParent() Gets the Resource parent Collection Collection getInformation() Get the Resource information EntityInformation create() Create new Resource - delete() Delete the Resource - renameTo(name) Rename the Resource - moveTo(path) Moves the Resource to a new location - copyTo(path) Copy the Resource to a new location - exists() Returns true if the Resource exists boolean isEmpty() Returns true if the Resource is empty boolean getText() Returns the content of the Resource as text string getContent() Returns the content of the Resource byte array getContentNative() Returns the content of the Resource array of Java bytes setText(text) Sets the Resource content as text - setContent(content) Sets the Resource content - setContentNative(content) Sets the Resource content as array of Java bytes - isBinary() Returns true if the Resource content is binary boolean getContentType() Returns the content type of the Resource string","title":"Resource"},{"location":"platform/repository-server/#collection","text":"Function Description Returns getName() Gets the Collection name string getPath() Gets the Collection path string getParent() Gets the Collection parent Collection Collection getInformation() Get the Collection information EntityInformation create() Create new Collection - delete() Delete the Collection - renameTo(name) Rename the Collection - moveTo(path) Moves the Collection to a new location - copyTo(path) Copy the Collection to a new location - exists() Returns true if the Collection exists boolean isEmpty() Returns true if the Collection is empty boolean getCollectionsNames() Gets the names of the Collections in this Collection array of strings createCollection(name) Create new Collection Collection getCollection(name) Get Collection by name Collection removeCollection(name) Remove Collection by name - getResourcesNames() Gets the names of the Resources in this Collection array of strings getResource(name) Get Resource by name Resource removeResource(name) Remove Resource by name - createResource(name, content) Create new Resource Resource","title":"Collection"},{"location":"platform/repository-server/#entityinformation","text":"Function Description Returns getName() Gets the entity name string getPath() Gets the entity path string getPermissions() Gets the entity permissions string getSize() Gets the entity size string getCreatedBy() Gets the entity createdBy string getCreatedAt() Gets the entity createdAt string getModifiedBy() Gets the entity modifiedBy string getModifiedAt() Gets the entity modifiedAt string","title":"EntityInformation"},{"location":"platform/workspace-client/","text":"Workspace client service The workspace client service is used to communicate with the back-end API. You may also want to check out the WorkspaceHub . Overview Module: platform-core Source: service-workspace/workspace.js Web Link: /services/web/service-workspace/workspace.js Status: stable Group: platform Basic Usage Include the service using the web link above. If you are making a standard Dirigible editor , the workspace service is already included. Add it to your app module and controller: const exampleView = angular . module ( 'example' , [ ... 'WorkspaceService' , ]); exampleView . controller ( 'ExampleViewController' , ( $scope , WorkspaceService ) => {...}); Functions Function Description Returns setWorkspace(workspace) Saves the workspace name in localStorage . - getCurrentWorkspace() Returns the currently selected workspace. - listWorkspaceNames() Lists all available workspaces. Promise list(resourcePath) List the contents of a path. Promise resourceExists(resourcePath) Checkes if a resource exists. Promise loadContent(resourcePath) Loades file content. Promise saveContent(resourcePath) Saves content to a file. Promise getMetadataByUrl(resourcePath) Get metadata, from a full URL path. Promise getMetadata(resourcePath) Gets metadata, from a full resource path. Promise rename(oldName, newName, resourcePath) Renames a file/folder. Promise remove(resourcePath) Deletes a file/folder. Promise copy(sourcePath, targetPath) Copies a file/folder. Promise move(sourcePath, targetPath) Moves a file/folder. Promise createFile(name, targetPath, content) Creates a new file. Promise createFolder(name, targetPath) Creates a new folder. Promise createWorkspace(workspace) Creates a new workspace. Promise deleteWorkspace(workspace) Deletes a workspace. Promise createProject(workspace, projectName) Creates a project inside a workspace. Promise deleteProject(workspace, projectName) Deletes a project inside a workspace. Promise search(searchPath, searchTerm) Performs a search. Promise getFullURL(resourcePath) Creates a direct web path to a resource. Promise Param definitions Param Type Description resourcePath string Full resource path, including workspace name. oldName string Old name of the resource. newName string New name of the resource. sourcePath string Array. targetPath string Full target path, including workspace name. name string File/folder name. content string File content. workspace string Workspace name. projectName string Project name. searchPath string Full path, including the workspace name. searchTerm string File content to search for. Note Params in square brackets are optional. Example let selectedWorkspace = WorkspaceService . getCurrentWorkspace (); console . log ( selectedWorkspace ); WorkspaceService . list ( '/workspace/new-project' ). then (( response ) => { console . log ( response . data . folders ); console . log ( response . data . files ); }, ( error ) => { console . error ( error ); }); WorkspaceService . copy ( [ '/workspace/new-project/file1.js' , '/workspace/new-project/file2.js' ], '/workspace/old-project' ). then (( response ) => { for ( let r = 0 ; r < response . data . length ; r ++ ) { console . log ( `Moved ${ response . data [ r ]. from } to ${ response . data [ r ]. to } ` ); } }, ( error ) => { console . error ( error ); });","title":"Workspace (Client)"},{"location":"platform/workspace-client/#workspace-client-service","text":"The workspace client service is used to communicate with the back-end API. You may also want to check out the WorkspaceHub . Overview Module: platform-core Source: service-workspace/workspace.js Web Link: /services/web/service-workspace/workspace.js Status: stable Group: platform","title":"Workspace client service"},{"location":"platform/workspace-client/#basic-usage","text":"Include the service using the web link above. If you are making a standard Dirigible editor , the workspace service is already included. Add it to your app module and controller: const exampleView = angular . module ( 'example' , [ ... 'WorkspaceService' , ]); exampleView . controller ( 'ExampleViewController' , ( $scope , WorkspaceService ) => {...});","title":"Basic Usage"},{"location":"platform/workspace-client/#functions","text":"Function Description Returns setWorkspace(workspace) Saves the workspace name in localStorage . - getCurrentWorkspace() Returns the currently selected workspace. - listWorkspaceNames() Lists all available workspaces. Promise list(resourcePath) List the contents of a path. Promise resourceExists(resourcePath) Checkes if a resource exists. Promise loadContent(resourcePath) Loades file content. Promise saveContent(resourcePath) Saves content to a file. Promise getMetadataByUrl(resourcePath) Get metadata, from a full URL path. Promise getMetadata(resourcePath) Gets metadata, from a full resource path. Promise rename(oldName, newName, resourcePath) Renames a file/folder. Promise remove(resourcePath) Deletes a file/folder. Promise copy(sourcePath, targetPath) Copies a file/folder. Promise move(sourcePath, targetPath) Moves a file/folder. Promise createFile(name, targetPath, content) Creates a new file. Promise createFolder(name, targetPath) Creates a new folder. Promise createWorkspace(workspace) Creates a new workspace. Promise deleteWorkspace(workspace) Deletes a workspace. Promise createProject(workspace, projectName) Creates a project inside a workspace. Promise deleteProject(workspace, projectName) Deletes a project inside a workspace. Promise search(searchPath, searchTerm) Performs a search. Promise getFullURL(resourcePath) Creates a direct web path to a resource. Promise","title":"Functions"},{"location":"platform/workspace-client/#param-definitions","text":"Param Type Description resourcePath string Full resource path, including workspace name. oldName string Old name of the resource. newName string New name of the resource. sourcePath string Array. targetPath string Full target path, including workspace name. name string File/folder name. content string File content. workspace string Workspace name. projectName string Project name. searchPath string Full path, including the workspace name. searchTerm string File content to search for. Note Params in square brackets are optional.","title":"Param definitions"},{"location":"platform/workspace-client/#example","text":"let selectedWorkspace = WorkspaceService . getCurrentWorkspace (); console . log ( selectedWorkspace ); WorkspaceService . list ( '/workspace/new-project' ). then (( response ) => { console . log ( response . data . folders ); console . log ( response . data . files ); }, ( error ) => { console . error ( error ); }); WorkspaceService . copy ( [ '/workspace/new-project/file1.js' , '/workspace/new-project/file2.js' ], '/workspace/old-project' ). then (( response ) => { for ( let r = 0 ; r < response . data . length ; r ++ ) { console . log ( `Moved ${ response . data [ r ]. from } to ${ response . data [ r ]. to } ` ); } }, ( error ) => { console . error ( error ); });","title":"Example"},{"location":"platform/workspace-hub/","text":"Workspace Hub The workspace hub is used to send and receive events on the client, regarding workspace operations. Extends MessageHub . Overview Module: platform-core Source: service-workspace/workspace-hub.js Web Link: /services/web/service-workspace/workspace-hub.js Status: stable Group: platform Basic Usage Include the hub using the web link above. If you are making a standard Dirigible editor , the workspace hub is already included. < script type = \"text/javascript\" src = \"/services/web/service-workspace/workspace-hub.js\" ></ script > exampleView . controller ( 'ExampleViewController' , ( $scope ) => { const workspaceHub = new WorkspaceHub (); }); Functions Function Description Returns announceWorkspaceChanged(WorkspaceExtraParams) Sends a message containing information on which workspace has been changed. - onWorkspaceChanged(handlerFunc) Triggered when a workspace has been changed. function announceFileSaved(FileSavedParams) Sends a message containing information on which file has been saved. - onFileSaved(handlerFunc) Triggered when a file has been saved. function saveFile(FileSavedParams) Sends a message containing information on which file should be saved. - onSaveFile(handlerFunc) Triggered when a file has to be saved. function saveFile(PathParams) Sends a message containing information on which file should be saved. - onSaveFile(handlerFunc) Triggered when a file has to be saved. function saveAll() Tells all open editors to save their content. - onSaveAll(handlerFunc) Triggered when all files should be saved. function announcePublished(PathParams) Sends a message containing information on which file, folder or project has been published. - onPublished(handlerFunc) Triggered when a file, folder or project has been published. function announceUnpublished(PathParams) Sends a message containing information on which file, folder or project has been unpublished. - onUnpublished(handlerFunc) Triggered when a file, folder or project has been unpublished. function announceFileSelected(FileSelectedParams) Sends a message containing information on which file has been selected. - onFileSelected(handlerFunc) Triggered when a file has been deleted. function announceFileDeleted(PathParams) Sends a message containing information on which file has been deleted. - onFileDeleted(handlerFunc) Triggered when a file has been deleted. function announceFileRenamed(RenamedParams) Sends a message containing information on which file has been renamed. - onFileRenamed(handlerFunc) Triggered when a file has been renamed. function announceFileMoved(MovedParams) Sends a message containing information on which file has been moved. - onFileMoved(handlerFunc) Triggered when a file has been moved. function announceFolderDeleted(PathParams) Sends a message containing information on which folder has been deleted. - onFolderDeleted(handlerFunc) Triggered when a folder has been deleted. function announceFolderRenamed(RenamedParams) Sends a message containing information on which folder has been renamed. - onFolderRenamed(handlerFunc) Triggered when a folder has been renamed. function announceFolderMoved(MovedParams) Sends a message containing information on which folder has been moved. - onFolderMoved(handlerFunc) Triggered when a file has been moved. function announceProjectDeleted(ProjectParams) Sends a message containing information on which project has been deleted. - onProjectDeleted(handlerFunc) Triggered when a project has been deleted. function announceWorkspaceCreated(WorkspaceParams) Sends a message containing information on which workspace has been created. - onWorkspaceCreated(handlerFunc) Triggered when a workspace has been created. function announceWorkspaceModified(WorkspaceParams) Sends a message containing information on which workspace has been modified. - onWorkspaceModified(handlerFunc) Triggered when a workspace has been modified. function announceWorkspaceDeleted(WorkspaceParams) Sends a message containing information on which workspace has been deleted. - onWorkspaceDeleted(handlerFunc) Triggered when a workspace has been created. function Param definitions Typedefs WorkspaceExtraParams : Object PathParams : Object FileSavedParams : Object FileSelectedParams : Object RenamedParams : Object MovedParams : Object ProjectParams : Object WorkspaceParams : Object Note Params in square brackets are optional. WorkspaceExtraParams : Object Param Type Description workspace string Name of the changed workspace. params Object.<any, any> Any extra parameters. PathParams : Object Param Type Description path string Full file path, including file name. [params] Object.<any, any> Extra parameters. FileSavedParams : Object Param Type Description path string Full file path, including file name. [status] string Git status of the file. [contentType] string File content type. FileSelectedParams : Object Param Type Description path string Full file path, including file name. contentType string The file content type. [params] Object.<any, any> Extra parameters that will be passed the listener. RenamedParams : Object Param Type Description oldPath string Old file path, including file name. newPath string New file path, including file name. contentType string The file content type. MovedParams : Object Param Type Description oldPath string Old file path, including file name. newPath string New file path, including file name. ProjectParams : Object Param Type Description project string Project name. workspace string Workspace name. WorkspaceParams : Object Param Type Description workspace string Workspace name. Example workspaceHub . announceFileSelected ({ path : '/workspace/project/folder/file.js' , contentType : 'text/javascript' , }); const selectedListener = workspaceHub . onFileSelected (( data ) => { console . log ( data . name ); console . log ( data . path ); console . log ( data . contentType ?? '' ); });","title":"Workspace Hub"},{"location":"platform/workspace-hub/#workspace-hub","text":"The workspace hub is used to send and receive events on the client, regarding workspace operations. Extends MessageHub . Overview Module: platform-core Source: service-workspace/workspace-hub.js Web Link: /services/web/service-workspace/workspace-hub.js Status: stable Group: platform","title":"Workspace Hub"},{"location":"platform/workspace-hub/#basic-usage","text":"Include the hub using the web link above. If you are making a standard Dirigible editor , the workspace hub is already included. < script type = \"text/javascript\" src = \"/services/web/service-workspace/workspace-hub.js\" ></ script > exampleView . controller ( 'ExampleViewController' , ( $scope ) => { const workspaceHub = new WorkspaceHub (); });","title":"Basic Usage"},{"location":"platform/workspace-hub/#functions","text":"Function Description Returns announceWorkspaceChanged(WorkspaceExtraParams) Sends a message containing information on which workspace has been changed. - onWorkspaceChanged(handlerFunc) Triggered when a workspace has been changed. function announceFileSaved(FileSavedParams) Sends a message containing information on which file has been saved. - onFileSaved(handlerFunc) Triggered when a file has been saved. function saveFile(FileSavedParams) Sends a message containing information on which file should be saved. - onSaveFile(handlerFunc) Triggered when a file has to be saved. function saveFile(PathParams) Sends a message containing information on which file should be saved. - onSaveFile(handlerFunc) Triggered when a file has to be saved. function saveAll() Tells all open editors to save their content. - onSaveAll(handlerFunc) Triggered when all files should be saved. function announcePublished(PathParams) Sends a message containing information on which file, folder or project has been published. - onPublished(handlerFunc) Triggered when a file, folder or project has been published. function announceUnpublished(PathParams) Sends a message containing information on which file, folder or project has been unpublished. - onUnpublished(handlerFunc) Triggered when a file, folder or project has been unpublished. function announceFileSelected(FileSelectedParams) Sends a message containing information on which file has been selected. - onFileSelected(handlerFunc) Triggered when a file has been deleted. function announceFileDeleted(PathParams) Sends a message containing information on which file has been deleted. - onFileDeleted(handlerFunc) Triggered when a file has been deleted. function announceFileRenamed(RenamedParams) Sends a message containing information on which file has been renamed. - onFileRenamed(handlerFunc) Triggered when a file has been renamed. function announceFileMoved(MovedParams) Sends a message containing information on which file has been moved. - onFileMoved(handlerFunc) Triggered when a file has been moved. function announceFolderDeleted(PathParams) Sends a message containing information on which folder has been deleted. - onFolderDeleted(handlerFunc) Triggered when a folder has been deleted. function announceFolderRenamed(RenamedParams) Sends a message containing information on which folder has been renamed. - onFolderRenamed(handlerFunc) Triggered when a folder has been renamed. function announceFolderMoved(MovedParams) Sends a message containing information on which folder has been moved. - onFolderMoved(handlerFunc) Triggered when a file has been moved. function announceProjectDeleted(ProjectParams) Sends a message containing information on which project has been deleted. - onProjectDeleted(handlerFunc) Triggered when a project has been deleted. function announceWorkspaceCreated(WorkspaceParams) Sends a message containing information on which workspace has been created. - onWorkspaceCreated(handlerFunc) Triggered when a workspace has been created. function announceWorkspaceModified(WorkspaceParams) Sends a message containing information on which workspace has been modified. - onWorkspaceModified(handlerFunc) Triggered when a workspace has been modified. function announceWorkspaceDeleted(WorkspaceParams) Sends a message containing information on which workspace has been deleted. - onWorkspaceDeleted(handlerFunc) Triggered when a workspace has been created. function","title":"Functions"},{"location":"platform/workspace-hub/#param-definitions","text":"","title":"Param definitions"},{"location":"platform/workspace-hub/#typedefs","text":"WorkspaceExtraParams : Object PathParams : Object FileSavedParams : Object FileSelectedParams : Object RenamedParams : Object MovedParams : Object ProjectParams : Object WorkspaceParams : Object Note Params in square brackets are optional.","title":"Typedefs"},{"location":"platform/workspace-hub/#workspaceextraparams-object","text":"Param Type Description workspace string Name of the changed workspace. params Object.<any, any> Any extra parameters.","title":"WorkspaceExtraParams : Object"},{"location":"platform/workspace-hub/#pathparams-object","text":"Param Type Description path string Full file path, including file name. [params] Object.<any, any> Extra parameters.","title":"PathParams : Object"},{"location":"platform/workspace-hub/#filesavedparams-object","text":"Param Type Description path string Full file path, including file name. [status] string Git status of the file. [contentType] string File content type.","title":"FileSavedParams : Object"},{"location":"platform/workspace-hub/#fileselectedparams-object","text":"Param Type Description path string Full file path, including file name. contentType string The file content type. [params] Object.<any, any> Extra parameters that will be passed the listener.","title":"FileSelectedParams : Object"},{"location":"platform/workspace-hub/#renamedparams-object","text":"Param Type Description oldPath string Old file path, including file name. newPath string New file path, including file name. contentType string The file content type.","title":"RenamedParams : Object"},{"location":"platform/workspace-hub/#movedparams-object","text":"Param Type Description oldPath string Old file path, including file name. newPath string New file path, including file name.","title":"MovedParams : Object"},{"location":"platform/workspace-hub/#projectparams-object","text":"Param Type Description project string Project name. workspace string Workspace name.","title":"ProjectParams : Object"},{"location":"platform/workspace-hub/#workspaceparams-object","text":"Param Type Description workspace string Workspace name.","title":"WorkspaceParams : Object"},{"location":"platform/workspace-hub/#example","text":"workspaceHub . announceFileSelected ({ path : '/workspace/project/folder/file.js' , contentType : 'text/javascript' , }); const selectedListener = workspaceHub . onFileSelected (( data ) => { console . log ( data . name ); console . log ( data . path ); console . log ( data . contentType ?? '' ); });","title":"Example"},{"location":"platform/workspace-server/","text":"Workspace Workspace object gives access to the user's workspaces. It can be used for creating artifacts such as services and web pages programmatically. Overview Module: platform/workspace Definition: https://github.com/eclipse/dirigible/issues/230 Source: /platform/workspace.js Status: stable Group: platform Basic Usage The service which lists the available workspaces: ECMA6 import { workspace } from \"sdk/platform\" ; import { response } from \"sdk/http\" ; let workspacesNames = workspace . getWorkspacesNames (); response . println ( \"Workspaces: \" + workspacesNames ); response . flush (); response . close (); Functions Function Description Returns createWorkspace(name) Creates a new Workspace programmatically Workspace getWorkspace(name) Gets the Workspace by name programmatically Workspace getWorkspacesNames() List the names of the available workspaces programmatically array of string deleteWorkspace(name) Deletes the Workspace by name programmatically - Objects Workspace Function Description Returns getProjects() List the names of the available workspaces programmatically Projects createProject(name) Creates a new Project programmatically Project getProject(name) Gets the Project by name programmatically Project deleteProject(name) Deletes the Project by name programmatically - exists() Check whether this Workspace object does exist programmatically boolean existsFolder(path) Check whether a Folder by given path exists in this Workspace programmatically boolean existsFile(path) Check whether a File by given path exists in this Workspace programmatically boolean copyProject(source, target) Copies a given Project programmatically - moveProject(source, target) Copies a given Project programmatically - Projects Function Description Returns size() Returns the size of this Projects list programmatically integer get(index) Gets a Project by index programmatically Project Project Function Description Returns getName() Returns the name of the Project programmatically string getPath() Returns the path of the Project programmatically string exists() Check whether this Project object does exist programmatically boolean createFolder(path) Creates a new Folder by name programmatically Folder existsFolder(path) Check whether a Folder by given path exists in this Project programmatically boolean getFolder(path) Gets a Folder by path programmatically Folder getFolders(path) Gets all the Folders under the path programmatically Folders deletesFolder(path) Deletes a Folder by path programmatically - createFile(path) Creates a new File by name programmatically File existsFile(path) Check whether a File by given path exists in this Project programmatically boolean getFile(path) Gets a File by path programmatically File getFiles(path) Gets all the Files under the path programmatically Files deletesFile(path) Deletes a File by path programmatically - Folders Function Description Returns size() Returns the size of this Folders list programmatically integer get(index) Gets a Folder by index programmatically Folder Files Function Description Returns size() Returns the size of this Files list programmatically integer get(index) Gets a File by index programmatically File Folder Function Description Returns getName() Returns the name of the Folder programmatically string getPath() Returns the path of the Folder programmatically string exists() Check whether this Folder object does exist programmatically boolean createFolder(path) Creates a new Folder by name programmatically Folder existsFolder(path) Check whether a Folder by given path exists in this Folder programmatically boolean getFolder(path) Gets a Folder by path programmatically Folder getFolders(path) Gets all the Folders under the path programmatically Folders deletesFolder(path) Deletes a Folder by path programmatically - createFile(path) Creates a new File by name programmatically File existsFile(path) Check whether a File by given path exists in this Folder programmatically boolean getFile(path) Gets a File by path programmatically File getFiles(path) Gets all the Files under the path programmatically Files deletesFile(path) Deletes a File by path programmatically - File Function Description Returns getName() Returns the name of the File programmatically string getPath() Returns the path of the File programmatically string exists() Check whether this File object does exist programmatically boolean getContentType() Returns the Content Type of the File programmatically string isBinary() Returns the Binary flag of the File programmatically boolean getContent() Returns the Content of the File programmatically bytes setContent(input) Sets the Content of the File programmatically by the given bytes input - getText() Returns the Content of the File programmatically string setText(input) Sets the Content of the File programmatically by the given string input -","title":"Workspace (Server)"},{"location":"platform/workspace-server/#workspace","text":"Workspace object gives access to the user's workspaces. It can be used for creating artifacts such as services and web pages programmatically. Overview Module: platform/workspace Definition: https://github.com/eclipse/dirigible/issues/230 Source: /platform/workspace.js Status: stable Group: platform","title":"Workspace"},{"location":"platform/workspace-server/#basic-usage","text":"The service which lists the available workspaces: ECMA6 import { workspace } from \"sdk/platform\" ; import { response } from \"sdk/http\" ; let workspacesNames = workspace . getWorkspacesNames (); response . println ( \"Workspaces: \" + workspacesNames ); response . flush (); response . close ();","title":"Basic Usage"},{"location":"platform/workspace-server/#functions","text":"Function Description Returns createWorkspace(name) Creates a new Workspace programmatically Workspace getWorkspace(name) Gets the Workspace by name programmatically Workspace getWorkspacesNames() List the names of the available workspaces programmatically array of string deleteWorkspace(name) Deletes the Workspace by name programmatically -","title":"Functions"},{"location":"platform/workspace-server/#objects","text":"","title":"Objects"},{"location":"platform/workspace-server/#workspace_1","text":"Function Description Returns getProjects() List the names of the available workspaces programmatically Projects createProject(name) Creates a new Project programmatically Project getProject(name) Gets the Project by name programmatically Project deleteProject(name) Deletes the Project by name programmatically - exists() Check whether this Workspace object does exist programmatically boolean existsFolder(path) Check whether a Folder by given path exists in this Workspace programmatically boolean existsFile(path) Check whether a File by given path exists in this Workspace programmatically boolean copyProject(source, target) Copies a given Project programmatically - moveProject(source, target) Copies a given Project programmatically -","title":"Workspace"},{"location":"platform/workspace-server/#projects","text":"Function Description Returns size() Returns the size of this Projects list programmatically integer get(index) Gets a Project by index programmatically Project","title":"Projects"},{"location":"platform/workspace-server/#project","text":"Function Description Returns getName() Returns the name of the Project programmatically string getPath() Returns the path of the Project programmatically string exists() Check whether this Project object does exist programmatically boolean createFolder(path) Creates a new Folder by name programmatically Folder existsFolder(path) Check whether a Folder by given path exists in this Project programmatically boolean getFolder(path) Gets a Folder by path programmatically Folder getFolders(path) Gets all the Folders under the path programmatically Folders deletesFolder(path) Deletes a Folder by path programmatically - createFile(path) Creates a new File by name programmatically File existsFile(path) Check whether a File by given path exists in this Project programmatically boolean getFile(path) Gets a File by path programmatically File getFiles(path) Gets all the Files under the path programmatically Files deletesFile(path) Deletes a File by path programmatically -","title":"Project"},{"location":"platform/workspace-server/#folders","text":"Function Description Returns size() Returns the size of this Folders list programmatically integer get(index) Gets a Folder by index programmatically Folder","title":"Folders"},{"location":"platform/workspace-server/#files","text":"Function Description Returns size() Returns the size of this Files list programmatically integer get(index) Gets a File by index programmatically File","title":"Files"},{"location":"platform/workspace-server/#folder","text":"Function Description Returns getName() Returns the name of the Folder programmatically string getPath() Returns the path of the Folder programmatically string exists() Check whether this Folder object does exist programmatically boolean createFolder(path) Creates a new Folder by name programmatically Folder existsFolder(path) Check whether a Folder by given path exists in this Folder programmatically boolean getFolder(path) Gets a Folder by path programmatically Folder getFolders(path) Gets all the Folders under the path programmatically Folders deletesFolder(path) Deletes a Folder by path programmatically - createFile(path) Creates a new File by name programmatically File existsFile(path) Check whether a File by given path exists in this Folder programmatically boolean getFile(path) Gets a File by path programmatically File getFiles(path) Gets all the Files under the path programmatically Files deletesFile(path) Deletes a File by path programmatically -","title":"Folder"},{"location":"platform/workspace-server/#file","text":"Function Description Returns getName() Returns the name of the File programmatically string getPath() Returns the path of the File programmatically string exists() Check whether this File object does exist programmatically boolean getContentType() Returns the Content Type of the File programmatically string isBinary() Returns the Binary flag of the File programmatically boolean getContent() Returns the Content of the File programmatically bytes setContent(input) Sets the Content of the File programmatically by the given bytes input - getText() Returns the Content of the File programmatically string setText(input) Sets the Content of the File programmatically by the given string input -","title":"File"},{"location":"qldb/qldb/","text":"QLDB Repository The QLDB Repository is giving an access to a qldb - Amazon's fully managed ledger database. Overview Module: qldb/qldbrepository Facade: QLDBRepository Status: beta Group: ext Basic Usage Activate QLDB in your AWS dashboard and create a Ledger Create ~/.aws/credentials with the following: [default] aws_access_key_id = your_access_key_id aws_secret_access_key = your_secret_access_key region = your_region ECMA6 //first we need to create a table import { QLDBRepository } from \"sdk/qldb\" ; const qldb = new QLDBRepository ( \"myLedger\" , \"testTable\" ). createTable (); //use the newly created object to interact with qldb import { QLDBRepository } from \"sdk/qldb\" ; const qldb = new QLDBRepository ( \"myLedger\" , \"testTable\" ); qldb . insert ({ \"foo\" : \"bar\" }) console . log ( qldb . getAll ()) Functions Function Description Returns QLDBRepository(String ledger, String tableName) Constructs a repository with given ledger and table. Notice: If the table does not exist you must call .createTable() object QLDBRepository Function Description Returns createTable() Creates the repository table. - dropTable() Drops the repository table. Notice: Dropping tables in QLDB inactivates them. You can undo that with an UNDROP statement in PartiQL - insert(entry: object) Inserts the entry in the repository. On success returns the inserted entry object update(entry: object) Updates the entry in the repository. On success returns the updated entry. Notice: The entry must contain a documentId property object getById(documentId: string) Returns the repository entry with given documentId object getAll() Returns all the repository entries object[] delete(documentId: string) Deletes the entry by given documentId.documentId. On success returns the documentId of the deleted object. object delete(entry: object) Deletes the entry. On success returns the documentId of the deleted object. Notice: The entry must contain a documentId property. string getHistory(key, value) Returns the entire history of transactions of the repository object[] getLedgerName(key, index) Returns the ledger name the repository is working against string getTableName(key) Returns the table name the repository is working against string","title":"QLDB Repository"},{"location":"qldb/qldb/#qldb-repository","text":"The QLDB Repository is giving an access to a qldb - Amazon's fully managed ledger database. Overview Module: qldb/qldbrepository Facade: QLDBRepository Status: beta Group: ext","title":"QLDB Repository"},{"location":"qldb/qldb/#basic-usage","text":"Activate QLDB in your AWS dashboard and create a Ledger Create ~/.aws/credentials with the following: [default] aws_access_key_id = your_access_key_id aws_secret_access_key = your_secret_access_key region = your_region ECMA6 //first we need to create a table import { QLDBRepository } from \"sdk/qldb\" ; const qldb = new QLDBRepository ( \"myLedger\" , \"testTable\" ). createTable (); //use the newly created object to interact with qldb import { QLDBRepository } from \"sdk/qldb\" ; const qldb = new QLDBRepository ( \"myLedger\" , \"testTable\" ); qldb . insert ({ \"foo\" : \"bar\" }) console . log ( qldb . getAll ())","title":"Basic Usage"},{"location":"qldb/qldb/#functions","text":"Function Description Returns QLDBRepository(String ledger, String tableName) Constructs a repository with given ledger and table. Notice: If the table does not exist you must call .createTable() object","title":"Functions"},{"location":"qldb/qldb/#qldbrepository","text":"Function Description Returns createTable() Creates the repository table. - dropTable() Drops the repository table. Notice: Dropping tables in QLDB inactivates them. You can undo that with an UNDROP statement in PartiQL - insert(entry: object) Inserts the entry in the repository. On success returns the inserted entry object update(entry: object) Updates the entry in the repository. On success returns the updated entry. Notice: The entry must contain a documentId property object getById(documentId: string) Returns the repository entry with given documentId object getAll() Returns all the repository entries object[] delete(documentId: string) Deletes the entry by given documentId.documentId. On success returns the documentId of the deleted object. object delete(entry: object) Deletes the entry. On success returns the documentId of the deleted object. Notice: The entry must contain a documentId property. string getHistory(key, value) Returns the entire history of transactions of the repository object[] getLedgerName(key, index) Returns the ledger name the repository is working against string getTableName(key) Returns the table name the repository is working against string","title":"QLDBRepository"},{"location":"qunit/qunit/","text":"QUnit QUnit object is used in unit tests. Overview Module: qunit/qunit Definition: N/A Source: /qunit/qunit.js Status: stable Group: platform Basic Usage ECMA6 import { qunit , runner } from \"sdk/qunit\" qunit . module ( 'Module 1:' ); qunit . test ( \"Test 1\" , function ( assert ) { assert . ok ( true , 'Passing assertion' ); assert . ok ( false , 'Failing assertion' ); }); runner . run (); Functions Function Description Returns module(name) Register a module by name string test(title, group) Register a group of tests string","title":"QUnit"},{"location":"qunit/qunit/#qunit","text":"QUnit object is used in unit tests. Overview Module: qunit/qunit Definition: N/A Source: /qunit/qunit.js Status: stable Group: platform","title":"QUnit"},{"location":"qunit/qunit/#basic-usage","text":"ECMA6 import { qunit , runner } from \"sdk/qunit\" qunit . module ( 'Module 1:' ); qunit . test ( \"Test 1\" , function ( assert ) { assert . ok ( true , 'Passing assertion' ); assert . ok ( false , 'Failing assertion' ); }); runner . run ();","title":"Basic Usage"},{"location":"qunit/qunit/#functions","text":"Function Description Returns module(name) Register a module by name string test(title, group) Register a group of tests string","title":"Functions"},{"location":"rabbitmq/consumer/","text":"RabbitMQ Consumer The RabbitMQ is listening on a Queue destination to a RabbitMQ messaging server. Overview Module: rabbitmq/consumer Alias: rabbitmq/consumer Definition: https://github.com/eclipse/dirigible/issues/722 Source: /rabbitmq/consumer.js Status: beta Group: ext Getting Started You will need RabbitMQ installed on your machine. You can find all relevant information in the official documentation below: Debian/Ubuntu MacOS/Homebrew Windows Basic Usage Start listening on a queue ECMA6 import { consumer } from \"sdk/rabbitmq\" ; consumer . startListening ( \"rabbitmq-queue\" , \"<rabbitmq-project>/<rabbitmq-handler>\" ); File: <rabbitmq-project>/<rabbitmq-handler> exports . onMessage = function ( message ) { console . log ( \"Hello from My RabbitMQ Listener! Message: \" + message ); }; exports . onError = function ( error ) { console . error ( \"Error from My RabbitMQ Listener! Error: \" + error ); }; Stop listening on a queue ECMA6 import { consumer } from \"sdk/rabbitmq\" ; consumer . stopListening ( \"rabbitmq-queue\" , \"<rabbitmq-project>/<rabbitmq-handler>\" ); Functions Function Description Returns startListening(queue, handler) Start listening on a given queue and destination - stopListening(queue, handler) Stops listening for new messages -","title":"RabbitMQ Consumer"},{"location":"rabbitmq/consumer/#rabbitmq-consumer","text":"The RabbitMQ is listening on a Queue destination to a RabbitMQ messaging server. Overview Module: rabbitmq/consumer Alias: rabbitmq/consumer Definition: https://github.com/eclipse/dirigible/issues/722 Source: /rabbitmq/consumer.js Status: beta Group: ext","title":"RabbitMQ Consumer"},{"location":"rabbitmq/consumer/#getting-started","text":"You will need RabbitMQ installed on your machine. You can find all relevant information in the official documentation below: Debian/Ubuntu MacOS/Homebrew Windows","title":"Getting Started"},{"location":"rabbitmq/consumer/#basic-usage","text":"","title":"Basic Usage"},{"location":"rabbitmq/consumer/#start-listening-on-a-queue","text":"ECMA6 import { consumer } from \"sdk/rabbitmq\" ; consumer . startListening ( \"rabbitmq-queue\" , \"<rabbitmq-project>/<rabbitmq-handler>\" ); File: <rabbitmq-project>/<rabbitmq-handler> exports . onMessage = function ( message ) { console . log ( \"Hello from My RabbitMQ Listener! Message: \" + message ); }; exports . onError = function ( error ) { console . error ( \"Error from My RabbitMQ Listener! Error: \" + error ); };","title":"Start listening on a queue"},{"location":"rabbitmq/consumer/#stop-listening-on-a-queue","text":"ECMA6 import { consumer } from \"sdk/rabbitmq\" ; consumer . stopListening ( \"rabbitmq-queue\" , \"<rabbitmq-project>/<rabbitmq-handler>\" );","title":"Stop listening on a queue"},{"location":"rabbitmq/consumer/#functions","text":"Function Description Returns startListening(queue, handler) Start listening on a given queue and destination - stopListening(queue, handler) Stops listening for new messages -","title":"Functions"},{"location":"rabbitmq/producer/","text":"RabbitMQ Producer The RabbitMQ Producer is sending message records to a Queue destination to a RabbitMQ messaging server. Overview Module: rabbitmq/producer Alias: rabbitmq/producer Definition: https://github.com/eclipse/dirigible/issues/722 Source: /rabbitmq/producer.js Status: beta Group: ext Basic Usage Send record to a given topic ECMA6 import { producer } from \"sdk/rabbitmq\" ; producer . send ( \"rabbitmq-queue\" , \"My RabbitMQ message\" ); Functions Function Description Returns send(queue, value) Send a message record by a queue and value to a RabbitMQ Queue -","title":"RabbitMQ Producer"},{"location":"rabbitmq/producer/#rabbitmq-producer","text":"The RabbitMQ Producer is sending message records to a Queue destination to a RabbitMQ messaging server. Overview Module: rabbitmq/producer Alias: rabbitmq/producer Definition: https://github.com/eclipse/dirigible/issues/722 Source: /rabbitmq/producer.js Status: beta Group: ext","title":"RabbitMQ Producer"},{"location":"rabbitmq/producer/#basic-usage","text":"Send record to a given topic ECMA6 import { producer } from \"sdk/rabbitmq\" ; producer . send ( \"rabbitmq-queue\" , \"My RabbitMQ message\" );","title":"Basic Usage"},{"location":"rabbitmq/producer/#functions","text":"Function Description Returns send(queue, value) Send a message record by a queue and value to a RabbitMQ Queue -","title":"Functions"},{"location":"redis/client/","text":"Redis Client The Redis Client is giving an access to a redis in-memory data store. Overview Module: redis/client Definition: https://github.com/eclipse/dirigible/issues/723 Source: /redis/client.js Facade: RedisFacade Status: beta Group: ext Basic Usage ECMA6 import { client } from \"sdk/redis\" ; import { response } from \"sdk/http\" ; const redisClient = client . getClient (); redisClient . set ( \"foo\" , \"bar\" ); const data = redisClient . get ( \"foo\" ); response . println ( data ); Functions Function Description Returns getClient() Returns an object representing a Redis Client Client Objects Client Function Description Returns append(key, value) Append a string to the value of a key - bitcount(key) Count the number of set bits in a string string decr(key) Decrements the integer value of a key by one. Uses 0 as initial value if the key doesn't exist. - del(key) Deletes one or more keys - exists(key) Determine whether one or more keys exist boolean get(key) Returns the string value of a key string incr(key) Increments the integer value of a key by one. Uses 0 as initial value if the key doesn't exist - keys(pattern) Returns all key names that match a pattern string set(key, value) Sets the string value of a key, ignoring its type. The key is created if it doesn't exist - lindex(key, index) Returns an element from a list by its index string llen(key) Returns the length of a list integer lpop(key) Removes and returns the first elements of the list stored at key - lpush(key) Prepends one or more elements to a list. Creates the key if it doesn't exist - lrange(key) Returns a range of elements from a list integer rpop(key) Returns and removes the last elements of a list. Deletes the list if the 1st elements was popped string rpush(key) Appends one or more elements to a list. Create the key if it doesn't exist -","title":"Client"},{"location":"redis/client/#redis-client","text":"The Redis Client is giving an access to a redis in-memory data store. Overview Module: redis/client Definition: https://github.com/eclipse/dirigible/issues/723 Source: /redis/client.js Facade: RedisFacade Status: beta Group: ext","title":"Redis Client"},{"location":"redis/client/#basic-usage","text":"ECMA6 import { client } from \"sdk/redis\" ; import { response } from \"sdk/http\" ; const redisClient = client . getClient (); redisClient . set ( \"foo\" , \"bar\" ); const data = redisClient . get ( \"foo\" ); response . println ( data );","title":"Basic Usage"},{"location":"redis/client/#functions","text":"Function Description Returns getClient() Returns an object representing a Redis Client Client","title":"Functions"},{"location":"redis/client/#objects","text":"","title":"Objects"},{"location":"redis/client/#client","text":"Function Description Returns append(key, value) Append a string to the value of a key - bitcount(key) Count the number of set bits in a string string decr(key) Decrements the integer value of a key by one. Uses 0 as initial value if the key doesn't exist. - del(key) Deletes one or more keys - exists(key) Determine whether one or more keys exist boolean get(key) Returns the string value of a key string incr(key) Increments the integer value of a key by one. Uses 0 as initial value if the key doesn't exist - keys(pattern) Returns all key names that match a pattern string set(key, value) Sets the string value of a key, ignoring its type. The key is created if it doesn't exist - lindex(key, index) Returns an element from a list by its index string llen(key) Returns the length of a list integer lpop(key) Removes and returns the first elements of the list stored at key - lpush(key) Prepends one or more elements to a list. Creates the key if it doesn't exist - lrange(key) Returns a range of elements from a list integer rpop(key) Returns and removes the last elements of a list. Deletes the list if the 1st elements was popped string rpush(key) Appends one or more elements to a list. Create the key if it doesn't exist -","title":"Client"},{"location":"security/user/","text":"User User gives the information about the currently logged in user, if any. Overview Module: security/user Definition: https://github.com/eclipse/dirigible/issues/17 Source: /security/user.js Status: stable Group: core Basic Usage ECMA6 import { user } from \"sdk/security\" ; import { response } from \"sdk/http\" ; response . println ( \"[UserName]: \" + user . getName ()); response . println ( \"[Is in Role]: \" + user . isInRole ( \"Developer\" )); response . flush (); response . close (); Functions Function Description Returns getName() Returns the name of the currently logged in user, if any or null string isInRole(role) Returns true if the user has a given role and false otherwise boolean","title":"User"},{"location":"security/user/#user","text":"User gives the information about the currently logged in user, if any. Overview Module: security/user Definition: https://github.com/eclipse/dirigible/issues/17 Source: /security/user.js Status: stable Group: core","title":"User"},{"location":"security/user/#basic-usage","text":"ECMA6 import { user } from \"sdk/security\" ; import { response } from \"sdk/http\" ; response . println ( \"[UserName]: \" + user . getName ()); response . println ( \"[Is in Role]: \" + user . isInRole ( \"Developer\" )); response . flush (); response . close ();","title":"Basic Usage"},{"location":"security/user/#functions","text":"Function Description Returns getName() Returns the name of the currently logged in user, if any or null string isInRole(role) Returns true if the user has a given role and false otherwise boolean","title":"Functions"},{"location":"template/engines/","text":"Template Engines Template Engines group creates instances for Velocity, Mustache and JavaScript template engines. Overview Module: template/engines Definition: N/A Source: /template/engines.js Status: stable Group: platform Basic Usage ECMA6 import { engines } from \"sdk/template\" import { response } from \"sdk/http\" ; let mustache = engines . getMustacheEngine (); let generated = mustache . generate ( 'Hello {{name}}' , [[ 'name' , 'John Smith' ]]); response . println ( generated ); response . flush (); response . close (); Functions Function Description Returns getDefaultEngine() Creates a default template engine (Velocity) TemplateEngine getVelocityEngine() Creates the Velocity template engine TemplateEngine getMustacheEngine() Creates the Mustache template engine TemplateEngine getJavascriptEngine() Creates the Javascript template engine TemplateEngine generate(template, parameters) Generate content using the provided template and the default engine and parameters provided string generateFromFile(location, parameters) Generate content using the template from location and the default engine and parameters provided string Objects TemplateEngine Function Description Returns generate(template, parameters) Generate content using the provided template with parameters string setSm(sm) Set start markup for parameters - setEm(em) Set end markup for parameters -","title":"Template Engines"},{"location":"template/engines/#template-engines","text":"Template Engines group creates instances for Velocity, Mustache and JavaScript template engines. Overview Module: template/engines Definition: N/A Source: /template/engines.js Status: stable Group: platform","title":"Template Engines"},{"location":"template/engines/#basic-usage","text":"ECMA6 import { engines } from \"sdk/template\" import { response } from \"sdk/http\" ; let mustache = engines . getMustacheEngine (); let generated = mustache . generate ( 'Hello {{name}}' , [[ 'name' , 'John Smith' ]]); response . println ( generated ); response . flush (); response . close ();","title":"Basic Usage"},{"location":"template/engines/#functions","text":"Function Description Returns getDefaultEngine() Creates a default template engine (Velocity) TemplateEngine getVelocityEngine() Creates the Velocity template engine TemplateEngine getMustacheEngine() Creates the Mustache template engine TemplateEngine getJavascriptEngine() Creates the Javascript template engine TemplateEngine generate(template, parameters) Generate content using the provided template and the default engine and parameters provided string generateFromFile(location, parameters) Generate content using the template from location and the default engine and parameters provided string","title":"Functions"},{"location":"template/engines/#objects","text":"","title":"Objects"},{"location":"template/engines/#templateengine","text":"Function Description Returns generate(template, parameters) Generate content using the provided template with parameters string setSm(sm) Set start markup for parameters - setEm(em) Set end markup for parameters -","title":"TemplateEngine"},{"location":"test/assert/","text":"Assert Assert object is used in unit tests. Overview Module: test/assert Definition: N/A Source: /test/assert.js Status: stable Group: core Basic Usage ECMA6 import { base64 } from \"sdk/utils\" ; import { assert } from \"sdk/test\" ; const input = \"test\" const result = base64 . encode ( input ); assert . assertEquals ( result , 'dGVzdA==' , \"check if match\" ); Functions Function Description Returns assertTrue(condition, message) Assert as true - assertFalse(condition, message) Assert as false - assertNull(object, message) Assert if object is null - assertNotNull(object, message) Assert if object is not null - assertEquals(actual, expected, message) Assert if actual object is the same as the expected one -","title":"Assert"},{"location":"test/assert/#assert","text":"Assert object is used in unit tests. Overview Module: test/assert Definition: N/A Source: /test/assert.js Status: stable Group: core","title":"Assert"},{"location":"test/assert/#basic-usage","text":"ECMA6 import { base64 } from \"sdk/utils\" ; import { assert } from \"sdk/test\" ; const input = \"test\" const result = base64 . encode ( input ); assert . assertEquals ( result , 'dGVzdA==' , \"check if match\" );","title":"Basic Usage"},{"location":"test/assert/#functions","text":"Function Description Returns assertTrue(condition, message) Assert as true - assertFalse(condition, message) Assert as false - assertNull(object, message) Assert if object is null - assertNotNull(object, message) Assert if object is not null - assertEquals(actual, expected, message) Assert if actual object is the same as the expected one -","title":"Functions"},{"location":"test/runner/","text":"Runner Runner object is used execute a tests suite and generate report. Overview Module: test/runner Definition: https://github.com/eclipse/dirigible/issues/122 Source: /test/runner.js Status: stable Group: core Basic Usage Not for direct use, see: https://www.dirigible.io/api/qunit/qunit/ Functions Function Description Returns run(settings) Run a tests suite string","title":"Runner"},{"location":"test/runner/#runner","text":"Runner object is used execute a tests suite and generate report. Overview Module: test/runner Definition: https://github.com/eclipse/dirigible/issues/122 Source: /test/runner.js Status: stable Group: core","title":"Runner"},{"location":"test/runner/#basic-usage","text":"Not for direct use, see: https://www.dirigible.io/api/qunit/qunit/","title":"Basic Usage"},{"location":"test/runner/#functions","text":"Function Description Returns run(settings) Run a tests suite string","title":"Functions"},{"location":"user-interface/","text":"Platform UI Overview Eclipse Dirigible is built using the BlimpKit UI library, AngularJS and its own layout based on split.js There are a few main components that are used when creating UI applications using Dirigible. Extension Points & Extensions MessageHub Shell Perspective View Subview Window Menu ContextMenuHub LayoutHub ShellHub NotificationHub StatusBarHub ThemingHub Shortcuts ViewParameters","title":"Platform UI"},{"location":"user-interface/#platform-ui-overview","text":"Eclipse Dirigible is built using the BlimpKit UI library, AngularJS and its own layout based on split.js There are a few main components that are used when creating UI applications using Dirigible. Extension Points & Extensions MessageHub Shell Perspective View Subview Window Menu ContextMenuHub LayoutHub ShellHub NotificationHub StatusBarHub ThemingHub Shortcuts ViewParameters","title":"Platform UI Overview"},{"location":"user-interface/branding/","text":"Branding Dirigible allows you to change the branding of the platform. You will have to replace the default platform-branding module with your own. Overview Module: platform-branding Source: platform-branding/branding.js Web Link: /services/web/platform-branding/branding.js Status: stable Group: platform Basic Usage The branding object: const brandingInfo = { name : 'Dirigible' , brand : 'Eclipse Dirigible' , brandUrl : 'https://www.dirigible.io/' , icons : { faviconIco : '/services/web/platform-branding/images/favicon.ico' , favicon32 : '/services/web/platform-branding/images/favicon-32x32.png' , favicon16 : '/services/web/platform-branding/images/favicon-16x16.png' , }, logo : '/services/web/platform-branding/images/dirigible.svg' , keyPrefix : 'dirigible' }; brandingInfo - This is the configuration object itself. It must be a const and it must always be called \"brandingInfo\". name - Brand name that will be used for titles. brand - Brand name that will be used for the the shellbar. brandUrl - URL to the brand/product that will be used in the about information. icons - FavIcons faviconIco - FavIcon in .ico format favicon32 - FavIcon in .png format in 32x32px size. favicon16 - FavIcon in .png format in 16x16px size. logo - Link to the brand logo. keyPrefix - When saving data to the local storage (opened tabs, layout configuration, etc.), this prefix will be used.","title":"Branding"},{"location":"user-interface/branding/#branding","text":"Dirigible allows you to change the branding of the platform. You will have to replace the default platform-branding module with your own. Overview Module: platform-branding Source: platform-branding/branding.js Web Link: /services/web/platform-branding/branding.js Status: stable Group: platform","title":"Branding"},{"location":"user-interface/branding/#basic-usage","text":"The branding object: const brandingInfo = { name : 'Dirigible' , brand : 'Eclipse Dirigible' , brandUrl : 'https://www.dirigible.io/' , icons : { faviconIco : '/services/web/platform-branding/images/favicon.ico' , favicon32 : '/services/web/platform-branding/images/favicon-32x32.png' , favicon16 : '/services/web/platform-branding/images/favicon-16x16.png' , }, logo : '/services/web/platform-branding/images/dirigible.svg' , keyPrefix : 'dirigible' }; brandingInfo - This is the configuration object itself. It must be a const and it must always be called \"brandingInfo\". name - Brand name that will be used for titles. brand - Brand name that will be used for the the shellbar. brandUrl - URL to the brand/product that will be used in the about information. icons - FavIcons faviconIco - FavIcon in .ico format favicon32 - FavIcon in .png format in 32x32px size. favicon16 - FavIcon in .png format in 16x16px size. logo - Link to the brand logo. keyPrefix - When saving data to the local storage (opened tabs, layout configuration, etc.), this prefix will be used.","title":"Basic Usage"},{"location":"user-interface/context-menu/","text":"Context menu Controls the global context menu. Extends MessageHub . Overview Module: platform-core Source: platform-core/ui/platform/contextmenu-hub.js Web Link: /services/web/platform-core/ui/platform/contextmenu-hub.js Status: stable Group: platform Basic Usage If you are using the standard Dirigible view configuration, context menu support is automatically enabled. If the view is expected to work outside the platform, then you must include platformContextMenu in your view: const exampleView = angular . module ( 'exampleView' , [ 'blimpKit' , 'platformView' , 'platformContextMenu' ]); If you are making a custom view, you can include the API using the web link above. To initialize it: const contextMenuHub = new ContextMenuHub (); < body > < context-menu ></ context-menu > </ body > Note Use the context-menu tag only if the view is expected to work outside Dirigible. You can capture all right-click events, on a perticular element, using the ng-on-contextmenu directive: < div ng-on-contextmenu = \"showContextMenu($event)\" ></ div > $scope . showContextMenu = ( event ) => { event . preventDefault (); // Prevent default context menu contextMenuHub . showContextMenu ({ ariaLabel : 'example contextmenu' , posX : event . clientX , posY : event . clientY , icons : true , items : [ { id : 'item1' , label : 'Item 1' , iconClass : 'sap-icon--information' , separator : true }, { id : 'item2' , label : 'Item 2' , iconPath : '/path/to/image.svg' , items : [ { id : 'item3' , label : 'Item 3' , iconClass : 'sap-icon--information' , disabled : true }, { id : 'item4' , label : 'Item 4' , iconClass : 'sap-icon--information' , disabled : false } ] }, ] }). then (( id ) => { if ( id ) console . log ( `You selected context menu item with id ' ${ id } '` ); }); }; Functions Function Description Returns showContextMenu(MenuObject) Opens a global menu. Promise onContextMenu(handlerFunc) Registers a listener. Triggered when a context menu should be shown. Returns a function to unregister the listener. function Typedefs MenuItem : Object MenuSublist : Object MenuObject : Object Note Params in square brackets are optional. MenuItem : Object Menu item parameter. Properties Name Type Description id string Id of the item. label string Label for the item. [leftIconClass] string CSS icon class. Icon will be shown before the label. [rightIconClass] string CSS icon class. Icon will be shown after the label. [leftIconPath] string Icon url path. Icon will be shown before the label. [rightIconPath] string Icon url path. Icon will be shown after the label. [shortcut] string Secondary text. Most often used as a shotcut hint. [separator] boolean Set a menu item separator after this item. [disabled] boolean Disable the menu item. MenuSublist : Object Menu sublist parameter. Properties Name Type Description id string Id of the sublist. label string Label for the sublist. [separator] boolean Set a menu item separator after this item. [iconClass] string CSS icon class. Icon will be shown before the label. [iconPath] string Icon url path. Icon will be shown before the label. items Array.<(MenuItem|MenuSublist)> List of menu items and/or sublists. [disabled] boolean Disable the sublist. MenuObject : Object Main menu parameter. Properties Param Type Default Description ariaLabel string Accessibility text. posX number The position of the cursor at the X axis. posY number The position of the cursor at the Y axis. [icons] boolean false If the contextmenu items have icons. items Array.<(MenuItem|MenuSublist)> List of menu items and/or sublists. Example For a full example you can look at sample-platform .","title":"Context menu"},{"location":"user-interface/context-menu/#context-menu","text":"Controls the global context menu. Extends MessageHub . Overview Module: platform-core Source: platform-core/ui/platform/contextmenu-hub.js Web Link: /services/web/platform-core/ui/platform/contextmenu-hub.js Status: stable Group: platform","title":"Context menu"},{"location":"user-interface/context-menu/#basic-usage","text":"If you are using the standard Dirigible view configuration, context menu support is automatically enabled. If the view is expected to work outside the platform, then you must include platformContextMenu in your view: const exampleView = angular . module ( 'exampleView' , [ 'blimpKit' , 'platformView' , 'platformContextMenu' ]); If you are making a custom view, you can include the API using the web link above. To initialize it: const contextMenuHub = new ContextMenuHub (); < body > < context-menu ></ context-menu > </ body > Note Use the context-menu tag only if the view is expected to work outside Dirigible. You can capture all right-click events, on a perticular element, using the ng-on-contextmenu directive: < div ng-on-contextmenu = \"showContextMenu($event)\" ></ div > $scope . showContextMenu = ( event ) => { event . preventDefault (); // Prevent default context menu contextMenuHub . showContextMenu ({ ariaLabel : 'example contextmenu' , posX : event . clientX , posY : event . clientY , icons : true , items : [ { id : 'item1' , label : 'Item 1' , iconClass : 'sap-icon--information' , separator : true }, { id : 'item2' , label : 'Item 2' , iconPath : '/path/to/image.svg' , items : [ { id : 'item3' , label : 'Item 3' , iconClass : 'sap-icon--information' , disabled : true }, { id : 'item4' , label : 'Item 4' , iconClass : 'sap-icon--information' , disabled : false } ] }, ] }). then (( id ) => { if ( id ) console . log ( `You selected context menu item with id ' ${ id } '` ); }); };","title":"Basic Usage"},{"location":"user-interface/context-menu/#functions","text":"Function Description Returns showContextMenu(MenuObject) Opens a global menu. Promise onContextMenu(handlerFunc) Registers a listener. Triggered when a context menu should be shown. Returns a function to unregister the listener. function","title":"Functions"},{"location":"user-interface/context-menu/#typedefs","text":"MenuItem : Object MenuSublist : Object MenuObject : Object Note Params in square brackets are optional.","title":"Typedefs"},{"location":"user-interface/context-menu/#menuitem-object","text":"Menu item parameter. Properties Name Type Description id string Id of the item. label string Label for the item. [leftIconClass] string CSS icon class. Icon will be shown before the label. [rightIconClass] string CSS icon class. Icon will be shown after the label. [leftIconPath] string Icon url path. Icon will be shown before the label. [rightIconPath] string Icon url path. Icon will be shown after the label. [shortcut] string Secondary text. Most often used as a shotcut hint. [separator] boolean Set a menu item separator after this item. [disabled] boolean Disable the menu item.","title":"MenuItem : Object"},{"location":"user-interface/context-menu/#menusublist-object","text":"Menu sublist parameter. Properties Name Type Description id string Id of the sublist. label string Label for the sublist. [separator] boolean Set a menu item separator after this item. [iconClass] string CSS icon class. Icon will be shown before the label. [iconPath] string Icon url path. Icon will be shown before the label. items Array.<(MenuItem|MenuSublist)> List of menu items and/or sublists. [disabled] boolean Disable the sublist.","title":"MenuSublist : Object"},{"location":"user-interface/context-menu/#menuobject-object","text":"Main menu parameter. Properties Param Type Default Description ariaLabel string Accessibility text. posX number The position of the cursor at the X axis. posY number The position of the cursor at the Y axis. [icons] boolean false If the contextmenu items have icons. items Array.<(MenuItem|MenuSublist)> List of menu items and/or sublists.","title":"MenuObject : Object"},{"location":"user-interface/context-menu/#example","text":"For a full example you can look at sample-platform .","title":"Example"},{"location":"user-interface/dialog/","text":"Dialog Controls system dialogs. Extends MessageHub . Overview Module: platform-core Source: platform-core/ui/platform/dialog-hub.js Web Link: /services/web/platform-core/ui/platform/dialog-hub.js Status: stable Group: platform Basic Usage If you are using the standard Dirigible view configuration, dialog support is automatically enabled. If the view is expected to work outside the platform, then you must include platformDialogs in your view: const exampleView = angular . module ( 'exampleView' , [ 'blimpKit' , 'platformView' , 'platformDialogs' ]); If you are making a custom view, you can include the API using the web link above. To initialize it: const dialogHub = new DialogHub (); < body > < dialogs ></ dialogs > </ body > Note Use the dialogs tag only if the view is expected to work outside Dirigible. Functions Function Description Returns showAlert(AlertObject) Opens an alert dialog. Promise onAlert(handlerFunc) Registers a listener. Triggered when an alert dialog should be shown. Returns a function to unregister the listener. function showDialog(DialogObject) Opens a dialog. Promise onDialog(handlerFunc) Registers a listener. Triggered when a dialog should be shown. Returns a function to unregister the listener. function showBusyDialog(message) Opens a dialog. - onBusyDialog(handlerFunc) Registers a listener. Triggered when a busy dialog should be shown. Returns a function to unregister the listener. function closeBusyDialog() Closes the current busy dialog. - showFormDialog(FormObject) Opens a form dialog. Promise onFormDialog(handlerFunc) Registers a listener. Triggered when a form dialog should be shown. Returns a function to unregister the listener. function showWindow(WindowObject) Opens a dialog window. Promise onWindow(handlerFunc) Registers a listener. Triggered when a dialog window should be shown. Returns a function to unregister the listener. function Typedefs AlertObject : Object DialogObject : Object FormItem : Object FormObject : Object WindowObject : Object Note Params in square brackets are optional. AlertTypes : Object Properties Param Type Description Confirmation string Confirmation type. Error string Error type. Success string Success type. Warning string Warning type. Information string Information type. AlertObject : Object Properties Param Type Description title string The title for the alert. message string The message that will be displayed inside the alert. [type] string The type of the alert. See 'AlertTypes'. [preformatted] boolean Newline formatting of the message. If set to true, text will be displayed as-is without formatting it. Defaults to false. [buttons] Array.<Object> List of objects, describing a button. The object must contain an 'id', 'label' and optionally 'state' (See ButtonStates). DialogObject : Object Properties Param Type Default Description [header] string The header of the dialog. title string The title for the dialog. [subheader] string The subheader of the dialog. message string The message that will be displayed inside the dialog. [preformatted] boolean Newline formatting of the message. If set to true, text will be displayed as-is without formatting it. Defaults to false. [buttons] Array.<Object> List of objects, describing a button. The object must contain an 'id', 'label' and optionally 'state' (See ButtonStates). [closeButton] boolean true Should the dialog have a close button in the title bar. Defaults to true. FormItem : Object A form item can describe several types of form inputs. Some properties are common for all and some are type specific. Properties Name Type Default Description controlType 'input' | 'textarea' | 'checkbox' | 'radio' | 'dropdown' Type of input. Common property. label string Label for the input. Common property. [value] string | number | object Value of the input. Common property. type 'text' | 'password' | 'number' | 'date' | 'color' | 'email' | 'tel' | 'time' | 'url' | 'datetime-local' Type for the input. Specific to the 'input' control type. [placeholder] string Placeholder text for the 'input', 'textarea' and 'dropdown' control types. [required] boolean Sets the input as required. Common for all control types except 'checkbox'. [disabled] boolean Sets the input as disabled. Common for all control types. On 'radio', it disables all options. [focus] boolean Sets the input as focus, once the dialog appears. Common for all control types except 'checkbox', 'radio' and 'dropdown'. [maxlength] number Maximum character length for the input. Common for the 'input' and 'textarea' control types. [minlength] number Minimum character length for the input. Common for the 'input' and 'textarea' control types. [max] number | string Maximum value for the input. Only for the 'input' control of the 'number', 'date', 'time' and 'datetime-local' types. [min] number | string Minimum value for the input. Only for the 'input' control of the 'number', 'date', 'time' and 'datetime-local' types. [rows] number 3 Number of rows. Only for the 'input' control of the 'textarea'. [step] number Value step for the input. Only for the 'input' control of the 'number' type. [inputRules] Object Validation rules for the input. The 'excluded' array can contain strings that the input should not match. The 'patterns' array can contain regex expressions for validating the input. Common for the 'input' and 'textarea' control types. [submitOnEnter] boolean If the user hits the enter key, while this input is focused, the form will get submitted. Valid only for the 'input' control type. options Array.<{label: string, value: (string|number)}> Options for the control type 'dropdown'. [errorMsg] string The error hint that will be displayed, when the selected value is invalid. Common for all control types except 'checkbox' and 'radio'. [enabledOn] Object Enables a control based on the state of another control. The 'key' property is the id of the target control. The 'value' is the value of the target control. If you only provide the key, it will get enabled when the target control has any valid value. If you also provide the value, it will get enabled when the target control's value matches. [disabledOn] Object Same as 'enabledOn' but with an opposite effect. [visibleOn] Object Same as 'enabledOn' but instead of disabling/enabling the control, it will show/hide it. [hiddenOn] Object Same as 'visibleOn' but with an opposite effect. FormObject : Object Properties Param Type Description [header] string The header of the dialog. title string The title for the dialog. [subheader] string The subheader of the dialog. form Object.<string, FormItem> Object containing form item definitions. The key for each definition is used as id. [submitLabel] string Label for the submit button. [cancelLabel] string Label for the cancel button. [width] string Custom width for the window. This maps to the CSS width propery. [height] string Custom height for the window. This maps to the CSS height propery. [maxWidth] string Custom max width for the window. This maps to the CSS max-width propery. [maxHeight] string Custom max height for the window. This maps to the CSS max-height propery. [minWidth] string Custom min width for the window. This maps to the CSS min-width propery. [minHeight] string Custom min height for the window. This maps to the CSS min-height propery. WindowObject : Object Properties Param Type Default Description [hasHeader] boolean true If the dialog should have a header. [header] string The header of the dialog. [title] string The title for the window. Use this only when providing a custom path, instead of widnow id. [subheader] string The subheader of the dialog. [id] string ID of the view that should be opened inside the dialog window. Alternatevly, you can use 'path' instead and provide a direct URL. [path] string When showing a custom view, you can provide a direct URL. [params] Object Parameters that will be provided as a 'data-parameters' attribute that the view can read. [width] string \"95%\" Custom width for the window. This maps to the CSS width propery. [heigh] string \"90%\" Custom height for the window. This maps to the CSS height propery. [maxWidth] string \"1280px\" Custom max width for the window. This maps to the CSS max-width propery. [maxHeight] string \"768px\" Custom max height for the window. This maps to the CSS max-height propery. [minWidth] string Custom min width for the window. This maps to the CSS min-width propery. [minHeight] string Custom min height for the window. This maps to the CSS min-height propery. [callbackTopic] string Callback topic for when the window has been closed. [closeButton] boolean true Should the dialog have a close button in the title bar. Example dialogHub . showFormDialog ({ title : \"What's your nickname?\" , form : { 'nick' : { label : 'Nickname' , controlType : 'input' , type : 'text' , placeholder : 'Current nickname' , submitOnEnter : true , focus : true , required : true }, }, submitLabel : 'Submit' , cancelLabel : 'Cancel' }). then (( form ) => { if ( form ) { console . log ( form [ 'nick' ]); } }); For a full example you can look at sample-platform .","title":"Dialog"},{"location":"user-interface/dialog/#dialog","text":"Controls system dialogs. Extends MessageHub . Overview Module: platform-core Source: platform-core/ui/platform/dialog-hub.js Web Link: /services/web/platform-core/ui/platform/dialog-hub.js Status: stable Group: platform","title":"Dialog"},{"location":"user-interface/dialog/#basic-usage","text":"If you are using the standard Dirigible view configuration, dialog support is automatically enabled. If the view is expected to work outside the platform, then you must include platformDialogs in your view: const exampleView = angular . module ( 'exampleView' , [ 'blimpKit' , 'platformView' , 'platformDialogs' ]); If you are making a custom view, you can include the API using the web link above. To initialize it: const dialogHub = new DialogHub (); < body > < dialogs ></ dialogs > </ body > Note Use the dialogs tag only if the view is expected to work outside Dirigible.","title":"Basic Usage"},{"location":"user-interface/dialog/#functions","text":"Function Description Returns showAlert(AlertObject) Opens an alert dialog. Promise onAlert(handlerFunc) Registers a listener. Triggered when an alert dialog should be shown. Returns a function to unregister the listener. function showDialog(DialogObject) Opens a dialog. Promise onDialog(handlerFunc) Registers a listener. Triggered when a dialog should be shown. Returns a function to unregister the listener. function showBusyDialog(message) Opens a dialog. - onBusyDialog(handlerFunc) Registers a listener. Triggered when a busy dialog should be shown. Returns a function to unregister the listener. function closeBusyDialog() Closes the current busy dialog. - showFormDialog(FormObject) Opens a form dialog. Promise onFormDialog(handlerFunc) Registers a listener. Triggered when a form dialog should be shown. Returns a function to unregister the listener. function showWindow(WindowObject) Opens a dialog window. Promise onWindow(handlerFunc) Registers a listener. Triggered when a dialog window should be shown. Returns a function to unregister the listener. function","title":"Functions"},{"location":"user-interface/dialog/#typedefs","text":"AlertObject : Object DialogObject : Object FormItem : Object FormObject : Object WindowObject : Object Note Params in square brackets are optional.","title":"Typedefs"},{"location":"user-interface/dialog/#alerttypes-object","text":"Properties Param Type Description Confirmation string Confirmation type. Error string Error type. Success string Success type. Warning string Warning type. Information string Information type.","title":"AlertTypes : Object"},{"location":"user-interface/dialog/#alertobject-object","text":"Properties Param Type Description title string The title for the alert. message string The message that will be displayed inside the alert. [type] string The type of the alert. See 'AlertTypes'. [preformatted] boolean Newline formatting of the message. If set to true, text will be displayed as-is without formatting it. Defaults to false. [buttons] Array.<Object> List of objects, describing a button. The object must contain an 'id', 'label' and optionally 'state' (See ButtonStates).","title":"AlertObject : Object"},{"location":"user-interface/dialog/#dialogobject-object","text":"Properties Param Type Default Description [header] string The header of the dialog. title string The title for the dialog. [subheader] string The subheader of the dialog. message string The message that will be displayed inside the dialog. [preformatted] boolean Newline formatting of the message. If set to true, text will be displayed as-is without formatting it. Defaults to false. [buttons] Array.<Object> List of objects, describing a button. The object must contain an 'id', 'label' and optionally 'state' (See ButtonStates). [closeButton] boolean true Should the dialog have a close button in the title bar. Defaults to true.","title":"DialogObject : Object"},{"location":"user-interface/dialog/#formitem-object","text":"A form item can describe several types of form inputs. Some properties are common for all and some are type specific. Properties Name Type Default Description controlType 'input' | 'textarea' | 'checkbox' | 'radio' | 'dropdown' Type of input. Common property. label string Label for the input. Common property. [value] string | number | object Value of the input. Common property. type 'text' | 'password' | 'number' | 'date' | 'color' | 'email' | 'tel' | 'time' | 'url' | 'datetime-local' Type for the input. Specific to the 'input' control type. [placeholder] string Placeholder text for the 'input', 'textarea' and 'dropdown' control types. [required] boolean Sets the input as required. Common for all control types except 'checkbox'. [disabled] boolean Sets the input as disabled. Common for all control types. On 'radio', it disables all options. [focus] boolean Sets the input as focus, once the dialog appears. Common for all control types except 'checkbox', 'radio' and 'dropdown'. [maxlength] number Maximum character length for the input. Common for the 'input' and 'textarea' control types. [minlength] number Minimum character length for the input. Common for the 'input' and 'textarea' control types. [max] number | string Maximum value for the input. Only for the 'input' control of the 'number', 'date', 'time' and 'datetime-local' types. [min] number | string Minimum value for the input. Only for the 'input' control of the 'number', 'date', 'time' and 'datetime-local' types. [rows] number 3 Number of rows. Only for the 'input' control of the 'textarea'. [step] number Value step for the input. Only for the 'input' control of the 'number' type. [inputRules] Object Validation rules for the input. The 'excluded' array can contain strings that the input should not match. The 'patterns' array can contain regex expressions for validating the input. Common for the 'input' and 'textarea' control types. [submitOnEnter] boolean If the user hits the enter key, while this input is focused, the form will get submitted. Valid only for the 'input' control type. options Array.<{label: string, value: (string|number)}> Options for the control type 'dropdown'. [errorMsg] string The error hint that will be displayed, when the selected value is invalid. Common for all control types except 'checkbox' and 'radio'. [enabledOn] Object Enables a control based on the state of another control. The 'key' property is the id of the target control. The 'value' is the value of the target control. If you only provide the key, it will get enabled when the target control has any valid value. If you also provide the value, it will get enabled when the target control's value matches. [disabledOn] Object Same as 'enabledOn' but with an opposite effect. [visibleOn] Object Same as 'enabledOn' but instead of disabling/enabling the control, it will show/hide it. [hiddenOn] Object Same as 'visibleOn' but with an opposite effect.","title":"FormItem : Object"},{"location":"user-interface/dialog/#formobject-object","text":"Properties Param Type Description [header] string The header of the dialog. title string The title for the dialog. [subheader] string The subheader of the dialog. form Object.<string, FormItem> Object containing form item definitions. The key for each definition is used as id. [submitLabel] string Label for the submit button. [cancelLabel] string Label for the cancel button. [width] string Custom width for the window. This maps to the CSS width propery. [height] string Custom height for the window. This maps to the CSS height propery. [maxWidth] string Custom max width for the window. This maps to the CSS max-width propery. [maxHeight] string Custom max height for the window. This maps to the CSS max-height propery. [minWidth] string Custom min width for the window. This maps to the CSS min-width propery. [minHeight] string Custom min height for the window. This maps to the CSS min-height propery.","title":"FormObject : Object"},{"location":"user-interface/dialog/#windowobject-object","text":"Properties Param Type Default Description [hasHeader] boolean true If the dialog should have a header. [header] string The header of the dialog. [title] string The title for the window. Use this only when providing a custom path, instead of widnow id. [subheader] string The subheader of the dialog. [id] string ID of the view that should be opened inside the dialog window. Alternatevly, you can use 'path' instead and provide a direct URL. [path] string When showing a custom view, you can provide a direct URL. [params] Object Parameters that will be provided as a 'data-parameters' attribute that the view can read. [width] string \"95%\" Custom width for the window. This maps to the CSS width propery. [heigh] string \"90%\" Custom height for the window. This maps to the CSS height propery. [maxWidth] string \"1280px\" Custom max width for the window. This maps to the CSS max-width propery. [maxHeight] string \"768px\" Custom max height for the window. This maps to the CSS max-height propery. [minWidth] string Custom min width for the window. This maps to the CSS min-width propery. [minHeight] string Custom min height for the window. This maps to the CSS min-height propery. [callbackTopic] string Callback topic for when the window has been closed. [closeButton] boolean true Should the dialog have a close button in the title bar.","title":"WindowObject : Object"},{"location":"user-interface/dialog/#example","text":"dialogHub . showFormDialog ({ title : \"What's your nickname?\" , form : { 'nick' : { label : 'Nickname' , controlType : 'input' , type : 'text' , placeholder : 'Current nickname' , submitOnEnter : true , focus : true , required : true }, }, submitLabel : 'Submit' , cancelLabel : 'Cancel' }). then (( form ) => { if ( form ) { console . log ( form [ 'nick' ]); } }); For a full example you can look at sample-platform .","title":"Example"},{"location":"user-interface/editor/","text":"Editor Editors are views that are meant for File IO operations. Extension You can register a new editor using the platform-editors extension point. This file is usually put inside a folder named extensions , in the root of the project. Example: { \"module\" : \"new-editor/configs/editor.js\" , \"extensionPoint\" : \"platform-editors\" , \"description\" : \"Example editor\" } Note The 'module' parameter above should point to a valid JavaScript configuration module. Configuration module In order to register a new editor in the platform, you must provide a valid configuration module. This file is usually put inside a folder named configs , in the root of the project. Example: const editorData = { id : 'example-editor' , region : 'center' , label : 'TXT editor' , path : '/services/web/new-editor/editor.html' , defaultEditor : false , contentTypes : [ 'text/plain' , ] }; if ( typeof exports !== 'undefined' ) { exports . getEditor = () => editorData ; } editorData - This is the configuration object itself. It must be a const and it must always be called \"editorData\". id - Unique view ID. path - Link to the view html file. label - User-facing name. Shown in the 'Open with' menu. region - The layout region in which the view should be shown. There are four options: left right center bottom defaultEditor - Set this as the default editor. If another editor is already set as default, you will get an error. contentTypes - List of file mime types that the editor can work with. getEditor - This function must return the configuration object and it must be exported. Note Since this configuration module is used by both client and server, you must always check if exports is undefined before exporting. Editor <!DOCTYPE HTML> <!-- The app and controller name must be set at the topmost level --> < html lang = \"en\" xmlns = \"http://www.w3.org/1999/xhtml\" ng-app = \"editor\" ng-controller = \"EditorController\" > < head > < meta charset = \"utf-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > <!-- Fake icon --> < link rel = \"icon\" sizes = \"any\" href = \"data:;base64,iVBORw0KGgo=\" > <!-- Title directive that will automatically create a title based on the view config --> < title config-title ></ title > <!-- Editor configuration module --> < script type = \"text/javascript\" src = \"/services/web/new-editor/configs/editor.js\" ></ script > <!-- Editor services and view styles --> < script type = \"text/javascript\" src = \"/services/js/platform-core/services/loader.js?id=editor-js\" ></ script > < link type = \"text/css\" rel = \"stylesheet\" href = \"/services/js/platform-core/services/loader.js?id=view-css\" /> <!-- Editor controller --> < script type = \"text/javascript\" src = \"js/editor.js\" ></ script > </ head > <!-- Set the 'Ctrl+S' shortcut, for saving the file --> < body class = \"bk-vbox bk-padding\" shortcut = \"'ctrl+s'\" shortcut-action = \"saveShortcut\" > <!-- Loading indicator --> < bk-busy-indicator-extended class = \"bk-fill-parent\" ng-hide = \"state.error || !state.isBusy\" size = \"l\" > {{::state.busyText}} </ bk-busy-indicator-extended > <!-- Editor text area --> < bk-form-label for = \"eta\" colon = \"true\" > File content </ bk-form-label > < bk-textarea id = \"eta\" class = \"bk-fill-parent\" ng-model = \"file.model\" ng-change = \"modelChange()\" ng-show = \"!state.error && !state.isBusy\" ></ bk-textarea > <!-- Error page in case loading fails --> < bk-message-page glyph = \"sap-icon--error\" ng-if = \"state.error\" > < bk-message-page-title > Editor encounterd an error! </ bk-message-page-title > < bk-message-page-subtitle > {{errorMessage}} </ bk-message-page-subtitle > </ bk-message-page > <!-- Theme support. This must always be placed last --> < theme ></ theme > </ body > </ html > const editor = angular . module ( 'editor' , [ 'blimpKit' , 'platformView' , 'platformShortcuts' , // Enable shortcut functionality, using the 'shortcut' directive 'WorkspaceService' ]); // Include the WorkspaceService for working with files editor . controller ( 'EditorController' , function ( $scope , $window , WorkspaceService , ViewParameters ) { const statusBarHub = new StatusBarHub (); // This is an API based on MessageHub for communicating with the shell's status bar const layoutHub = new LayoutHub (); // This is an API based on MessageHub for communicating with the layout $scope . state = { isBusy : true , error : false , busyText : 'Loading...' , }; $scope . file = { model : '' , // Keep the file content/model in an object }; // When the editor is focused, clean the status bar label (or set the proper one). angular . element ( $window ). bind ( 'focus' , () => { statusBarHub . showLabel ( '' ); }); // Whenever there is a change to the file model, mark the file as dirty $scope . modelChange = () => { layoutHub . setEditorDirty ({ path : $scope . dataParameters . filePath , dirty : true , }); }; $scope . saveShortcut = ( keySet , event ) => { event . preventDefault (); if ( keySet === 'ctrl+s' ) { $scope . state . isBusy = true ; WorkspaceService . saveContent ( $scope . dataParameters . filePath , $scope . file . model ). then (() => { // Clean the dirty status, once the file has been saved. layoutHub . setEditorDirty ({ path : $scope . dataParameters . filePath , dirty : false , }); $scope . $evalAsync (() => { $scope . state . isBusy = false ; }); }, ( response ) => { console . error ( response ); $scope . $evalAsync (() => { $scope . state . error = true ; $scope . errorMessage = 'Error while saving file' ; $scope . state . isBusy = false ; }); }); } }; const loadFileContents = () => { $scope . state . isBusy = true ; WorkspaceService . loadContent ( $scope . dataParameters . filePath ). then (( response ) => { $scope . $evalAsync (() => { $scope . file . model = response . data ; $scope . state . isBusy = false ; }); }, ( response ) => { console . error ( response ); $scope . $evalAsync (() => { $scope . state . error = true ; $scope . errorMessage = 'Error while loading file' ; $scope . state . isBusy = false ; }); }); }; // If the editor has been focused from the outside, clean the status bar label (or set the proper one). layoutHub . onFocusView (( data ) => { if ( data . params && data . params . resourcePath === $scope . dataParameters . filePath ) statusBarHub . showLabel ( '' ); }); // If the file changes (rename, move, etc) outside the editor, parameters will be changed and should be reloaded. layoutHub . onReloadEditorParams (( data ) => { if ( data . path === $scope . dataParameters . filePath ) { $scope . $evalAsync (() => { $scope . dataParameters = ViewParameters . get (); }); }; }); // Use ViewParameters to get the editor parameters like 'filePath' $scope . dataParameters = ViewParameters . get (); if ( ! $scope . dataParameters . hasOwnProperty ( 'filePath' )) { $scope . state . error = true ; $scope . errorMessage = \"The 'filePath' data parameter is missing.\" ; } else { loadFileContents (); } }); The project structure should look like this: new-editor - extensions - editor.extension - configs - editor.js - js - editor.js - editor.html For a full example you can look at sample-platform .","title":"Editor"},{"location":"user-interface/editor/#editor","text":"Editors are views that are meant for File IO operations.","title":"Editor"},{"location":"user-interface/editor/#extension","text":"You can register a new editor using the platform-editors extension point. This file is usually put inside a folder named extensions , in the root of the project. Example: { \"module\" : \"new-editor/configs/editor.js\" , \"extensionPoint\" : \"platform-editors\" , \"description\" : \"Example editor\" } Note The 'module' parameter above should point to a valid JavaScript configuration module.","title":"Extension"},{"location":"user-interface/editor/#configuration-module","text":"In order to register a new editor in the platform, you must provide a valid configuration module. This file is usually put inside a folder named configs , in the root of the project. Example: const editorData = { id : 'example-editor' , region : 'center' , label : 'TXT editor' , path : '/services/web/new-editor/editor.html' , defaultEditor : false , contentTypes : [ 'text/plain' , ] }; if ( typeof exports !== 'undefined' ) { exports . getEditor = () => editorData ; } editorData - This is the configuration object itself. It must be a const and it must always be called \"editorData\". id - Unique view ID. path - Link to the view html file. label - User-facing name. Shown in the 'Open with' menu. region - The layout region in which the view should be shown. There are four options: left right center bottom defaultEditor - Set this as the default editor. If another editor is already set as default, you will get an error. contentTypes - List of file mime types that the editor can work with. getEditor - This function must return the configuration object and it must be exported. Note Since this configuration module is used by both client and server, you must always check if exports is undefined before exporting.","title":"Configuration module"},{"location":"user-interface/editor/#editor_1","text":"<!DOCTYPE HTML> <!-- The app and controller name must be set at the topmost level --> < html lang = \"en\" xmlns = \"http://www.w3.org/1999/xhtml\" ng-app = \"editor\" ng-controller = \"EditorController\" > < head > < meta charset = \"utf-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > <!-- Fake icon --> < link rel = \"icon\" sizes = \"any\" href = \"data:;base64,iVBORw0KGgo=\" > <!-- Title directive that will automatically create a title based on the view config --> < title config-title ></ title > <!-- Editor configuration module --> < script type = \"text/javascript\" src = \"/services/web/new-editor/configs/editor.js\" ></ script > <!-- Editor services and view styles --> < script type = \"text/javascript\" src = \"/services/js/platform-core/services/loader.js?id=editor-js\" ></ script > < link type = \"text/css\" rel = \"stylesheet\" href = \"/services/js/platform-core/services/loader.js?id=view-css\" /> <!-- Editor controller --> < script type = \"text/javascript\" src = \"js/editor.js\" ></ script > </ head > <!-- Set the 'Ctrl+S' shortcut, for saving the file --> < body class = \"bk-vbox bk-padding\" shortcut = \"'ctrl+s'\" shortcut-action = \"saveShortcut\" > <!-- Loading indicator --> < bk-busy-indicator-extended class = \"bk-fill-parent\" ng-hide = \"state.error || !state.isBusy\" size = \"l\" > {{::state.busyText}} </ bk-busy-indicator-extended > <!-- Editor text area --> < bk-form-label for = \"eta\" colon = \"true\" > File content </ bk-form-label > < bk-textarea id = \"eta\" class = \"bk-fill-parent\" ng-model = \"file.model\" ng-change = \"modelChange()\" ng-show = \"!state.error && !state.isBusy\" ></ bk-textarea > <!-- Error page in case loading fails --> < bk-message-page glyph = \"sap-icon--error\" ng-if = \"state.error\" > < bk-message-page-title > Editor encounterd an error! </ bk-message-page-title > < bk-message-page-subtitle > {{errorMessage}} </ bk-message-page-subtitle > </ bk-message-page > <!-- Theme support. This must always be placed last --> < theme ></ theme > </ body > </ html > const editor = angular . module ( 'editor' , [ 'blimpKit' , 'platformView' , 'platformShortcuts' , // Enable shortcut functionality, using the 'shortcut' directive 'WorkspaceService' ]); // Include the WorkspaceService for working with files editor . controller ( 'EditorController' , function ( $scope , $window , WorkspaceService , ViewParameters ) { const statusBarHub = new StatusBarHub (); // This is an API based on MessageHub for communicating with the shell's status bar const layoutHub = new LayoutHub (); // This is an API based on MessageHub for communicating with the layout $scope . state = { isBusy : true , error : false , busyText : 'Loading...' , }; $scope . file = { model : '' , // Keep the file content/model in an object }; // When the editor is focused, clean the status bar label (or set the proper one). angular . element ( $window ). bind ( 'focus' , () => { statusBarHub . showLabel ( '' ); }); // Whenever there is a change to the file model, mark the file as dirty $scope . modelChange = () => { layoutHub . setEditorDirty ({ path : $scope . dataParameters . filePath , dirty : true , }); }; $scope . saveShortcut = ( keySet , event ) => { event . preventDefault (); if ( keySet === 'ctrl+s' ) { $scope . state . isBusy = true ; WorkspaceService . saveContent ( $scope . dataParameters . filePath , $scope . file . model ). then (() => { // Clean the dirty status, once the file has been saved. layoutHub . setEditorDirty ({ path : $scope . dataParameters . filePath , dirty : false , }); $scope . $evalAsync (() => { $scope . state . isBusy = false ; }); }, ( response ) => { console . error ( response ); $scope . $evalAsync (() => { $scope . state . error = true ; $scope . errorMessage = 'Error while saving file' ; $scope . state . isBusy = false ; }); }); } }; const loadFileContents = () => { $scope . state . isBusy = true ; WorkspaceService . loadContent ( $scope . dataParameters . filePath ). then (( response ) => { $scope . $evalAsync (() => { $scope . file . model = response . data ; $scope . state . isBusy = false ; }); }, ( response ) => { console . error ( response ); $scope . $evalAsync (() => { $scope . state . error = true ; $scope . errorMessage = 'Error while loading file' ; $scope . state . isBusy = false ; }); }); }; // If the editor has been focused from the outside, clean the status bar label (or set the proper one). layoutHub . onFocusView (( data ) => { if ( data . params && data . params . resourcePath === $scope . dataParameters . filePath ) statusBarHub . showLabel ( '' ); }); // If the file changes (rename, move, etc) outside the editor, parameters will be changed and should be reloaded. layoutHub . onReloadEditorParams (( data ) => { if ( data . path === $scope . dataParameters . filePath ) { $scope . $evalAsync (() => { $scope . dataParameters = ViewParameters . get (); }); }; }); // Use ViewParameters to get the editor parameters like 'filePath' $scope . dataParameters = ViewParameters . get (); if ( ! $scope . dataParameters . hasOwnProperty ( 'filePath' )) { $scope . state . error = true ; $scope . errorMessage = \"The 'filePath' data parameter is missing.\" ; } else { loadFileContents (); } }); The project structure should look like this: new-editor - extensions - editor.extension - configs - editor.js - js - editor.js - editor.html For a full example you can look at sample-platform .","title":"Editor"},{"location":"user-interface/layout/","text":"LayoutHub Controls the layout. Extends MessageHub . Overview Module: platform-core Source: platform-core/ui/platform/layout-hub.js Web Link: /services/web/platform-core/ui/platform/layout-hub.js Status: stable Group: platform Basic Usage If you are using the standard Dirigible view configuration, layout support is automatically enabled. If you are making a custom view, you can include the API using the web link above. To initialize it: const layoutHub = new LayoutHub (); This hub is different compared to the others. All hubs listen to changes globally, meaning that, for example, if View A in Perspective A with Layout A sends a message using the WorkspaceHub that there is a change to a workspace and View B in Perspective B with Layout B is listening for workspace changes, then View B will receive that message despite being in a completely different perspective and layout. The LayoutHub is going to react to changes only from views that are inside it, not to outside changes. If View A in Perspective A requests for View C to be opened, the view will be opened only in the Perspective A layout and Perspective B will not change. Constructor Properties Param Type Description [layoutId] string Layout id. By default, it's the perspective id. [setId] boolean When creating a layout, this parameter must be set to true as it will register the current window object as a layout one and set a layoutId parameter in it. This will help all child views to get the layout id automatically. Functions Function Description Returns getOpenedViews(ParamsObject) Returns a list of opened view ids. Promise onGetOpenedViews(handlerFunc) Registers a listener. Triggered when a list of opened views is requested. Returns a function to unregister the listener. function isViewOpen(IdParamObject) Returns true if a view is opened. Promise onIsViewOpen(handlerFunc) Registers a listener. Triggered when a view opened state check is requested. Returns a function to unregister the listener. function openView(IdParamObject) Opens a view. - onOpenView(handlerFunc) Registers a listener. Triggered when a view should be opened. Returns a function to unregister the listener. function focusView(IdParamObject) Focuses a view. - onFocusView(handlerFunc) Registers a listener. Triggered when a view should be focused. Returns a function to unregister the listener. function closeView(IdParamObject) Closes a view. - onCloseView(handlerFunc) Registers a listener. Triggered when a view should be closed. Returns a function to unregister the listener. function closeOtherViews(IdParamObject) Closes all other views. - onCloseOtherViews(handlerFunc) Registers a listener. Triggered when other views should be closed. Returns a function to unregister the listener. function closeAllViews(ParamsObject) Closes all views. - onCloseAllViews(handlerFunc) Registers a listener. Triggered when all views should be closed. Returns a function to unregister the listener. function setViewDirty(ViewDirtyObject) Sets the dirty state of a view. - onViewDirty(handlerFunc) Registers a listener. Triggered when a view's dirty state should be changed. Returns a function to unregister the listener. function openEditor(OpenEditorParams) Sends a message containing information on which editor has to be opened. - onOpenEditor(handlerFunc) Triggered when an editor has to be opened. function closeEditor(PathParams) Sends a message containing information on which editor has to be closed. - onCloseEditor(handlerFunc) Triggered when an editor has to be closed. function closeAllEditors(Params) Sends a message when all editors should be closed. - onCloseAllEditors(handlerFunc) Triggered when editors have to be closed. function setEditorDirty(EditorDirtyParams) Sends a message containing information on which editor has to be set to dirty. - onSetEditorDirty(handlerFunc) Triggered when an editor has to be set as dirty. function isEditorDirty(PathParams) Gets the dirty state of an editor. Promise onIsEditorDirty(handlerFunc) Triggered when an editor's dirty state is requested. function isEditorOpen(PathParams) Checks if an editor is open. Promise onIsEditorOpen(handlerFunc) Triggered when performing a check for an open editor. function getCurrentlyOpenedEditors(GetOpenedParams) Gets all file paths from the currently opened editors. Promise onGetCurrentlyOpenedEditors(handlerFunc) Triggered when a list of opened files is requested. function reloadEditorParams(PathParams) Tells an editor that it should reload its view parameters. - onReloadEditorParams(handlerFunc) Triggered when an editor should reload its view parameters. function Typedefs IdParamObject : Object ParamsObject : Object ViewDirtyObject : Object OpenEditorParams : Object PathParams : Object Params : Object EditorDirtyParams : Object GetOpenedParams : Object Note Params in square brackets are optional. IdParamObject : Object Properties Param Type Description id string View id. [params] object Custom parameters. See ViewParameters . ParamsObject : Object Properties Param Type Description [params] object Custom parameters. See ViewParameters. ViewDirtyObject : Object Properties Param Type Description id string View id. dirty boolean Dirty state. [params] object Custom parameters. See ViewParameters. OpenEditorParams : Object Param Type Description path string Full file path, including file name. contentType string The file content type. [editorId] string The ID of the preffered editor. [params] Object.<any, any> Extra parameters that will be passed to the view parameters of the editor. PathParams : Object Param Type Description path string Full file path, including file name. [params] Object.<any, any> Extra parameters. Params : Object Param Type Description [params] Object.<any, any> Extra parameters. EditorDirtyParams : Object Param Type Description path string Full file path, including file name. dirty boolean File dirty state. [params] Object.<any, any> Extra parameters. GetOpenedParams : Object Param Type Description basePath string If provided, it will only return files with a matching base path. Example If you want your view to just communicate with the layout that it's in: const layoutHub = new LayoutHub (); If you want your view to just communicate with the layout that somewere else in the application: const layoutHub = new LayoutHub ( 'other-layout-id' ); If you want your view/perspective to be registered as a layout or layout-containing and receive layout events: const layoutHub = new LayoutHub ( 'some-layout-id' , true ); To open a view: layoutHub . openView ({ id : 'exampleView' , params : { title : 'Example' , } });","title":"LayoutHub"},{"location":"user-interface/layout/#layouthub","text":"Controls the layout. Extends MessageHub . Overview Module: platform-core Source: platform-core/ui/platform/layout-hub.js Web Link: /services/web/platform-core/ui/platform/layout-hub.js Status: stable Group: platform","title":"LayoutHub"},{"location":"user-interface/layout/#basic-usage","text":"If you are using the standard Dirigible view configuration, layout support is automatically enabled. If you are making a custom view, you can include the API using the web link above. To initialize it: const layoutHub = new LayoutHub (); This hub is different compared to the others. All hubs listen to changes globally, meaning that, for example, if View A in Perspective A with Layout A sends a message using the WorkspaceHub that there is a change to a workspace and View B in Perspective B with Layout B is listening for workspace changes, then View B will receive that message despite being in a completely different perspective and layout. The LayoutHub is going to react to changes only from views that are inside it, not to outside changes. If View A in Perspective A requests for View C to be opened, the view will be opened only in the Perspective A layout and Perspective B will not change.","title":"Basic Usage"},{"location":"user-interface/layout/#constructor","text":"Properties Param Type Description [layoutId] string Layout id. By default, it's the perspective id. [setId] boolean When creating a layout, this parameter must be set to true as it will register the current window object as a layout one and set a layoutId parameter in it. This will help all child views to get the layout id automatically.","title":"Constructor"},{"location":"user-interface/layout/#functions","text":"Function Description Returns getOpenedViews(ParamsObject) Returns a list of opened view ids. Promise onGetOpenedViews(handlerFunc) Registers a listener. Triggered when a list of opened views is requested. Returns a function to unregister the listener. function isViewOpen(IdParamObject) Returns true if a view is opened. Promise onIsViewOpen(handlerFunc) Registers a listener. Triggered when a view opened state check is requested. Returns a function to unregister the listener. function openView(IdParamObject) Opens a view. - onOpenView(handlerFunc) Registers a listener. Triggered when a view should be opened. Returns a function to unregister the listener. function focusView(IdParamObject) Focuses a view. - onFocusView(handlerFunc) Registers a listener. Triggered when a view should be focused. Returns a function to unregister the listener. function closeView(IdParamObject) Closes a view. - onCloseView(handlerFunc) Registers a listener. Triggered when a view should be closed. Returns a function to unregister the listener. function closeOtherViews(IdParamObject) Closes all other views. - onCloseOtherViews(handlerFunc) Registers a listener. Triggered when other views should be closed. Returns a function to unregister the listener. function closeAllViews(ParamsObject) Closes all views. - onCloseAllViews(handlerFunc) Registers a listener. Triggered when all views should be closed. Returns a function to unregister the listener. function setViewDirty(ViewDirtyObject) Sets the dirty state of a view. - onViewDirty(handlerFunc) Registers a listener. Triggered when a view's dirty state should be changed. Returns a function to unregister the listener. function openEditor(OpenEditorParams) Sends a message containing information on which editor has to be opened. - onOpenEditor(handlerFunc) Triggered when an editor has to be opened. function closeEditor(PathParams) Sends a message containing information on which editor has to be closed. - onCloseEditor(handlerFunc) Triggered when an editor has to be closed. function closeAllEditors(Params) Sends a message when all editors should be closed. - onCloseAllEditors(handlerFunc) Triggered when editors have to be closed. function setEditorDirty(EditorDirtyParams) Sends a message containing information on which editor has to be set to dirty. - onSetEditorDirty(handlerFunc) Triggered when an editor has to be set as dirty. function isEditorDirty(PathParams) Gets the dirty state of an editor. Promise onIsEditorDirty(handlerFunc) Triggered when an editor's dirty state is requested. function isEditorOpen(PathParams) Checks if an editor is open. Promise onIsEditorOpen(handlerFunc) Triggered when performing a check for an open editor. function getCurrentlyOpenedEditors(GetOpenedParams) Gets all file paths from the currently opened editors. Promise onGetCurrentlyOpenedEditors(handlerFunc) Triggered when a list of opened files is requested. function reloadEditorParams(PathParams) Tells an editor that it should reload its view parameters. - onReloadEditorParams(handlerFunc) Triggered when an editor should reload its view parameters. function","title":"Functions"},{"location":"user-interface/layout/#typedefs","text":"IdParamObject : Object ParamsObject : Object ViewDirtyObject : Object OpenEditorParams : Object PathParams : Object Params : Object EditorDirtyParams : Object GetOpenedParams : Object Note Params in square brackets are optional.","title":"Typedefs"},{"location":"user-interface/layout/#idparamobject-object","text":"Properties Param Type Description id string View id. [params] object Custom parameters. See ViewParameters .","title":"IdParamObject : Object"},{"location":"user-interface/layout/#paramsobject-object","text":"Properties Param Type Description [params] object Custom parameters. See ViewParameters.","title":"ParamsObject : Object"},{"location":"user-interface/layout/#viewdirtyobject-object","text":"Properties Param Type Description id string View id. dirty boolean Dirty state. [params] object Custom parameters. See ViewParameters.","title":"ViewDirtyObject : Object"},{"location":"user-interface/layout/#openeditorparams-object","text":"Param Type Description path string Full file path, including file name. contentType string The file content type. [editorId] string The ID of the preffered editor. [params] Object.<any, any> Extra parameters that will be passed to the view parameters of the editor.","title":"OpenEditorParams : Object"},{"location":"user-interface/layout/#pathparams-object","text":"Param Type Description path string Full file path, including file name. [params] Object.<any, any> Extra parameters.","title":"PathParams : Object"},{"location":"user-interface/layout/#params-object","text":"Param Type Description [params] Object.<any, any> Extra parameters.","title":"Params : Object"},{"location":"user-interface/layout/#editordirtyparams-object","text":"Param Type Description path string Full file path, including file name. dirty boolean File dirty state. [params] Object.<any, any> Extra parameters.","title":"EditorDirtyParams : Object"},{"location":"user-interface/layout/#getopenedparams-object","text":"Param Type Description basePath string If provided, it will only return files with a matching base path.","title":"GetOpenedParams : Object"},{"location":"user-interface/layout/#example","text":"If you want your view to just communicate with the layout that it's in: const layoutHub = new LayoutHub (); If you want your view to just communicate with the layout that somewere else in the application: const layoutHub = new LayoutHub ( 'other-layout-id' ); If you want your view/perspective to be registered as a layout or layout-containing and receive layout events: const layoutHub = new LayoutHub ( 'some-layout-id' , true ); To open a view: layoutHub . openView ({ id : 'exampleView' , params : { title : 'Example' , } });","title":"Example"},{"location":"user-interface/menu/","text":"Menu Menus are JavaScript configuration modules that contain menu item objects. Those menus are populated in the shellbar as global menus for the perspective they belong to. Extension You can register a new menu using the platform-menus extension point. This file is usually put inside a folder named extensions , in the root of the project. Example: { \"module\" : \"new-menu/configs/menu.js\" , \"extensionPoint\" : \"platform-menus\" , \"description\" : \"Example menu\" } Note The 'module' parameter above should point to a valid JavaScript configuration module. Configuration module In order to register a new menu in the platform, you must provide a valid configuration module. This file is usually put inside a folder named configs , in the root of the project. Example: exports . getMenu = () => ({ perspectiveId : 'examplePerspective' , include : { help : true , window : true }, items : [ { label : 'Example' , items : [ { label : 'Event' , action : 'event' , data : { topic : 'example.menu.event' , message : 'example' } }, { id : 'workbench' , label : 'Workbench' , action : 'showPerspective' , }, { id : 'about' , label : 'About' , action : 'openWindow' , hasHeader : true , }, { label : 'Submenu' , items : [ { label : 'Dirigible' , action : 'open' , link : 'https://www.dirigible.io/' , }, { label : 'Empty item with a separator' , separator : true , }, { label : 'Empty item' , } ] }, ] } ] }); getMenu - This function must return the configuration object and it must be exported. perspectiveId - Perspective ID. include - Eclipse Dirigible contains two system menus. You can inlude or exclude those from your perspective menu. help - Platform help menu. window - Platform window menu. items - List of menu item objects. label - Menu item label. separator - Menu item bottom separator. action - Execute action when selected. open - Opens a link in a new tab or browser window openView - Opens a view openWindow - Opens a window showPerspective - Shows a perspective event - Message will be sent using MessageHub on the provided topic. id - In case of actions \"openView\", \"openWindow\" and \"showPerspective\", this is the id of the view/perspective. data - In case of action \"event\", this is an object with topic and message. link - In case of action \"open\", this is the link that should be opned. hasHeader - In case of action \"openWindow\", you can specify if the window will have a header. The project structure should look like this: new-menu - extensions - menu.extension - configs - menu.js For a full example you can look at sample-platform .","title":"Menu"},{"location":"user-interface/menu/#menu","text":"Menus are JavaScript configuration modules that contain menu item objects. Those menus are populated in the shellbar as global menus for the perspective they belong to.","title":"Menu"},{"location":"user-interface/menu/#extension","text":"You can register a new menu using the platform-menus extension point. This file is usually put inside a folder named extensions , in the root of the project. Example: { \"module\" : \"new-menu/configs/menu.js\" , \"extensionPoint\" : \"platform-menus\" , \"description\" : \"Example menu\" } Note The 'module' parameter above should point to a valid JavaScript configuration module.","title":"Extension"},{"location":"user-interface/menu/#configuration-module","text":"In order to register a new menu in the platform, you must provide a valid configuration module. This file is usually put inside a folder named configs , in the root of the project. Example: exports . getMenu = () => ({ perspectiveId : 'examplePerspective' , include : { help : true , window : true }, items : [ { label : 'Example' , items : [ { label : 'Event' , action : 'event' , data : { topic : 'example.menu.event' , message : 'example' } }, { id : 'workbench' , label : 'Workbench' , action : 'showPerspective' , }, { id : 'about' , label : 'About' , action : 'openWindow' , hasHeader : true , }, { label : 'Submenu' , items : [ { label : 'Dirigible' , action : 'open' , link : 'https://www.dirigible.io/' , }, { label : 'Empty item with a separator' , separator : true , }, { label : 'Empty item' , } ] }, ] } ] }); getMenu - This function must return the configuration object and it must be exported. perspectiveId - Perspective ID. include - Eclipse Dirigible contains two system menus. You can inlude or exclude those from your perspective menu. help - Platform help menu. window - Platform window menu. items - List of menu item objects. label - Menu item label. separator - Menu item bottom separator. action - Execute action when selected. open - Opens a link in a new tab or browser window openView - Opens a view openWindow - Opens a window showPerspective - Shows a perspective event - Message will be sent using MessageHub on the provided topic. id - In case of actions \"openView\", \"openWindow\" and \"showPerspective\", this is the id of the view/perspective. data - In case of action \"event\", this is an object with topic and message. link - In case of action \"open\", this is the link that should be opned. hasHeader - In case of action \"openWindow\", you can specify if the window will have a header. The project structure should look like this: new-menu - extensions - menu.extension - configs - menu.js For a full example you can look at sample-platform .","title":"Configuration module"},{"location":"user-interface/message-hub/","text":"MessageHub In order to maximize extensibility and isolation, all perspectives, views, editors, windows, etc are loaded inside iframes. Those UI modules must comunicate between eachother and that is what MessageHub is for. It's a library based on the postMessage API and it uses the observer pattern. Overview Module: platform-core Source: platform-core/ui/platform/message-hub.js Web Link: /services/web/platform-core/ui/platform/message-hub.js Status: stable Group: platform Basic Usage If you are using the standard Dirigible view configuration, Message Hub support is automatically enabled. If you are making a custom view, you can include the API using the web link above. To initialize it: const messageHub = new MessageHubApi (); // or const messageHub = new MessageHubApi ({ hubWindow = window , targetOrigin = location . origin , allowedOrigins = [ location . origin ], }); Functions Function Description Returns triggerEvent(topic) Sends an empty message to a topic - postMessage(PostObject) Sends a message/data to a topic - addMessageListener(ListenerObject) Registers a listener. Triggered when a message is posted. Returns a function to unregister the listener. function removeMessageListener(handlerReference) Unregisters a listener - Typedefs InitObject : Object PostObject : Object ListenerObject : Object Note Params in square brackets are optional. InitObject : Object Properties Param Type Description hubWindow window The top level browser window object. targetOrigin string Origin the sender. allowedOrigins array. List of allowed origins who can send a message. PostObject : Object Properties Param Type Description topic string The topic to listen to. data Message/data that will be transmitted. ListenerObject : Object Properties Param Type Description topic string The topic to listen to. handler Callback function that will handle the incomming message/data. Example messageHub . triggerEvent ( 'some-topic' ); messageHub . postMessage ({ topic : 'some-topic' , data : 'some-data' }); const topicListener = messageHub . addMessageListener ({ topic : 'some-topic' , handler : ( data ) => { if ( data ) { console . log ( data ); messageHub . removeMessageListener ( topicListener ); } } });","title":"MessageHub"},{"location":"user-interface/message-hub/#messagehub","text":"In order to maximize extensibility and isolation, all perspectives, views, editors, windows, etc are loaded inside iframes. Those UI modules must comunicate between eachother and that is what MessageHub is for. It's a library based on the postMessage API and it uses the observer pattern. Overview Module: platform-core Source: platform-core/ui/platform/message-hub.js Web Link: /services/web/platform-core/ui/platform/message-hub.js Status: stable Group: platform","title":"MessageHub"},{"location":"user-interface/message-hub/#basic-usage","text":"If you are using the standard Dirigible view configuration, Message Hub support is automatically enabled. If you are making a custom view, you can include the API using the web link above. To initialize it: const messageHub = new MessageHubApi (); // or const messageHub = new MessageHubApi ({ hubWindow = window , targetOrigin = location . origin , allowedOrigins = [ location . origin ], });","title":"Basic Usage"},{"location":"user-interface/message-hub/#functions","text":"Function Description Returns triggerEvent(topic) Sends an empty message to a topic - postMessage(PostObject) Sends a message/data to a topic - addMessageListener(ListenerObject) Registers a listener. Triggered when a message is posted. Returns a function to unregister the listener. function removeMessageListener(handlerReference) Unregisters a listener -","title":"Functions"},{"location":"user-interface/message-hub/#typedefs","text":"InitObject : Object PostObject : Object ListenerObject : Object Note Params in square brackets are optional.","title":"Typedefs"},{"location":"user-interface/message-hub/#initobject-object","text":"Properties Param Type Description hubWindow window The top level browser window object. targetOrigin string Origin the sender. allowedOrigins array. List of allowed origins who can send a message.","title":"InitObject : Object"},{"location":"user-interface/message-hub/#postobject-object","text":"Properties Param Type Description topic string The topic to listen to. data Message/data that will be transmitted.","title":"PostObject : Object"},{"location":"user-interface/message-hub/#listenerobject-object","text":"Properties Param Type Description topic string The topic to listen to. handler Callback function that will handle the incomming message/data.","title":"ListenerObject : Object"},{"location":"user-interface/message-hub/#example","text":"messageHub . triggerEvent ( 'some-topic' ); messageHub . postMessage ({ topic : 'some-topic' , data : 'some-data' }); const topicListener = messageHub . addMessageListener ({ topic : 'some-topic' , handler : ( data ) => { if ( data ) { console . log ( data ); messageHub . removeMessageListener ( topicListener ); } } });","title":"Example"},{"location":"user-interface/notification/","text":"Notification Used to send notifications. Extends MessageHub . Overview Module: platform-core Source: platform-core/ui/platform/notification-hub.js Web Link: /services/web/platform-core/ui/platform/notification-hub.js Status: stable Group: platform Basic Usage If you are using the standard Dirigible view configuration, notification support is enabled automatically. If you are making a custom view, you can include the API using the web link above. To initialize it, place this in your code: const notificationHub = new NotificationHub (); Functions Function Description Returns show(NotifyObject) Shows a notification. object onShow(handlerFunc) Registers a listener. Triggered when a notification should be shown. Returns a function to unregister the listener. function Typedefs Note Params in square brackets are optional. NotifyObject : Object Param Type Description type 'information' | 'warning' | 'negative' | 'positive' Type of notification. title string Notification title. description string Notification description. Example notificationHub . show ({ type : 'information' , title : 'Information' , description : 'This is used to show information.' , }); For a full example you can look at sample-platform .","title":"Notification"},{"location":"user-interface/notification/#notification","text":"Used to send notifications. Extends MessageHub . Overview Module: platform-core Source: platform-core/ui/platform/notification-hub.js Web Link: /services/web/platform-core/ui/platform/notification-hub.js Status: stable Group: platform","title":"Notification"},{"location":"user-interface/notification/#basic-usage","text":"If you are using the standard Dirigible view configuration, notification support is enabled automatically. If you are making a custom view, you can include the API using the web link above. To initialize it, place this in your code: const notificationHub = new NotificationHub ();","title":"Basic Usage"},{"location":"user-interface/notification/#functions","text":"Function Description Returns show(NotifyObject) Shows a notification. object onShow(handlerFunc) Registers a listener. Triggered when a notification should be shown. Returns a function to unregister the listener. function","title":"Functions"},{"location":"user-interface/notification/#typedefs","text":"Note Params in square brackets are optional.","title":"Typedefs"},{"location":"user-interface/notification/#notifyobject-object","text":"Param Type Description type 'information' | 'warning' | 'negative' | 'positive' Type of notification. title string Notification title. description string Notification description.","title":"NotifyObject : Object"},{"location":"user-interface/notification/#example","text":"notificationHub . show ({ type : 'information' , title : 'Information' , description : 'This is used to show information.' , }); For a full example you can look at sample-platform .","title":"Example"},{"location":"user-interface/perspective/","text":"Perspective The perspective is what sits inside a shell's main container. This is the part that holds the layout, the views inside the layout and it can act as a data hub for those views. There are two types of perspective: Perspective - This is default one. Utility perspective - Same as the default but it will be listed at the bottom of the vertical navigation. Extension You can register a new perspective using the platform-perspectives extension point. This file is usually put inside a folder named extensions , in the root of the project. Example: { \"module\" : \"new-perspective/configs/perspective.js\" , \"extensionPoint\" : \"platform-perspectives\" , \"description\" : \"Example perspective\" } Note The 'module' parameter above should point to a valid JavaScript configuration module. Configuration module In order to register a new perspective in the platform, you must provide a valid configuration module. This file is usually put inside a folder named configs , in the root of the project. Example: const perspectiveData = { id : 'examplePerspective' , label : 'Example' , path : '/services/web/new-perspective/perspective.html' , groupId : 'examplePerspectiveGroup' , order : 1000 , icon : '/services/web/new-perspective/images/sample.svg' , }; if ( typeof exports !== 'undefined' ) { exports . getPerspective = () => perspectiveData ; // or for utility exports . getUtilityPerspective = () => perspectiveData ; } perspectiveData - This is the configuration object itself. It must be a const and it must always be called \"perspectiveData\". id - Unique perspective ID. path - Link to the perspective html file. label - User-facing name. Shown in the vertical navigation. groupId - If the perspective is part of a perspective group, you must provide the group id here. order - Used to sort the tabs in the vertical navigation (or in the group it belongs to). icon - Path to an SVG icon, that will be shown in the vertical navigation. getPerspective - This function must return the configuration object and it must be exported. getUtilityPerspective - Same as \"getPerspective\" but used for utility perspectives. Note Since this configuration module is used by both client and server, you must always check if exports is undefined before exporting. Perspective Perspective with a default layout: <!DOCTYPE HTML> <!-- The app and controller name must be set at the topmost level --> < html lang = \"en\" ng-app = \"example\" ng-controller = \"ExamplePerspectiveController\" xmlns = \"http://www.w3.org/1999/xhtml\" > < head > < meta charset = \"utf-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > <!-- Title directive that will automatically create a title based on the perspective config --> < title config-title ></ title > <!-- Fake icon --> < link rel = \"icon\" sizes = \"any\" href = \"data:;base64,iVBORw0KGgo=\" /> <!-- Perspective config --> < script type = \"text/javascript\" src = \"/services/web/new-perspective/configs/perspective.js\" ></ script > <!-- Perspective services and styles --> < script type = \"text/javascript\" src = \"/services/js/platform-core/services/loader.js?id=perspective-js\" ></ script > < link type = \"text/css\" rel = \"stylesheet\" href = \"/services/js/platform-core/services/loader.js?id=perspective-css\" /> <!-- Perspective controller --> < script type = \"text/javascript\" src = \"js/perspective.js\" ></ script > </ head > < body > <!-- Default layout --> < layout config = \"::layoutConfig\" ></ layout > <!-- Theme support --> < theme ></ theme > </ body > </ html > const examplePerspective = angular . module ( 'example' , [ 'platformView' , 'platformLayout' , 'blimpKit' ]); // Initialize controller examplePerspective . controller ( 'ExamplePerspectiveController' , ( $scope ) => { $scope . layoutConfig = { // Array of view ids views : [ 'exampleViewLeft' , 'exampleViewBottom' , 'exampleViewCenter' ], viewSettings : { 'exampleViewLeft' : { expanded : true }, 'exampleViewCenter' : { closable : true }, }, layoutSettings : { hideCenterPane : false , leftPaneMinSize : 240 }, }; }); The layoutConfig will be used for creating the layout and populating it with views. views - This is an array that holds the IDs of the views that should be inside the layout. viewSettings - This is an object that you can use to set some view-specific settings by using the view ID as key. There are two settings available: expanded - If the view is positioned on the left or right side, it will have the ability to be expanded or collapsed. By default, the first one will be expanded. closable - If the view is positioned in the center of the layout, it will be closable by default. You can set this to false to stop the view from being closed. layoutSettings - Layout configuration hideCenterPane - The center pane is shown by default. If set to true, the bottom pane will be expanded to cover the center pane. hideCenterTabs - Center pane will be shown but the tab bar will be hidden. hideBottomTabs - Bottom pane will be shown but the tab bar will be hidden. leftPaneSize - Size the left pane in percentages. leftPaneMinSize - Minimum size of the left pane in pixels. leftPaneMaxSize - Maximum size of the left pane in pixels. rightPaneSize - Size the right pane in percentages. rightPaneMinSize - Minimum size of the right pane in pixels. rightPaneMaxSize - Maximum size of the left pane in pixels. bottomPaneSize - Size the bottom pane in percentages. Perspective with a custom layout: <!DOCTYPE html> <!-- The app and controller name must be set at the topmost level --> < html lang = \"en\" ng-app = \"example\" ng-controller = \"ExamplePerspectiveController\" xmlns = \"http://www.w3.org/1999/xhtml\" > < head > < meta charset = \"utf-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > <!-- Title directive that will automatically create a title based on the perspective config --> < title config-title ></ title > <!-- Fake icon --> < link rel = \"icon\" sizes = \"any\" href = \"data:;base64,iVBORw0KGgo=\" /> <!-- Perspective config --> < script type = \"text/javascript\" src = \"/services/web/new-perspective/configs/perspective.js\" ></ script > <!-- Base perspective services and styles --> < script type = \"text/javascript\" src = \"/services/js/platform-core/services/loader.js?id=perspective-js\" ></ script > < link type = \"text/css\" rel = \"stylesheet\" href = \"/services/js/platform-core/services/loader.js?id=perspective-css\" /> </ head > < body > <!-- Custom layout --> < split direction = \"horizontal\" > < split-pane size = \"50\" min-size = \"0\" snap-offset = \"100\" > < embedded-view view-id = \"exampleViewLeft\" ></ embedded-view > </ split-pane > < split-pane size = \"50\" min-size = \"0\" snap-offset = \"100\" > < embedded-view view-id = \"exampleViewRight\" ></ embedded-view > </ split-pane > </ split > <!-- Perspective controller. This can be a separate file, if the controller is too big. --> < script type = \"text/javascript\" > angular . module ( 'example' , [ 'platformView' , 'platformSplit' , 'blimpKit' ]) . controller ( 'ExamplePerspectiveController' , ( $scope ) => {}); </ script > <!-- Theme support --> < theme ></ theme > </ body > </ html > The project structure should look like this: new-perspective - extensions - perspective.extension - configs - perspective.js - js - perspective.js - perspective.html For a full example you can look at sample-platform .","title":"Perspective"},{"location":"user-interface/perspective/#perspective","text":"The perspective is what sits inside a shell's main container. This is the part that holds the layout, the views inside the layout and it can act as a data hub for those views. There are two types of perspective: Perspective - This is default one. Utility perspective - Same as the default but it will be listed at the bottom of the vertical navigation.","title":"Perspective"},{"location":"user-interface/perspective/#extension","text":"You can register a new perspective using the platform-perspectives extension point. This file is usually put inside a folder named extensions , in the root of the project. Example: { \"module\" : \"new-perspective/configs/perspective.js\" , \"extensionPoint\" : \"platform-perspectives\" , \"description\" : \"Example perspective\" } Note The 'module' parameter above should point to a valid JavaScript configuration module.","title":"Extension"},{"location":"user-interface/perspective/#configuration-module","text":"In order to register a new perspective in the platform, you must provide a valid configuration module. This file is usually put inside a folder named configs , in the root of the project. Example: const perspectiveData = { id : 'examplePerspective' , label : 'Example' , path : '/services/web/new-perspective/perspective.html' , groupId : 'examplePerspectiveGroup' , order : 1000 , icon : '/services/web/new-perspective/images/sample.svg' , }; if ( typeof exports !== 'undefined' ) { exports . getPerspective = () => perspectiveData ; // or for utility exports . getUtilityPerspective = () => perspectiveData ; } perspectiveData - This is the configuration object itself. It must be a const and it must always be called \"perspectiveData\". id - Unique perspective ID. path - Link to the perspective html file. label - User-facing name. Shown in the vertical navigation. groupId - If the perspective is part of a perspective group, you must provide the group id here. order - Used to sort the tabs in the vertical navigation (or in the group it belongs to). icon - Path to an SVG icon, that will be shown in the vertical navigation. getPerspective - This function must return the configuration object and it must be exported. getUtilityPerspective - Same as \"getPerspective\" but used for utility perspectives. Note Since this configuration module is used by both client and server, you must always check if exports is undefined before exporting.","title":"Configuration module"},{"location":"user-interface/perspective/#perspective_1","text":"Perspective with a default layout: <!DOCTYPE HTML> <!-- The app and controller name must be set at the topmost level --> < html lang = \"en\" ng-app = \"example\" ng-controller = \"ExamplePerspectiveController\" xmlns = \"http://www.w3.org/1999/xhtml\" > < head > < meta charset = \"utf-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > <!-- Title directive that will automatically create a title based on the perspective config --> < title config-title ></ title > <!-- Fake icon --> < link rel = \"icon\" sizes = \"any\" href = \"data:;base64,iVBORw0KGgo=\" /> <!-- Perspective config --> < script type = \"text/javascript\" src = \"/services/web/new-perspective/configs/perspective.js\" ></ script > <!-- Perspective services and styles --> < script type = \"text/javascript\" src = \"/services/js/platform-core/services/loader.js?id=perspective-js\" ></ script > < link type = \"text/css\" rel = \"stylesheet\" href = \"/services/js/platform-core/services/loader.js?id=perspective-css\" /> <!-- Perspective controller --> < script type = \"text/javascript\" src = \"js/perspective.js\" ></ script > </ head > < body > <!-- Default layout --> < layout config = \"::layoutConfig\" ></ layout > <!-- Theme support --> < theme ></ theme > </ body > </ html > const examplePerspective = angular . module ( 'example' , [ 'platformView' , 'platformLayout' , 'blimpKit' ]); // Initialize controller examplePerspective . controller ( 'ExamplePerspectiveController' , ( $scope ) => { $scope . layoutConfig = { // Array of view ids views : [ 'exampleViewLeft' , 'exampleViewBottom' , 'exampleViewCenter' ], viewSettings : { 'exampleViewLeft' : { expanded : true }, 'exampleViewCenter' : { closable : true }, }, layoutSettings : { hideCenterPane : false , leftPaneMinSize : 240 }, }; }); The layoutConfig will be used for creating the layout and populating it with views. views - This is an array that holds the IDs of the views that should be inside the layout. viewSettings - This is an object that you can use to set some view-specific settings by using the view ID as key. There are two settings available: expanded - If the view is positioned on the left or right side, it will have the ability to be expanded or collapsed. By default, the first one will be expanded. closable - If the view is positioned in the center of the layout, it will be closable by default. You can set this to false to stop the view from being closed. layoutSettings - Layout configuration hideCenterPane - The center pane is shown by default. If set to true, the bottom pane will be expanded to cover the center pane. hideCenterTabs - Center pane will be shown but the tab bar will be hidden. hideBottomTabs - Bottom pane will be shown but the tab bar will be hidden. leftPaneSize - Size the left pane in percentages. leftPaneMinSize - Minimum size of the left pane in pixels. leftPaneMaxSize - Maximum size of the left pane in pixels. rightPaneSize - Size the right pane in percentages. rightPaneMinSize - Minimum size of the right pane in pixels. rightPaneMaxSize - Maximum size of the left pane in pixels. bottomPaneSize - Size the bottom pane in percentages. Perspective with a custom layout: <!DOCTYPE html> <!-- The app and controller name must be set at the topmost level --> < html lang = \"en\" ng-app = \"example\" ng-controller = \"ExamplePerspectiveController\" xmlns = \"http://www.w3.org/1999/xhtml\" > < head > < meta charset = \"utf-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > <!-- Title directive that will automatically create a title based on the perspective config --> < title config-title ></ title > <!-- Fake icon --> < link rel = \"icon\" sizes = \"any\" href = \"data:;base64,iVBORw0KGgo=\" /> <!-- Perspective config --> < script type = \"text/javascript\" src = \"/services/web/new-perspective/configs/perspective.js\" ></ script > <!-- Base perspective services and styles --> < script type = \"text/javascript\" src = \"/services/js/platform-core/services/loader.js?id=perspective-js\" ></ script > < link type = \"text/css\" rel = \"stylesheet\" href = \"/services/js/platform-core/services/loader.js?id=perspective-css\" /> </ head > < body > <!-- Custom layout --> < split direction = \"horizontal\" > < split-pane size = \"50\" min-size = \"0\" snap-offset = \"100\" > < embedded-view view-id = \"exampleViewLeft\" ></ embedded-view > </ split-pane > < split-pane size = \"50\" min-size = \"0\" snap-offset = \"100\" > < embedded-view view-id = \"exampleViewRight\" ></ embedded-view > </ split-pane > </ split > <!-- Perspective controller. This can be a separate file, if the controller is too big. --> < script type = \"text/javascript\" > angular . module ( 'example' , [ 'platformView' , 'platformSplit' , 'blimpKit' ]) . controller ( 'ExamplePerspectiveController' , ( $scope ) => {}); </ script > <!-- Theme support --> < theme ></ theme > </ body > </ html > The project structure should look like this: new-perspective - extensions - perspective.extension - configs - perspective.js - js - perspective.js - perspective.html For a full example you can look at sample-platform .","title":"Perspective"},{"location":"user-interface/shell-hub/","text":"ShellHub Controls the shell. Extends MessageHub . Overview Module: platform-core Source: platform-core/ui/platform/shell-hub.js Web Link: /services/web/platform-core/ui/platform/shell-hub.js Status: stable Group: platform Basic Usage If you are using the standard Dirigible view configuration, shell hub support is automatically enabled. If you are making a custom view, you can include the API using the web link above. To initialize it: const shellHub = new ShellHub (); Functions Function Description Returns showPerspective(IdParamObject) Shows a perspective. - onShowPerspective(handlerFunc) Registers a listener. Triggered when a perspective should be shown. Returns a function to unregister the listener. function Typedefs IdParamObject : Object Note Params in square brackets are optional. IdParamObject : Object Properties Param Type Description id string Perspective id. [params] object Custom parameters. See ViewParameters . Example shellHub . openView ({ id : 'exampleView' , params : { title : 'Example' , } });","title":"ShellHub"},{"location":"user-interface/shell-hub/#shellhub","text":"Controls the shell. Extends MessageHub . Overview Module: platform-core Source: platform-core/ui/platform/shell-hub.js Web Link: /services/web/platform-core/ui/platform/shell-hub.js Status: stable Group: platform","title":"ShellHub"},{"location":"user-interface/shell-hub/#basic-usage","text":"If you are using the standard Dirigible view configuration, shell hub support is automatically enabled. If you are making a custom view, you can include the API using the web link above. To initialize it: const shellHub = new ShellHub ();","title":"Basic Usage"},{"location":"user-interface/shell-hub/#functions","text":"Function Description Returns showPerspective(IdParamObject) Shows a perspective. - onShowPerspective(handlerFunc) Registers a listener. Triggered when a perspective should be shown. Returns a function to unregister the listener. function","title":"Functions"},{"location":"user-interface/shell-hub/#typedefs","text":"IdParamObject : Object Note Params in square brackets are optional.","title":"Typedefs"},{"location":"user-interface/shell-hub/#idparamobject-object","text":"Properties Param Type Description id string Perspective id. [params] object Custom parameters. See ViewParameters .","title":"IdParamObject : Object"},{"location":"user-interface/shell-hub/#example","text":"shellHub . openView ({ id : 'exampleView' , params : { title : 'Example' , } });","title":"Example"},{"location":"user-interface/shell/","text":"Shell The shell is the topmost part of the Dirigible UI platform. It contains all the perspectives and views, and it acts as the centrilized event hub. Extension You can register a new shell using the platform-shells extension point. This file is usually put inside a folder named extensions , in the root of the project. Example: { \"module\" : \"new-shell/configs/shell.js\" , \"extensionPoint\" : \"platform-shells\" , \"description\" : \"Dirigible IDE Shell\" } Note The 'module' parameter above should point to a valid JavaScript configuration module. Configuration module In order to register a new shell in the platform, you must provide a valid configuration module. This file is usually put inside a folder named configs , in the root of the project. Example: const shellData = { id : 'exampleShell' , path : '/services/web/new-shell/shell.html' , label : 'Example Shell' }; if ( typeof exports !== 'undefined' ) { exports . getShell = () => shellData ; } shellData - This is the configuration object itself. It must be a const and it must always be called \"shellData\". id - Unique shell ID. path - Link to the shell html file. label - User-facing name. Used when listing all shells. getShell - The \"getShell\" function must return the configuration object and it must be exported. Note Since this configuration module is used by both client and server, you must always check if exports is undefined before exporting. Shell Example of a basic shell: <!DOCTYPE html> <!-- The app and controller name must be set at the topmost level --> < html lang = \"en\" ng-app = \"shell\" ng-controller = \"ShellController\" xmlns = \"http://www.w3.org/1999/xhtml\" > < head > < meta charset = \"utf-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > <!-- The brand-icon directive will automatically set the icon from the brand config --> < link brand-icon rel = \"icon\" href = \"data:;base64,iVBORw0KGgo=\" /> <!-- The brand-title directive will automatically set the title based on the currently selected perspective --> < title brand-title ></ title > <!-- Shell config. Place this before the shell services --> < script type = \"text/javascript\" src = \"/services/web/new-shell/configs/shell.js\" ></ script > <!-- Shell services and styles --> < script type = \"text/javascript\" src = \"/services/js/platform-core/services/loader.js?id=shell-js\" ></ script > < link type = \"text/css\" rel = \"stylesheet\" href = \"/services/js/platform-core/services/loader.js?id=shell-css\" /> </ head > < body > <!-- Shell header. Contains brand logo and title, menus, notification popover, user info, etc --> < shell-header ></ shell-header > <!-- Perspective container. It contains the sidebar and all registered perspectives --> < perspective-container condensed = \"false\" ></ perspective-container > <!-- Shell status bar. It contains a loading indicator, information strip, error strip and a selection label --> < status-bar ></ status-bar > <!-- Platform dialog functionality --> < dialogs ></ dialogs > <!-- Global context menu --> < context-menu ></ context-menu > <!-- Shell controller. This can be a separate file, if the controller is too big. --> < script type = \"text/javascript\" > angular . module ( 'shell' , [ 'platformShell' , 'blimpKit' ]) . controller ( 'ShellController' , ( $scope ) => { }); </ script > <!-- Theme support. This must always be placed last --> < theme ></ theme > </ body > </ html > Custom sidebar list You can manually set the perspective list. Just add config=\"sidebarConfig\" as an attribute the the perspective-container directive. < perspective-container condensed = \"false\" config = \"sidebarConfig\" ></ perspective-container > The following is an example sidebar config: $scope . sidebarConfig = { perspectives : [ { id : 'examplePerspectiveGroup' , label : 'Group' , expanded : true , icon : '/services/web/example-project/images/example.svg' , headerLabel : 'Group header' , items : [ { id : 'examplePerspective' , label : 'Example' , path : '/services/web/example-project/perspectives/perspective.html' , groupId : 'examplePerspectiveGroup' , icon : '/services/web/example-project/images/example.svg' } ] }, { id : 'examplePerspective2' , label : 'Example 2' , path : '/services/web/example-project/perspectives/custom-layout.html' , icon : '/services/web/example-project/images/example.svg' , headerLabel : 'Perspective header' } ], utilities : [ { id : 'exampleUtilityPerspective' , label : 'Utility' , path : '/services/web/example-project/perspectives/utility.html' , icon : '/services/web/example-project/images/example.svg' , } ] }; The project structure should look like this: new-shell - extensions - shell.extension - configs - shell.js - shell.html For a full example you can look at sample-platform .","title":"Shell"},{"location":"user-interface/shell/#shell","text":"The shell is the topmost part of the Dirigible UI platform. It contains all the perspectives and views, and it acts as the centrilized event hub.","title":"Shell"},{"location":"user-interface/shell/#extension","text":"You can register a new shell using the platform-shells extension point. This file is usually put inside a folder named extensions , in the root of the project. Example: { \"module\" : \"new-shell/configs/shell.js\" , \"extensionPoint\" : \"platform-shells\" , \"description\" : \"Dirigible IDE Shell\" } Note The 'module' parameter above should point to a valid JavaScript configuration module.","title":"Extension"},{"location":"user-interface/shell/#configuration-module","text":"In order to register a new shell in the platform, you must provide a valid configuration module. This file is usually put inside a folder named configs , in the root of the project. Example: const shellData = { id : 'exampleShell' , path : '/services/web/new-shell/shell.html' , label : 'Example Shell' }; if ( typeof exports !== 'undefined' ) { exports . getShell = () => shellData ; } shellData - This is the configuration object itself. It must be a const and it must always be called \"shellData\". id - Unique shell ID. path - Link to the shell html file. label - User-facing name. Used when listing all shells. getShell - The \"getShell\" function must return the configuration object and it must be exported. Note Since this configuration module is used by both client and server, you must always check if exports is undefined before exporting.","title":"Configuration module"},{"location":"user-interface/shell/#shell_1","text":"Example of a basic shell: <!DOCTYPE html> <!-- The app and controller name must be set at the topmost level --> < html lang = \"en\" ng-app = \"shell\" ng-controller = \"ShellController\" xmlns = \"http://www.w3.org/1999/xhtml\" > < head > < meta charset = \"utf-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > <!-- The brand-icon directive will automatically set the icon from the brand config --> < link brand-icon rel = \"icon\" href = \"data:;base64,iVBORw0KGgo=\" /> <!-- The brand-title directive will automatically set the title based on the currently selected perspective --> < title brand-title ></ title > <!-- Shell config. Place this before the shell services --> < script type = \"text/javascript\" src = \"/services/web/new-shell/configs/shell.js\" ></ script > <!-- Shell services and styles --> < script type = \"text/javascript\" src = \"/services/js/platform-core/services/loader.js?id=shell-js\" ></ script > < link type = \"text/css\" rel = \"stylesheet\" href = \"/services/js/platform-core/services/loader.js?id=shell-css\" /> </ head > < body > <!-- Shell header. Contains brand logo and title, menus, notification popover, user info, etc --> < shell-header ></ shell-header > <!-- Perspective container. It contains the sidebar and all registered perspectives --> < perspective-container condensed = \"false\" ></ perspective-container > <!-- Shell status bar. It contains a loading indicator, information strip, error strip and a selection label --> < status-bar ></ status-bar > <!-- Platform dialog functionality --> < dialogs ></ dialogs > <!-- Global context menu --> < context-menu ></ context-menu > <!-- Shell controller. This can be a separate file, if the controller is too big. --> < script type = \"text/javascript\" > angular . module ( 'shell' , [ 'platformShell' , 'blimpKit' ]) . controller ( 'ShellController' , ( $scope ) => { }); </ script > <!-- Theme support. This must always be placed last --> < theme ></ theme > </ body > </ html >","title":"Shell"},{"location":"user-interface/shell/#custom-sidebar-list","text":"You can manually set the perspective list. Just add config=\"sidebarConfig\" as an attribute the the perspective-container directive. < perspective-container condensed = \"false\" config = \"sidebarConfig\" ></ perspective-container > The following is an example sidebar config: $scope . sidebarConfig = { perspectives : [ { id : 'examplePerspectiveGroup' , label : 'Group' , expanded : true , icon : '/services/web/example-project/images/example.svg' , headerLabel : 'Group header' , items : [ { id : 'examplePerspective' , label : 'Example' , path : '/services/web/example-project/perspectives/perspective.html' , groupId : 'examplePerspectiveGroup' , icon : '/services/web/example-project/images/example.svg' } ] }, { id : 'examplePerspective2' , label : 'Example 2' , path : '/services/web/example-project/perspectives/custom-layout.html' , icon : '/services/web/example-project/images/example.svg' , headerLabel : 'Perspective header' } ], utilities : [ { id : 'exampleUtilityPerspective' , label : 'Utility' , path : '/services/web/example-project/perspectives/utility.html' , icon : '/services/web/example-project/images/example.svg' , } ] }; The project structure should look like this: new-shell - extensions - shell.extension - configs - shell.js - shell.html For a full example you can look at sample-platform .","title":"Custom sidebar list"},{"location":"user-interface/shortcuts/","text":"Shortcuts Directive used to assign keyboard shortcuts to a vew or to a specific element. Overview Module: platform-core Source: platform-core/ui/platform/shortcuts.js Web Link: /services/web/platform-core/ui/platform/shortcuts.js Status: stable Group: platform Basic Usage If you are using the standard Dirigible view configuration, shortcuts support is included automatically but not enabled. If you are making a custom view, you can include the API using the web link above. To enable it, add it to your app module: const exampleView = angular . module ( 'exampleView' , [ ... 'platformShortcuts' , ]); Directive options shortcut - String containing the shortcut or shortcuts. There can be multiple shortcuts for a single action. You can separate the shortcuts using '|'. shortcut-action - The name of the function that will get called. It has two parameters: keySet - The keyboard shortcut activated. event - The JavaScript key event. shortcut-desc - Description of the shortcut(s). ignore-inputs - If this attribute is present, then events from 'input' and 'textarea' controls will be ignored. separate-ctrl - On macOS, by default, the ctrl key is replaced with the meta (cmd) key, so shortcuts like 'Ctrl+S' are automatically translated to 'Cmd+S'. If you want the ctrl key to match the ctrl and be separate from the meta on a mac, then use this attribute. Example < div shortcut = \"'ctrl+s|ctrl+k'\" shortcut-action = \"saveShortcut\" ignore-inputs separate-ctrl > $scope . saveShortcut = ( keySet , event ) => { event . preventDefault (); if ( keySet === 'ctrl+s' ) { // save } else if ( keySet === 'ctrl+k' ) { // do something } };","title":"Shortcuts"},{"location":"user-interface/shortcuts/#shortcuts","text":"Directive used to assign keyboard shortcuts to a vew or to a specific element. Overview Module: platform-core Source: platform-core/ui/platform/shortcuts.js Web Link: /services/web/platform-core/ui/platform/shortcuts.js Status: stable Group: platform","title":"Shortcuts"},{"location":"user-interface/shortcuts/#basic-usage","text":"If you are using the standard Dirigible view configuration, shortcuts support is included automatically but not enabled. If you are making a custom view, you can include the API using the web link above. To enable it, add it to your app module: const exampleView = angular . module ( 'exampleView' , [ ... 'platformShortcuts' , ]);","title":"Basic Usage"},{"location":"user-interface/shortcuts/#directive-options","text":"shortcut - String containing the shortcut or shortcuts. There can be multiple shortcuts for a single action. You can separate the shortcuts using '|'. shortcut-action - The name of the function that will get called. It has two parameters: keySet - The keyboard shortcut activated. event - The JavaScript key event. shortcut-desc - Description of the shortcut(s). ignore-inputs - If this attribute is present, then events from 'input' and 'textarea' controls will be ignored. separate-ctrl - On macOS, by default, the ctrl key is replaced with the meta (cmd) key, so shortcuts like 'Ctrl+S' are automatically translated to 'Cmd+S'. If you want the ctrl key to match the ctrl and be separate from the meta on a mac, then use this attribute.","title":"Directive options"},{"location":"user-interface/shortcuts/#example","text":"< div shortcut = \"'ctrl+s|ctrl+k'\" shortcut-action = \"saveShortcut\" ignore-inputs separate-ctrl > $scope . saveShortcut = ( keySet , event ) => { event . preventDefault (); if ( keySet === 'ctrl+s' ) { // save } else if ( keySet === 'ctrl+k' ) { // do something } };","title":"Example"},{"location":"user-interface/status-bar/","text":"Status Bar Used to control the status bar. Extends MessageHub . Overview Module: platform-core Source: platform-core/ui/platform/status-bar-hub.js Web Link: /services/web/platform-core/ui/platform/status-bar-hub.js Status: stable Group: platform Basic Usage If you are using the standard Dirigible view configuration, status bar support is enabled automatically. If you are making a custom view, you can include the API using the web link above. To initialize it, place this in your code: const statusBarHub = new StatusBarHub (); Functions Function Description Returns showMessage(message) Shows an informational message strip. - onMessage(handlerFunc) Registers a listener. Triggered when an informational message should be shown. Returns a function to unregister the listener. function showError(message) Shows an error message strip. - onError(handlerFunc) Registers a listener. Triggered when an error message should be shown. Returns a function to unregister the listener. function showLabel(message) Shows an short message at the end of the status bar. - onLabel(handlerFunc) Registers a listener. Triggered when a short message should be shown. Returns a function to unregister the listener. function showBusy(message) Shows a busy indicator with message. - hideBusy() Hides the busy indicator. - onBusy(handlerFunc) Registers a listener. Triggered when a busy indicator should be shown. Returns a function to unregister the listener. function Example statusBarHub . showMessage ( 'Some message' ); For a full example you can look at sample-platform .","title":"Status Bar"},{"location":"user-interface/status-bar/#status-bar","text":"Used to control the status bar. Extends MessageHub . Overview Module: platform-core Source: platform-core/ui/platform/status-bar-hub.js Web Link: /services/web/platform-core/ui/platform/status-bar-hub.js Status: stable Group: platform","title":"Status Bar"},{"location":"user-interface/status-bar/#basic-usage","text":"If you are using the standard Dirigible view configuration, status bar support is enabled automatically. If you are making a custom view, you can include the API using the web link above. To initialize it, place this in your code: const statusBarHub = new StatusBarHub ();","title":"Basic Usage"},{"location":"user-interface/status-bar/#functions","text":"Function Description Returns showMessage(message) Shows an informational message strip. - onMessage(handlerFunc) Registers a listener. Triggered when an informational message should be shown. Returns a function to unregister the listener. function showError(message) Shows an error message strip. - onError(handlerFunc) Registers a listener. Triggered when an error message should be shown. Returns a function to unregister the listener. function showLabel(message) Shows an short message at the end of the status bar. - onLabel(handlerFunc) Registers a listener. Triggered when a short message should be shown. Returns a function to unregister the listener. function showBusy(message) Shows a busy indicator with message. - hideBusy() Hides the busy indicator. - onBusy(handlerFunc) Registers a listener. Triggered when a busy indicator should be shown. Returns a function to unregister the listener. function","title":"Functions"},{"location":"user-interface/status-bar/#example","text":"statusBarHub . showMessage ( 'Some message' ); For a full example you can look at sample-platform .","title":"Example"},{"location":"user-interface/subview/","text":"Subview Subviews are views that are meant to be embedded inside other views. Extension You can register a new subview using the platform-subviews extension point. This file is usually put inside a folder named extensions , in the root of the project. Example: { \"module\" : \"new-subview/configs/subview.js\" , \"extensionPoint\" : \"platform-subviews\" , \"description\" : \"Example subview\" } Note The 'module' parameter above should point to a valid JavaScript configuration module. Configuration module In order to register a new subview in the platform, you must provide a valid configuration module. This file is usually put inside a folder named configs , in the root of the project. Example: const viewData = { id : 'exampleSubview' , label : 'Subview example' , path : '/services/web/new-subview/subview.html' , lazyLoad : false , }; if ( typeof exports !== 'undefined' ) { exports . getView = () => viewData ; } viewData - This is the configuration object itself. It must be a const and it must always be called \"viewData\". id - Unique view ID. path - Link to the subview html file. label - User-facing name. Shown when listing available subviews. lazyLoad - When set to true, the view will load only when it becomes visible to the user. getView - This function must return the configuration object and it must be exported. Note Since this configuration module is used by both client and server, you must always check if exports is undefined before exporting. Subview <!DOCTYPE HTML> < html lang = \"en\" xmlns = \"http://www.w3.org/1999/xhtml\" ng-app = \"exampleSubview\" ng-controller = \"ExampleSubviewController\" > < head > < meta charset = \"utf-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > <!-- Fake icon --> < link rel = \"icon\" sizes = \"any\" href = \"data:;base64,iVBORw0KGgo=\" > <!-- Title directive that will automatically create a title based on the subview config --> < title config-title ></ title > <!-- Subview configuration module --> < script type = \"text/javascript\" src = \"/services/web/new-subview/configs/subview.js\" ></ script > <!-- Base view services and styles --> < script type = \"text/javascript\" src = \"/services/js/platform-core/services/loader.js?id=view-js\" ></ script > < link type = \"text/css\" rel = \"stylesheet\" href = \"/services/js/platform-core/services/loader.js?id=view-css\" /> </ head > < body > < bk-message-page glyph = \"sap-icon--information\" > < bk-message-page-title > {{::title}} </ bk-message-page-title > < bk-message-page-subtitle > {{::subtitle}} </ bk-message-page-subtitle > </ bk-message-page > <!-- View controller --> < script type = \"text/javascript\" > const exampleSubview = angular . module ( 'exampleSubview' , [ 'blimpKit' , 'platformView' ]); exampleSubview . controller ( 'ExampleSubviewController' , ( $scope ) => { $scope . title = 'Example subview' ; $scope . subtitle = `Lorem ipsum...` ; }); </ script > <!-- Theme support. This must always be placed last --> < theme ></ theme > </ body > </ html > The project structure should look like this: new-subview - extensions - subview.extension - configs - subview.js - subview.html For a full example you can look at sample-platform .","title":"Subview"},{"location":"user-interface/subview/#subview","text":"Subviews are views that are meant to be embedded inside other views.","title":"Subview"},{"location":"user-interface/subview/#extension","text":"You can register a new subview using the platform-subviews extension point. This file is usually put inside a folder named extensions , in the root of the project. Example: { \"module\" : \"new-subview/configs/subview.js\" , \"extensionPoint\" : \"platform-subviews\" , \"description\" : \"Example subview\" } Note The 'module' parameter above should point to a valid JavaScript configuration module.","title":"Extension"},{"location":"user-interface/subview/#configuration-module","text":"In order to register a new subview in the platform, you must provide a valid configuration module. This file is usually put inside a folder named configs , in the root of the project. Example: const viewData = { id : 'exampleSubview' , label : 'Subview example' , path : '/services/web/new-subview/subview.html' , lazyLoad : false , }; if ( typeof exports !== 'undefined' ) { exports . getView = () => viewData ; } viewData - This is the configuration object itself. It must be a const and it must always be called \"viewData\". id - Unique view ID. path - Link to the subview html file. label - User-facing name. Shown when listing available subviews. lazyLoad - When set to true, the view will load only when it becomes visible to the user. getView - This function must return the configuration object and it must be exported. Note Since this configuration module is used by both client and server, you must always check if exports is undefined before exporting.","title":"Configuration module"},{"location":"user-interface/subview/#subview_1","text":"<!DOCTYPE HTML> < html lang = \"en\" xmlns = \"http://www.w3.org/1999/xhtml\" ng-app = \"exampleSubview\" ng-controller = \"ExampleSubviewController\" > < head > < meta charset = \"utf-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > <!-- Fake icon --> < link rel = \"icon\" sizes = \"any\" href = \"data:;base64,iVBORw0KGgo=\" > <!-- Title directive that will automatically create a title based on the subview config --> < title config-title ></ title > <!-- Subview configuration module --> < script type = \"text/javascript\" src = \"/services/web/new-subview/configs/subview.js\" ></ script > <!-- Base view services and styles --> < script type = \"text/javascript\" src = \"/services/js/platform-core/services/loader.js?id=view-js\" ></ script > < link type = \"text/css\" rel = \"stylesheet\" href = \"/services/js/platform-core/services/loader.js?id=view-css\" /> </ head > < body > < bk-message-page glyph = \"sap-icon--information\" > < bk-message-page-title > {{::title}} </ bk-message-page-title > < bk-message-page-subtitle > {{::subtitle}} </ bk-message-page-subtitle > </ bk-message-page > <!-- View controller --> < script type = \"text/javascript\" > const exampleSubview = angular . module ( 'exampleSubview' , [ 'blimpKit' , 'platformView' ]); exampleSubview . controller ( 'ExampleSubviewController' , ( $scope ) => { $scope . title = 'Example subview' ; $scope . subtitle = `Lorem ipsum...` ; }); </ script > <!-- Theme support. This must always be placed last --> < theme ></ theme > </ body > </ html > The project structure should look like this: new-subview - extensions - subview.extension - configs - subview.js - subview.html For a full example you can look at sample-platform .","title":"Subview"},{"location":"user-interface/themes/","text":"Themes Eclipse Dirigible uses the default BlimpKit theme and it also has a classic theme, based on the SAP Fiori design. Both themes can be found in the BlimpKit repository. The ThemingHub API is used to get/set the currect theme and listen for theme changes. Extends MessageHub . Overview Module: platform-core Source: platform-core/ui/platform/theming-hub.js Web Link: /services/web/platform-core/ui/platform/theming-hub.js Status: stable Group: platform Extension You can register a new theme using the platform-themes extension point. This file is usually put inside a folder named extensions , in the root of the project. Example: { \"module\" : \"new-theme/configs/theme-light.js\" , \"extensionPoint\" : \"platform-themes\" , \"description\" : \"Example Theme\" } Note The 'module' parameter above should point to a valid JavaScript configuration module. Configuration module In order to register a new theme in the platform, you must provide a valid configuration module. This file is usually put inside a folder named configs , in the root of the project. Example: exports . getTheme = () => ({ id : 'example-theme' , name : 'Example Theme' , type : 'light' , version : 1 , links : [ '/services/web/new-theme/css/new-theme-variables.css' , '/services/web/new-theme/css/new-theme.css' , ] }); getTheme - This function must return the configuration object and it must be exported. id - Unique theme ID. name - User-facing name. type - There are three types of themes - light, dark and auto. version - Theme version. links - List containing the URL path to the theme files. The project structure should look like this: new-theme - extensions - theme.extension - configs - theme.js - css - new-theme-variables.css - new-theme.css Basic Usage If you are using the standard Dirigible view configuration, theme support is initialized automatically by setting <theme></theme> tag at the end of the view body. If you are making a custom view, you can include the API using the web link above. To initialize it, place this in your code: const themingHub = new ThemingHub (); Functions Function Description Returns getSavedTheme() Returns the current theme configuration object setSavedTheme(theme) Sets a theme configuration object onThemesLoaded(handlerFunc) Registers a listener. Triggered when all themes are loaded. Returns a function to unregister the listener. function themesLoaded() Triggers an event for onThemesLoaded - onThemeChange(handlerFunc) Registers a theme change listener. Returns a function to unregister the listener. function themeChanged(ThemeChange) Triggers an event for onThemeChange - Typedefs Note Params in square brackets are optional. ThemeChange : Object Param Type Description id string ID of the theme. type 'light' | 'dark' | 'auto' Type of the theme. links Array.<string> Links to the theme css files. Example let currentTheme ; const themesLoadedListener = themingHub . onThemesLoaded (() => { currentTheme = themingHub . getSavedTheme ()); themingHub . removeMessageListener ( themesLoadedListener ) });","title":"Themes"},{"location":"user-interface/themes/#themes","text":"Eclipse Dirigible uses the default BlimpKit theme and it also has a classic theme, based on the SAP Fiori design. Both themes can be found in the BlimpKit repository. The ThemingHub API is used to get/set the currect theme and listen for theme changes. Extends MessageHub . Overview Module: platform-core Source: platform-core/ui/platform/theming-hub.js Web Link: /services/web/platform-core/ui/platform/theming-hub.js Status: stable Group: platform","title":"Themes"},{"location":"user-interface/themes/#extension","text":"You can register a new theme using the platform-themes extension point. This file is usually put inside a folder named extensions , in the root of the project. Example: { \"module\" : \"new-theme/configs/theme-light.js\" , \"extensionPoint\" : \"platform-themes\" , \"description\" : \"Example Theme\" } Note The 'module' parameter above should point to a valid JavaScript configuration module.","title":"Extension"},{"location":"user-interface/themes/#configuration-module","text":"In order to register a new theme in the platform, you must provide a valid configuration module. This file is usually put inside a folder named configs , in the root of the project. Example: exports . getTheme = () => ({ id : 'example-theme' , name : 'Example Theme' , type : 'light' , version : 1 , links : [ '/services/web/new-theme/css/new-theme-variables.css' , '/services/web/new-theme/css/new-theme.css' , ] }); getTheme - This function must return the configuration object and it must be exported. id - Unique theme ID. name - User-facing name. type - There are three types of themes - light, dark and auto. version - Theme version. links - List containing the URL path to the theme files. The project structure should look like this: new-theme - extensions - theme.extension - configs - theme.js - css - new-theme-variables.css - new-theme.css","title":"Configuration module"},{"location":"user-interface/themes/#basic-usage","text":"If you are using the standard Dirigible view configuration, theme support is initialized automatically by setting <theme></theme> tag at the end of the view body. If you are making a custom view, you can include the API using the web link above. To initialize it, place this in your code: const themingHub = new ThemingHub ();","title":"Basic Usage"},{"location":"user-interface/themes/#functions","text":"Function Description Returns getSavedTheme() Returns the current theme configuration object setSavedTheme(theme) Sets a theme configuration object onThemesLoaded(handlerFunc) Registers a listener. Triggered when all themes are loaded. Returns a function to unregister the listener. function themesLoaded() Triggers an event for onThemesLoaded - onThemeChange(handlerFunc) Registers a theme change listener. Returns a function to unregister the listener. function themeChanged(ThemeChange) Triggers an event for onThemeChange -","title":"Functions"},{"location":"user-interface/themes/#typedefs","text":"Note Params in square brackets are optional.","title":"Typedefs"},{"location":"user-interface/themes/#themechange-object","text":"Param Type Description id string ID of the theme. type 'light' | 'dark' | 'auto' Type of the theme. links Array.<string> Links to the theme css files.","title":"ThemeChange : Object"},{"location":"user-interface/themes/#example","text":"let currentTheme ; const themesLoadedListener = themingHub . onThemesLoaded (() => { currentTheme = themingHub . getSavedTheme ()); themingHub . removeMessageListener ( themesLoadedListener ) });","title":"Example"},{"location":"user-interface/ui-components/","text":"UI Components Dirigible uses the BlimpKit UI Component library. You can find the documentation here .","title":"UI Components"},{"location":"user-interface/ui-components/#ui-components","text":"Dirigible uses the BlimpKit UI Component library. You can find the documentation here .","title":"UI Components"},{"location":"user-interface/view/","text":"View Views are the most important part of the Dirigible UI platform. Views can be displayed inside layouts, perspectives , dialogs and even outside the Dirigible shell as standalone web apps. Extension You can register a new view using the platform-views extension point. This file is usually put inside a folder named extensions , in the root of the project. Example: { \"module\" : \"new-view/configs/view.js\" , \"extensionPoint\" : \"platform-views\" , \"description\" : \"Example view\" } Note The 'module' parameter above should point to a valid JavaScript configuration module. Configuration module In order to register a new view in the platform, you must provide a valid configuration module. This file is usually put inside a folder named configs , in the root of the project. Example: const viewData = { id : 'exampleView' , label : 'New view' , region : 'center' , path : '/services/web/new-view/view.html' , lazyLoad : true , autoFocusTab : true , }; if ( typeof exports !== 'undefined' ) { exports . getView = () => viewData ; } viewData - This is the configuration object itself. It must be a const and it must always be called \"viewData\". id - Unique view ID. path - Link to the view html file. label - User-facing name. Shown in the tab. region - The layout region in which the view should be shown. There are four options: left right center bottom lazyLoad - When set to true, the view will load only when it becomes visible to the user. autoFocusTab - If true, the view will automatically send a focus request to the layout to focus its tab. Center and bottom views should have this enabled. getView - This function must return the configuration object and it must be exported. Note Since this configuration module is used by both client and server, you must always check if exports is undefined before exporting. View <!DOCTYPE HTML> <!-- The app and controller name must be set at the topmost level --> < html lang = \"en\" xmlns = \"http://www.w3.org/1999/xhtml\" ng-app = \"exampleView\" ng-controller = \"ExampleViewController\" > < head > < meta charset = \"utf-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > <!-- Fake icon --> < link rel = \"icon\" sizes = \"any\" href = \"data:;base64,iVBORw0KGgo=\" > <!-- Title directive that will automatically create a title based on the view config --> < title config-title ></ title > <!-- View configuration module --> < script type = \"text/javascript\" src = \"/services/web/new-view/configs/view.js\" ></ script > <!-- View services and styles --> < script type = \"text/javascript\" src = \"/services/js/platform-core/services/loader.js?id=view-js\" ></ script > < link type = \"text/css\" rel = \"stylesheet\" href = \"/services/js/platform-core/services/loader.js?id=view-css\" /> <!-- View controller --> < script type = \"text/javascript\" src = \"js/view.js\" ></ script > </ head > < body > < bk-message-page glyph = \"sap-icon--information\" > < bk-message-page-title > {{::title}} </ bk-message-page-title > < bk-message-page-subtitle > {{::subtitle}} </ bk-message-page-subtitle > </ bk-message-page > <!-- Theme support. This must always be placed last --> < theme ></ theme > </ body > </ html > const exampleView = angular . module ( 'exampleView' , [ 'blimpKit' , 'platformView' ]); // Initialize controller exampleView . controller ( 'ExampleViewController' , ( $scope ) => { $scope . title = 'Example view' ; $scope . subtitle = `Lorem ipsum...` ; }); The project structure should look like this: new-view - extensions - view.extension - configs - view.js - js - view.js - view.html For a full example you can look at sample-platform .","title":"View"},{"location":"user-interface/view/#view","text":"Views are the most important part of the Dirigible UI platform. Views can be displayed inside layouts, perspectives , dialogs and even outside the Dirigible shell as standalone web apps.","title":"View"},{"location":"user-interface/view/#extension","text":"You can register a new view using the platform-views extension point. This file is usually put inside a folder named extensions , in the root of the project. Example: { \"module\" : \"new-view/configs/view.js\" , \"extensionPoint\" : \"platform-views\" , \"description\" : \"Example view\" } Note The 'module' parameter above should point to a valid JavaScript configuration module.","title":"Extension"},{"location":"user-interface/view/#configuration-module","text":"In order to register a new view in the platform, you must provide a valid configuration module. This file is usually put inside a folder named configs , in the root of the project. Example: const viewData = { id : 'exampleView' , label : 'New view' , region : 'center' , path : '/services/web/new-view/view.html' , lazyLoad : true , autoFocusTab : true , }; if ( typeof exports !== 'undefined' ) { exports . getView = () => viewData ; } viewData - This is the configuration object itself. It must be a const and it must always be called \"viewData\". id - Unique view ID. path - Link to the view html file. label - User-facing name. Shown in the tab. region - The layout region in which the view should be shown. There are four options: left right center bottom lazyLoad - When set to true, the view will load only when it becomes visible to the user. autoFocusTab - If true, the view will automatically send a focus request to the layout to focus its tab. Center and bottom views should have this enabled. getView - This function must return the configuration object and it must be exported. Note Since this configuration module is used by both client and server, you must always check if exports is undefined before exporting.","title":"Configuration module"},{"location":"user-interface/view/#view_1","text":"<!DOCTYPE HTML> <!-- The app and controller name must be set at the topmost level --> < html lang = \"en\" xmlns = \"http://www.w3.org/1999/xhtml\" ng-app = \"exampleView\" ng-controller = \"ExampleViewController\" > < head > < meta charset = \"utf-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > <!-- Fake icon --> < link rel = \"icon\" sizes = \"any\" href = \"data:;base64,iVBORw0KGgo=\" > <!-- Title directive that will automatically create a title based on the view config --> < title config-title ></ title > <!-- View configuration module --> < script type = \"text/javascript\" src = \"/services/web/new-view/configs/view.js\" ></ script > <!-- View services and styles --> < script type = \"text/javascript\" src = \"/services/js/platform-core/services/loader.js?id=view-js\" ></ script > < link type = \"text/css\" rel = \"stylesheet\" href = \"/services/js/platform-core/services/loader.js?id=view-css\" /> <!-- View controller --> < script type = \"text/javascript\" src = \"js/view.js\" ></ script > </ head > < body > < bk-message-page glyph = \"sap-icon--information\" > < bk-message-page-title > {{::title}} </ bk-message-page-title > < bk-message-page-subtitle > {{::subtitle}} </ bk-message-page-subtitle > </ bk-message-page > <!-- Theme support. This must always be placed last --> < theme ></ theme > </ body > </ html > const exampleView = angular . module ( 'exampleView' , [ 'blimpKit' , 'platformView' ]); // Initialize controller exampleView . controller ( 'ExampleViewController' , ( $scope ) => { $scope . title = 'Example view' ; $scope . subtitle = `Lorem ipsum...` ; }); The project structure should look like this: new-view - extensions - view.extension - configs - view.js - js - view.js - view.html For a full example you can look at sample-platform .","title":"View"},{"location":"user-interface/viewParameters/","text":"ViewParameters In Dirigible all Views , Subviews , Editors , Windows and Perspectives have parameters assigned to them using the data-parameter attribute. ViewParameters is used to get and parse those parameters to a JavaScript object. Overview Module: platform-core Source: platform-core/ui/platform/view.js Web Link: /services/web/platform-core/ui/platform/view.js Status: stable Group: platform Basic Usage If you are using the standard Dirigible view configuration, ViewParameters support is enabled automatically. To initialize it, place this in your code: exampleView . controller ( 'ExampleViewController' , ( $scope , ViewParameters ) => {...}); If you are making a custom view, you can manually get the parameters: let dataParameters ; if ( window . frameElement && window . frameElement . hasAttribute ( 'data-parameters' )) { dataParameters = JSON . parse ( $window . frameElement . getAttribute ( 'data-parameters' )); } Functions Function Description Returns get() Returns all view parameters. Promise Example let dataParameters = ViewParameters . get ();","title":"ViewParameters"},{"location":"user-interface/viewParameters/#viewparameters","text":"In Dirigible all Views , Subviews , Editors , Windows and Perspectives have parameters assigned to them using the data-parameter attribute. ViewParameters is used to get and parse those parameters to a JavaScript object. Overview Module: platform-core Source: platform-core/ui/platform/view.js Web Link: /services/web/platform-core/ui/platform/view.js Status: stable Group: platform","title":"ViewParameters"},{"location":"user-interface/viewParameters/#basic-usage","text":"If you are using the standard Dirigible view configuration, ViewParameters support is enabled automatically. To initialize it, place this in your code: exampleView . controller ( 'ExampleViewController' , ( $scope , ViewParameters ) => {...}); If you are making a custom view, you can manually get the parameters: let dataParameters ; if ( window . frameElement && window . frameElement . hasAttribute ( 'data-parameters' )) { dataParameters = JSON . parse ( $window . frameElement . getAttribute ( 'data-parameters' )); }","title":"Basic Usage"},{"location":"user-interface/viewParameters/#functions","text":"Function Description Returns get() Returns all view parameters. Promise","title":"Functions"},{"location":"user-interface/viewParameters/#example","text":"let dataParameters = ViewParameters . get ();","title":"Example"},{"location":"user-interface/window/","text":"Window Windows are views that are opened inside a dialog window. API DialogHub Extension You can register a new window using the platform-windows extension point. This file is usually put inside a folder named extensions , in the root of the project. Example: { \"module\" : \"new-window/configs/window.js\" , \"extensionPoint\" : \"platform-windows\" , \"description\" : \"Window view\" } Note The 'module' parameter above should point to a valid JavaScript configuration module. Configuration module In order to register a new window in the platform, you must provide a valid configuration module. This file is usually put inside a folder named configs , in the root of the project. Example: const viewData = { id : 'exampleWindow' , label : 'Example window' , path : '/services/web/new-window/window.html' , }; if ( typeof exports !== 'undefined' ) { exports . getView = () => viewData ; } viewData - This is the configuration object itself. It must be a const and it must always be called \"viewData\". id - Unique window ID. path - Link to the window html file. label - User-facing name. Shown in the header of the dialog window. getView - This function must return the configuration object and it must be exported. Note Since this configuration module is used by both client and server, you must always check if exports is undefined before exporting. Window <!DOCTYPE HTML> < html lang = \"en\" xmlns = \"http://www.w3.org/1999/xhtml\" ng-app = \"exampleWindow\" ng-controller = \"ExampleWindowController\" > < head > < meta charset = \"utf-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > <!-- Fake icon --> < link rel = \"icon\" sizes = \"any\" href = \"data:;base64,iVBORw0KGgo=\" > <!-- Title directive that will automatically create a title based on the window config --> < title config-title ></ title > <!-- Window configuration module --> < script type = \"text/javascript\" src = \"/services/web/new-window/configs/window.js\" ></ script > <!-- Base view services and styles --> < script type = \"text/javascript\" src = \"/services/js/platform-core/services/loader.js?id=view-js\" ></ script > < link type = \"text/css\" rel = \"stylesheet\" href = \"/services/js/platform-core/services/loader.js?id=view-css\" /> </ head > < body > < bk-message-page glyph = \"sap-icon--information\" > < bk-message-page-title > {{::title}} </ bk-message-page-title > < bk-message-page-subtitle > {{::subtitle}} </ bk-message-page-subtitle > </ bk-message-page > <!-- Window controller --> < script type = \"text/javascript\" > const exampleWindow = angular . module ( 'exampleWindow' , [ 'blimpKit' , 'platformView' ]); exampleWindow . controller ( 'ExampleWindowController' , ( $scope ) => { $scope . title = 'Example window' ; $scope . subtitle = `Lorem ipsum...` ; }); </ script > <!-- Theme support. This must always be placed last --> < theme ></ theme > </ body > </ html > The project structure should look like this: new-window - extensions - window.extension - configs - window.js - window.html For a full example you can look at sample-platform .","title":"Window"},{"location":"user-interface/window/#window","text":"Windows are views that are opened inside a dialog window.","title":"Window"},{"location":"user-interface/window/#api","text":"DialogHub","title":"API"},{"location":"user-interface/window/#extension","text":"You can register a new window using the platform-windows extension point. This file is usually put inside a folder named extensions , in the root of the project. Example: { \"module\" : \"new-window/configs/window.js\" , \"extensionPoint\" : \"platform-windows\" , \"description\" : \"Window view\" } Note The 'module' parameter above should point to a valid JavaScript configuration module.","title":"Extension"},{"location":"user-interface/window/#configuration-module","text":"In order to register a new window in the platform, you must provide a valid configuration module. This file is usually put inside a folder named configs , in the root of the project. Example: const viewData = { id : 'exampleWindow' , label : 'Example window' , path : '/services/web/new-window/window.html' , }; if ( typeof exports !== 'undefined' ) { exports . getView = () => viewData ; } viewData - This is the configuration object itself. It must be a const and it must always be called \"viewData\". id - Unique window ID. path - Link to the window html file. label - User-facing name. Shown in the header of the dialog window. getView - This function must return the configuration object and it must be exported. Note Since this configuration module is used by both client and server, you must always check if exports is undefined before exporting.","title":"Configuration module"},{"location":"user-interface/window/#window_1","text":"<!DOCTYPE HTML> < html lang = \"en\" xmlns = \"http://www.w3.org/1999/xhtml\" ng-app = \"exampleWindow\" ng-controller = \"ExampleWindowController\" > < head > < meta charset = \"utf-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > <!-- Fake icon --> < link rel = \"icon\" sizes = \"any\" href = \"data:;base64,iVBORw0KGgo=\" > <!-- Title directive that will automatically create a title based on the window config --> < title config-title ></ title > <!-- Window configuration module --> < script type = \"text/javascript\" src = \"/services/web/new-window/configs/window.js\" ></ script > <!-- Base view services and styles --> < script type = \"text/javascript\" src = \"/services/js/platform-core/services/loader.js?id=view-js\" ></ script > < link type = \"text/css\" rel = \"stylesheet\" href = \"/services/js/platform-core/services/loader.js?id=view-css\" /> </ head > < body > < bk-message-page glyph = \"sap-icon--information\" > < bk-message-page-title > {{::title}} </ bk-message-page-title > < bk-message-page-subtitle > {{::subtitle}} </ bk-message-page-subtitle > </ bk-message-page > <!-- Window controller --> < script type = \"text/javascript\" > const exampleWindow = angular . module ( 'exampleWindow' , [ 'blimpKit' , 'platformView' ]); exampleWindow . controller ( 'ExampleWindowController' , ( $scope ) => { $scope . title = 'Example window' ; $scope . subtitle = `Lorem ipsum...` ; }); </ script > <!-- Theme support. This must always be placed last --> < theme ></ theme > </ body > </ html > The project structure should look like this: new-window - extensions - window.extension - configs - window.js - window.html For a full example you can look at sample-platform .","title":"Window"},{"location":"utils/alphanumeric/","text":"Alphanumeric Alphanumeric object is used to check whether a given string is alpha-numeric and to generate random strings. Overview Module: utils/alphanumeric Definition: N/A Source: /utils/alphanumeric.js Status: stable Group: core Basic Usage ECMA6 import { alphanumeric } from \"sdk/utils\" ; import { response } from \"sdk/http\" ; response . println ( alphanumeric . toAlphanumeric ( \"@mystring123!#=\" )); response . flush (); response . close (); Functions Function Description Returns toAlphanumeric(input) Remove non-alpha-numeric letters string randomString(length, charset) Generates alpha-numeric string in a given charset and with given length string alphanumeric(length, lowercase) Generates alpha-numeric string string alpha(length, lowercase) Generates alpha string string numeric(length) Generates alpha-numeric string string isNumeric(input) Checks is the input is a numeric string string isAlphanumeric(input) Checks is the input is a alpha-numeric string string","title":"Alphanumeric"},{"location":"utils/alphanumeric/#alphanumeric","text":"Alphanumeric object is used to check whether a given string is alpha-numeric and to generate random strings. Overview Module: utils/alphanumeric Definition: N/A Source: /utils/alphanumeric.js Status: stable Group: core","title":"Alphanumeric"},{"location":"utils/alphanumeric/#basic-usage","text":"ECMA6 import { alphanumeric } from \"sdk/utils\" ; import { response } from \"sdk/http\" ; response . println ( alphanumeric . toAlphanumeric ( \"@mystring123!#=\" )); response . flush (); response . close ();","title":"Basic Usage"},{"location":"utils/alphanumeric/#functions","text":"Function Description Returns toAlphanumeric(input) Remove non-alpha-numeric letters string randomString(length, charset) Generates alpha-numeric string in a given charset and with given length string alphanumeric(length, lowercase) Generates alpha-numeric string string alpha(length, lowercase) Generates alpha string string numeric(length) Generates alpha-numeric string string isNumeric(input) Checks is the input is a numeric string string isAlphanumeric(input) Checks is the input is a alpha-numeric string string","title":"Functions"},{"location":"utils/base64/","text":"Base64 Base64 object is used to encode/decode in base64. Overview Module: utils/base64 Definition: https://github.com/eclipse/dirigible/issues/22 Source: /utils/base64.js Status: stable Group: core Basic Usage ECMA6 import { base64 } from \"sdk/utils\" ; import { response } from \"sdk/http\" ; response . println ( base64 . encode ( \"admin:admin\" )); response . println ( base64 . decode ( \"YWRtaW46YWRtaW4=\" )); response . flush (); response . close (); Functions Function Description Returns encode(input) Encode an input string to Base64 string decode(input) Decode an input string from Base64 string","title":"Base64"},{"location":"utils/base64/#base64","text":"Base64 object is used to encode/decode in base64. Overview Module: utils/base64 Definition: https://github.com/eclipse/dirigible/issues/22 Source: /utils/base64.js Status: stable Group: core","title":"Base64"},{"location":"utils/base64/#basic-usage","text":"ECMA6 import { base64 } from \"sdk/utils\" ; import { response } from \"sdk/http\" ; response . println ( base64 . encode ( \"admin:admin\" )); response . println ( base64 . decode ( \"YWRtaW46YWRtaW4=\" )); response . flush (); response . close ();","title":"Basic Usage"},{"location":"utils/base64/#functions","text":"Function Description Returns encode(input) Encode an input string to Base64 string decode(input) Decode an input string from Base64 string","title":"Functions"},{"location":"utils/digest/","text":"Digest Digest object is used to encript binary/text with algorithms like md5, sha256 and sha512. Overview Module: utils/digest Definition: https://github.com/eclipse/dirigible/issues/24 Source: /utils/digest.js Status: stable Group: core Basic Usage ECMA6 import { digest } from \"sdk/utils\" ; import { response } from \"sdk/http\" ; response . println ( \"\" + digest . sha256 ( \"admin:admin\" )); response . println ( \"\" + digest . sha512 ( \"YWRtaW46YWRtaW4=\" )); response . flush (); response . close (); Functions Function Description Returns md5(input) Calculates the MD5 digest and returns the value as a 16 element byte array array of byte md5Hex(input) Calculates the MD5 digest and returns the value as a 32 character hex string string sha1(input) Returns an SHA-1 digest array of byte sha256(input) Returns an SHA-256 digest array of byte sha384(input) Returns an SHA-384 digest array of byte sha512(input) Returns an SHA-512 digest array of byte sha1Hex(input) Calculates the SHA-1 digest and returns the value as a hex string string","title":"Digest"},{"location":"utils/digest/#digest","text":"Digest object is used to encript binary/text with algorithms like md5, sha256 and sha512. Overview Module: utils/digest Definition: https://github.com/eclipse/dirigible/issues/24 Source: /utils/digest.js Status: stable Group: core","title":"Digest"},{"location":"utils/digest/#basic-usage","text":"ECMA6 import { digest } from \"sdk/utils\" ; import { response } from \"sdk/http\" ; response . println ( \"\" + digest . sha256 ( \"admin:admin\" )); response . println ( \"\" + digest . sha512 ( \"YWRtaW46YWRtaW4=\" )); response . flush (); response . close ();","title":"Basic Usage"},{"location":"utils/digest/#functions","text":"Function Description Returns md5(input) Calculates the MD5 digest and returns the value as a 16 element byte array array of byte md5Hex(input) Calculates the MD5 digest and returns the value as a 32 character hex string string sha1(input) Returns an SHA-1 digest array of byte sha256(input) Returns an SHA-256 digest array of byte sha384(input) Returns an SHA-384 digest array of byte sha512(input) Returns an SHA-512 digest array of byte sha1Hex(input) Calculates the SHA-1 digest and returns the value as a hex string string","title":"Functions"},{"location":"utils/escape/","text":"Escape Escape object is used to escape/unescape text in CSV, HTML3, HTML4, Javascript, Java, JSON and XML format. Overview Module: utils/escape Definition: https://github.com/eclipse/dirigible/issues/26 Source: /utils/escape.js Status: stable Group: core Basic Usage ECMA6 import { escape } from \"sdk/utils\" ; import { response } from \"sdk/http\" ; const input = \"<script type='text/javascript'>alert('evil script')</script>\" ; const result = escape . escapeJavascript ( input ); response . println ( result ); response . flush (); response . close (); Functions Function Description Returns escapeCsv(input) Escapes an input CSV string string escapeJavascript(input) Escapes an input Javascript string string escapeHtml3(input) Escapes an input HTML3 string string escapeHtml4(input) Escapes an input HTML4 string string escapeJava(input) Escapes an input Java string string escapeJson(input) Escapes an input JSON string string escapeXml(input) Escapes an input XML string string unescapeCsv(input) Unescapes an input CSV string string unescapeJavascript(input) Unescapes an input Javascript string string unescapeHtml3(input) Unescapes an input HTML3 string string unescapeHtml4(input) Unescapes an input HTML4 string string unescapeJava(input) Unescapes an input Java string string unescapeJson(input) Unescapes an input JSON string string unescapeXml(input) Unescapes an input XML string string","title":"Escape"},{"location":"utils/escape/#escape","text":"Escape object is used to escape/unescape text in CSV, HTML3, HTML4, Javascript, Java, JSON and XML format. Overview Module: utils/escape Definition: https://github.com/eclipse/dirigible/issues/26 Source: /utils/escape.js Status: stable Group: core","title":"Escape"},{"location":"utils/escape/#basic-usage","text":"ECMA6 import { escape } from \"sdk/utils\" ; import { response } from \"sdk/http\" ; const input = \"<script type='text/javascript'>alert('evil script')</script>\" ; const result = escape . escapeJavascript ( input ); response . println ( result ); response . flush (); response . close ();","title":"Basic Usage"},{"location":"utils/escape/#functions","text":"Function Description Returns escapeCsv(input) Escapes an input CSV string string escapeJavascript(input) Escapes an input Javascript string string escapeHtml3(input) Escapes an input HTML3 string string escapeHtml4(input) Escapes an input HTML4 string string escapeJava(input) Escapes an input Java string string escapeJson(input) Escapes an input JSON string string escapeXml(input) Escapes an input XML string string unescapeCsv(input) Unescapes an input CSV string string unescapeJavascript(input) Unescapes an input Javascript string string unescapeHtml3(input) Unescapes an input HTML3 string string unescapeHtml4(input) Unescapes an input HTML4 string string unescapeJava(input) Unescapes an input Java string string unescapeJson(input) Unescapes an input JSON string string unescapeXml(input) Unescapes an input XML string string","title":"Functions"},{"location":"utils/hex/","text":"Hex Hex object is used to encode/decode text/binary in hexadecimal format. Overview Module: utils/hex Definition: https://github.com/eclipse/dirigible/issues/23 Source: /utils/hex.js Status: stable Group: core Basic Usage ECMA6 import { hex } from \"sdk/utils\" ; import { response } from \"sdk/http\" ; response . println ( hex . encode ( \"Hex Encoded\" )); response . println ( hex . decode ( \"48657820456e636f646564\" )); response . flush (); response . close (); Functions Function Description Returns decode(input) Decode an input string from HEX string encode(input) Encode an input string to HEX string","title":"Hex"},{"location":"utils/hex/#hex","text":"Hex object is used to encode/decode text/binary in hexadecimal format. Overview Module: utils/hex Definition: https://github.com/eclipse/dirigible/issues/23 Source: /utils/hex.js Status: stable Group: core","title":"Hex"},{"location":"utils/hex/#basic-usage","text":"ECMA6 import { hex } from \"sdk/utils\" ; import { response } from \"sdk/http\" ; response . println ( hex . encode ( \"Hex Encoded\" )); response . println ( hex . decode ( \"48657820456e636f646564\" )); response . flush (); response . close ();","title":"Basic Usage"},{"location":"utils/hex/#functions","text":"Function Description Returns decode(input) Decode an input string from HEX string encode(input) Encode an input string to HEX string","title":"Functions"},{"location":"utils/jsonpath/","text":"JSONPath JSONPath utility adapted for Dirigible. Overview Module: utils/jsonpath Definition: N/A Source: /utils/jsonpath.js Status: stable Group: core Basic Usage ECMA6 import { jsonpath } from \"sdk/utils\" ; const json = { \"store\" : { \"book\" : [ { \"category\" : \"reference\" , \"author\" : \"Nigel Rees\" , \"title\" : \"Sayings of the Century\" , \"price\" : 8.95 }, { \"category\" : \"fiction\" , \"author\" : \"Evelyn Waugh\" , \"title\" : \"Sword of Honour\" , \"price\" : 12.99 }, { \"category\" : \"fiction\" , \"author\" : \"Herman Melville\" , \"title\" : \"Moby Dick\" , \"isbn\" : \"0-553-21311-3\" , \"price\" : 8.99 }, { \"category\" : \"fiction\" , \"author\" : \"J. R. R. Tolkien\" , \"title\" : \"The Lord of the Rings\" , \"isbn\" : \"0-395-19395-8\" , \"price\" : 22.99 } ], \"bicycle\" : { \"color\" : \"red\" , \"price\" : 19.95 } }, \"expensive\" : 10 } const actual = jsonpath ({ \"path\" : \"$.store..price\" , \"json\" : json }); console . log ( actual ) Functions Function Description Returns jsonpath(object) Evaluate JSONPath from given expression and json object string","title":"JSONPath"},{"location":"utils/jsonpath/#jsonpath","text":"JSONPath utility adapted for Dirigible. Overview Module: utils/jsonpath Definition: N/A Source: /utils/jsonpath.js Status: stable Group: core","title":"JSONPath"},{"location":"utils/jsonpath/#basic-usage","text":"ECMA6 import { jsonpath } from \"sdk/utils\" ; const json = { \"store\" : { \"book\" : [ { \"category\" : \"reference\" , \"author\" : \"Nigel Rees\" , \"title\" : \"Sayings of the Century\" , \"price\" : 8.95 }, { \"category\" : \"fiction\" , \"author\" : \"Evelyn Waugh\" , \"title\" : \"Sword of Honour\" , \"price\" : 12.99 }, { \"category\" : \"fiction\" , \"author\" : \"Herman Melville\" , \"title\" : \"Moby Dick\" , \"isbn\" : \"0-553-21311-3\" , \"price\" : 8.99 }, { \"category\" : \"fiction\" , \"author\" : \"J. R. R. Tolkien\" , \"title\" : \"The Lord of the Rings\" , \"isbn\" : \"0-395-19395-8\" , \"price\" : 22.99 } ], \"bicycle\" : { \"color\" : \"red\" , \"price\" : 19.95 } }, \"expensive\" : 10 } const actual = jsonpath ({ \"path\" : \"$.store..price\" , \"json\" : json }); console . log ( actual )","title":"Basic Usage"},{"location":"utils/jsonpath/#functions","text":"Function Description Returns jsonpath(object) Evaluate JSONPath from given expression and json object string","title":"Functions"},{"location":"utils/qrcode/","text":"QR Code QRCode object is used to generate a JavaScript byte array based on an input string. Overview Module: utils/qrcode Source: /utils/qrcode.js Status: stable Group: core Basic Usage ECMA6 import { qrcode } from \"sdk/utils\" ; import { response } from \"sdk/http\" ; let qrCodeBytes = qrcode . generateQRCode ( \"https://www.dirigible.io\" ); console . log ( \"QR Code Bytes: \" + qrCodeBytes ); response . setContentType ( 'image/png' ) response . write ( qrCodeBytes ); response . flush (); response . close (); Functions Function Description Returns generateQRCode(input) Generate a byte array from the input string byte array","title":"QR Code"},{"location":"utils/qrcode/#qr-code","text":"QRCode object is used to generate a JavaScript byte array based on an input string. Overview Module: utils/qrcode Source: /utils/qrcode.js Status: stable Group: core","title":"QR Code"},{"location":"utils/qrcode/#basic-usage","text":"ECMA6 import { qrcode } from \"sdk/utils\" ; import { response } from \"sdk/http\" ; let qrCodeBytes = qrcode . generateQRCode ( \"https://www.dirigible.io\" ); console . log ( \"QR Code Bytes: \" + qrCodeBytes ); response . setContentType ( 'image/png' ) response . write ( qrCodeBytes ); response . flush (); response . close ();","title":"Basic Usage"},{"location":"utils/qrcode/#functions","text":"Function Description Returns generateQRCode(input) Generate a byte array from the input string byte array","title":"Functions"},{"location":"utils/url/","text":"Url Url object is used to encode/decode text in the application/x-www-form-urlencoded MIME format. Overview Module: utils/url Definition: https://github.com/eclipse/dirigible/issues/25 Source: /utils/url.js Status: stable Group: core Basic Usage ECMA6 import { url } from \"sdk/utils\" ; import { response } from \"sdk/http\" ; response . println ( url . encode ( '<![CDATA[<meta http-equiv=\"refresh\" content=\"0;url=javascript:document.vulnerable=true;\">]]>' , 'UTF8' )); response . println ( url . decode ( '%3C%21%5BCDATA%5B%3Cmeta+http-equiv%3D%22refresh%22+content%3D%220%3Burl%3Djavascript%3Adocument.vulnerable%3Dtrue%3B%22%3E%5D%5D%3E' , 'UTF8' )); response . flush (); response . close (); Functions Function Description Returns encode(input) Encode an input string to application/x-www-form-urlencoded format string decode(input) Decode an input string from application/x-www-form-urlencoded format string escape(input) Escape an input string to comply to URI RFC 3986 string","title":"Url"},{"location":"utils/url/#url","text":"Url object is used to encode/decode text in the application/x-www-form-urlencoded MIME format. Overview Module: utils/url Definition: https://github.com/eclipse/dirigible/issues/25 Source: /utils/url.js Status: stable Group: core","title":"Url"},{"location":"utils/url/#basic-usage","text":"ECMA6 import { url } from \"sdk/utils\" ; import { response } from \"sdk/http\" ; response . println ( url . encode ( '<![CDATA[<meta http-equiv=\"refresh\" content=\"0;url=javascript:document.vulnerable=true;\">]]>' , 'UTF8' )); response . println ( url . decode ( '%3C%21%5BCDATA%5B%3Cmeta+http-equiv%3D%22refresh%22+content%3D%220%3Burl%3Djavascript%3Adocument.vulnerable%3Dtrue%3B%22%3E%5D%5D%3E' , 'UTF8' )); response . flush (); response . close ();","title":"Basic Usage"},{"location":"utils/url/#functions","text":"Function Description Returns encode(input) Encode an input string to application/x-www-form-urlencoded format string decode(input) Decode an input string from application/x-www-form-urlencoded format string escape(input) Escape an input string to comply to URI RFC 3986 string","title":"Functions"},{"location":"utils/utf8/","text":"UTF8 UTF8 object is used to encode/decode strings in UTF8. Overview Module: utils/utf8 Definition: N/A Source: /utils/utf8.js Status: stable Group: core Basic Usage ECMA6 import { utf8 } from \"sdk/utils\" ; import { response } from \"sdk/http\" ; response . println ( JSON . stringify ( utf8 . encode ( \"mystring\" ))); response . flush (); response . close (); Functions Function Description Returns encode(input, charset) Encode an input string to UTF8 string decode(input) Decode an input string as UTF8 string bytesToString(bytes, offset, length) Translate bytes to string in UTF8 string","title":"UTF8"},{"location":"utils/utf8/#utf8","text":"UTF8 object is used to encode/decode strings in UTF8. Overview Module: utils/utf8 Definition: N/A Source: /utils/utf8.js Status: stable Group: core","title":"UTF8"},{"location":"utils/utf8/#basic-usage","text":"ECMA6 import { utf8 } from \"sdk/utils\" ; import { response } from \"sdk/http\" ; response . println ( JSON . stringify ( utf8 . encode ( \"mystring\" ))); response . flush (); response . close ();","title":"Basic Usage"},{"location":"utils/utf8/#functions","text":"Function Description Returns encode(input, charset) Encode an input string to UTF8 string decode(input) Decode an input string as UTF8 string bytesToString(bytes, offset, length) Translate bytes to string in UTF8 string","title":"Functions"},{"location":"utils/uuid/","text":"UUID UUID object is used to generate random universally unique identifiers. Overview Module: utils/uuid Definition: https://github.com/eclipse/dirigible/issues/27 Source: /utils/uuid.js Status: stable Group: core Basic Usage ECMA6 import { uuid } from \"sdk/utils\" ; import { response } from \"sdk/http\" ; response . println ( uuid . random ()); response . println ( JSON . stringify ( uuid . validate ( \"14a3ddce-f86d-4f51-a2e0-6e497b94bbe5\" ))); response . flush (); response . close (); Functions Function Description Returns random() Returns a random UUID string string validate(input) Validates whether the provided input is a valid UUID string boolean","title":"UUID"},{"location":"utils/uuid/#uuid","text":"UUID object is used to generate random universally unique identifiers. Overview Module: utils/uuid Definition: https://github.com/eclipse/dirigible/issues/27 Source: /utils/uuid.js Status: stable Group: core","title":"UUID"},{"location":"utils/uuid/#basic-usage","text":"ECMA6 import { uuid } from \"sdk/utils\" ; import { response } from \"sdk/http\" ; response . println ( uuid . random ()); response . println ( JSON . stringify ( uuid . validate ( \"14a3ddce-f86d-4f51-a2e0-6e497b94bbe5\" ))); response . flush (); response . close ();","title":"Basic Usage"},{"location":"utils/uuid/#functions","text":"Function Description Returns random() Returns a random UUID string string validate(input) Validates whether the provided input is a valid UUID string boolean","title":"Functions"},{"location":"utils/xml/","text":"XML XML object is used to transfrom from JSON to XML and vice versa. Overview Module: utils/xml Definition: https://github.com/eclipse/dirigible/issues/28 Source: /utils/xml.js Status: stable Group: core Basic Usage ECMA6 import { xml } from \"sdk/utils\" ; import { response } from \"sdk/http\" ; const jsonInput = { firstName : \"John\" , lastName : \"Doe\" , bio : { age : 24 , sex : \"male\" } }; const xmlInput = \"<person>\" + \"<firstName>John</firstName>\" + \"<lastName>Doe</lastName>\" + \"<bio>\" + \"<age>24</age>\" + \"<sex>male</sex>\" + \"</bio>\" + \"</person>\" ; response . println ( xml . fromJson ( JSON . stringify ( jsonInput ))); response . println ( xml . toJson ( xmlInput )); response . flush (); response . close (); Functions Function Description Returns fromJson(json) Converts a JSON to a XML string string toJson(xml) Converts a XML to JSON string string","title":"XML"},{"location":"utils/xml/#xml","text":"XML object is used to transfrom from JSON to XML and vice versa. Overview Module: utils/xml Definition: https://github.com/eclipse/dirigible/issues/28 Source: /utils/xml.js Status: stable Group: core","title":"XML"},{"location":"utils/xml/#basic-usage","text":"ECMA6 import { xml } from \"sdk/utils\" ; import { response } from \"sdk/http\" ; const jsonInput = { firstName : \"John\" , lastName : \"Doe\" , bio : { age : 24 , sex : \"male\" } }; const xmlInput = \"<person>\" + \"<firstName>John</firstName>\" + \"<lastName>Doe</lastName>\" + \"<bio>\" + \"<age>24</age>\" + \"<sex>male</sex>\" + \"</bio>\" + \"</person>\" ; response . println ( xml . fromJson ( JSON . stringify ( jsonInput ))); response . println ( xml . toJson ( xmlInput )); response . flush (); response . close ();","title":"Basic Usage"},{"location":"utils/xml/#functions","text":"Function Description Returns fromJson(json) Converts a JSON to a XML string string toJson(xml) Converts a XML to JSON string string","title":"Functions"}]}